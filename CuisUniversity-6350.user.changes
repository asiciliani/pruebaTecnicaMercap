

----STARTUP---- (29 March 2025 16:56:23) as /home/andisici/Documents/Trabajo/mercap/ejTecnico/cuis/linux64/CuisUniversity-6350.image!


TestCase subclass: #TelephoneBillTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneBillTest category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 17:08:34'!
TestCase subclass: #TelephoneBillTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 17:14:36'!
Object subclass: #TelephoneLine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillTest methodsFor: 'nil' stamp: 'AS 3/29/2025 17:14:32'!
test01UnusedLineIsBilledBasicFee

	self assert: TelephoneLine new bill totalDue equals: self basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:14:42'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 17:14:56'!
bill
	self shouldBeImplemented.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:16:34'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:16:43'!
ERROR!

!classDefinition: #TelephoneBill category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 17:17:00'!
Object subclass: #TelephoneBill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 17:16:57' prior: 50539303!
bill
	^TelephoneBill new.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:17:02'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:17:02'!
ERROR!
!TelephoneBill methodsFor: 'total' stamp: 'AS 3/29/2025 17:17:23'!
totalDue
	self shouldBeImplemented.! !
!TelephoneBill methodsFor: 'total' stamp: 'AS 3/29/2025 17:17:46' prior: 50539318!
totalDue
	^self class basicMonthlyFee! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:17:47'!
ERROR!
!TelephoneBill class methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 17:17:55'!
basicMonthlyFee
	self shouldBeImplemented.! !
!TelephoneBill class methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 17:18:12' prior: 50539326!
basicMonthlyFee
	^10 * dollar! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:18:13'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:18:26'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:18:26'!
ERROR!
!TelephoneBillTest methodsFor: 'support' stamp: 'AS 3/29/2025 17:18:33'!
basicMonthlyFee
	self shouldBeImplemented.! !
!TelephoneBillTest methodsFor: 'support' stamp: 'AS 3/29/2025 17:18:45' prior: 50539335!
basicMonthlyFee
	^TelephoneBill basicMonthlyFee ! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:18:47'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:18:48'!
PASSED!

Monday!

8:02!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:18:15'!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: self basicMonthlyFee + (self weekDayWorkHoursFee * 2).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:18:26'!
ERROR!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 18:18:33'!
calls: line2 on: Monday at: aRenameMe1 for: aRenameMe2 
	self shouldBeImplemented.! !

1 += 2!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:29:47'!
ERROR!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:30:15' prior: 50539345!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: self basicMonthlyFee + (self weekDayWorkHoursFee * 2).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:30:15'!
ERROR!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 18:31:12'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 18:31:11' prior: 50539355!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:31:14'!
ERROR!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 18:32:45' overrides: 16932297!
initialize
	weekDayWorkHoursTimeUsed := 0 * minute! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:32:45'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:32:45'!
ERROR!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:32:45'!
ERROR!
!TelephoneBillTest methodsFor: 'support' stamp: 'AS 3/29/2025 18:33:11'!
weekDayWorkHoursFee
	self shouldBeImplemented.! !
!TelephoneBillTest methodsFor: 'support' stamp: 'AS 3/29/2025 18:33:26' prior: 50539393!
weekDayWorkHoursFee
	TelephoneBill weekDayWorkHoursFee.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:33:33'!
ERROR!
!TelephoneBill class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:33:47'!
weekDayWorkHoursFee
	self shouldBeImplemented.! !
!TelephoneBill class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:34:14' prior: 50539403!
weekDayWorkHoursFee
	^0.20 * dollar ! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:34:15'!
ERROR!

self weekDayWorkHoursFee!
!TelephoneBillTest methodsFor: 'support' stamp: 'AS 3/29/2025 18:34:52' prior: 50539398!
weekDayWorkHoursFee
	^TelephoneBill weekDayWorkHoursFee.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:34:53'!
FAILURE!

!methodRemoval: TelephoneBillTest #basicMonthlyFee stamp: 'AS 3/29/2025 18:35:16'!
basicMonthlyFee
	^TelephoneBill basicMonthlyFee !
!TelephoneBill methodsFor: 'total' stamp: 'AS 3/29/2025 18:35:16' prior: 50539322!
totalDue
	^TelephoneBill basicMonthlyFee ! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:35:16' prior: 50539362!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: (TelephoneBill basicMonthlyFee ) + (self weekDayWorkHoursFee * 2).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:35:16' prior: 50539297!
test01UnusedLineIsBilledBasicFee

	self assert: TelephoneLine new bill totalDue equals: (TelephoneBill basicMonthlyFee ).! !

!methodRemoval: TelephoneBillTest #weekDayWorkHoursFee stamp: 'AS 3/29/2025 18:35:27'!
weekDayWorkHoursFee
	^TelephoneBill weekDayWorkHoursFee.!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:35:27' prior: 50539427!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: (TelephoneBill basicMonthlyFee ) + ((TelephoneBill weekDayWorkHoursFee) * 2).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:36:04'!
FAILURE!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 18:40:19' prior: 50539315!
bill
	^TelephoneBill for: self .! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 18:40:24' prior: 50539462!
bill
	^TelephoneBill for: self.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:40:29'!
ERROR!
!TelephoneBill class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 18:40:36'!
for: aTelephoneLine 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aTelephoneLine ! !
!TelephoneBill class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 18:40:42' prior: 50539470!
for: aTelephoneLine 
	^self new initializeFor: aTelephoneLine ! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:40:43'!
ERROR!

!classDefinition: #TelephoneBill category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 18:40:51'!
Object subclass: #TelephoneBill
	instanceVariableNames: 'telephoneLine'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBill methodsFor: 'instance creation' stamp: 'AS 3/29/2025 18:40:51'!
initializeFor: aTelephoneLine 
	self shouldBeImplemented.
	telephoneLine := aTelephoneLine.! !
!TelephoneBill methodsFor: 'instance creation' stamp: 'AS 3/29/2025 18:41:05' prior: 50539492!
initializeFor: aTelephoneLine 
	telephoneLine := aTelephoneLine.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:41:08'!
FAILURE!
!TelephoneBill methodsFor: 'total' stamp: 'AS 3/29/2025 18:48:31' prior: 50539422!
totalDue
	^telephoneLine totalDue! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:48:34'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 18:49:30'!
totalDue
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 18:50:44' prior: 50539507!
totalDue
	^TelephoneBill basicMonthlyFee + weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:50:46'!
ERROR!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:50:55'!
weekDayWorkHoursFee
	self shouldBeImplemented.! !
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:51:12' prior: 50539517!
weekDayWorkHoursFee
	^0.2 * dollar! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:51:13'!
FAILURE!

line1 bill totalDue!

TelephoneBill basicMonthlyFee!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:53:01' prior: 50539522!
weekDayWorkHoursFee
	^0.2 * dollar / minute! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:53:02'!
FAILURE!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:53:06'!
FAILURE!
!TelephoneBill class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:53:25' prior: 50539408!
weekDayWorkHoursFee
	^0.20 * dollar / minute! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:53:26'!
FAILURE!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:53:30'!
FAILURE!

line1 bill totalDue!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 18:54:00' prior: 50539511!
totalDue
	^TelephoneBill basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:54:03'!
FAILURE!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:54:07'!
FAILURE!

weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee!

^TelephoneBill basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)!

(TelephoneBill weekDayWorkHoursFee) * 2!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:55:13' prior: 50539451!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: (TelephoneBill basicMonthlyFee ) + ((TelephoneBill weekDayWorkHoursFee) * 2 * minute).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:55:14'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:55:14'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:55:14'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:55:26' prior: 50539551!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneBill weekDayWorkHoursFee) * 2 * minute).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:55:26'!
ERROR!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:55:30'!
basicMonthlyFee
	self shouldBeImplemented.! !
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:55:35' prior: 50539574!
basicMonthlyFee
	^10 * dollar! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:55:36'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:55:36'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:55:36'!
PASSED!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 18:56:07' prior: 50539538!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:56:17' prior: 50539439!
test01UnusedLineIsBilledBasicFee

	self assert: TelephoneLine new bill totalDue equals: (TelephoneLine basicMonthlyFee ).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:56:25' prior: 50539590!
test01UnusedLineIsBilledBasicFee

	self assert: TelephoneLine new bill totalDue equals: TelephoneLine basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:56:28'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:56:28'!
PASSED!

!methodRemoval: TelephoneBill class #basicMonthlyFee stamp: 'AS 3/29/2025 18:56:38'!
basicMonthlyFee
	^10 * dollar!

!methodRemoval: TelephoneBill class #weekDayWorkHoursFee stamp: 'AS 3/29/2025 18:56:40'!
weekDayWorkHoursFee
	^0.20 * dollar / minute!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:56:46'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:56:46'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:56:46'!
ERROR!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:56:46'!
ERROR!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:56:54' prior: 50539563!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * 2 * minute).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:56:56'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:56:57'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:56:57'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:56:57'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:57:21' prior: 50539613!
test02
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 bill totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:57:26' prior: 50539625!
test02
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 bill totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:57:26'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:57:26'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:57:26'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:57:45' prior: 50539598!
test01UnusedLineIsBilledBasicFee

	self assert: TelephoneLine new totalDue equals: TelephoneLine basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:57:45'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:57:45'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:57:45'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:57:50' prior: 50539639!
test02
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:57:50'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:57:50'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:57:50'!
PASSED!

!methodRemoval: TelephoneLine #bill stamp: 'AS 3/29/2025 18:58:10'!
bill
	^TelephoneBill for: self.!

!classRemoval: #TelephoneBill stamp: 'AS 3/29/2025 18:58:14'!
Object subclass: #TelephoneBill
	instanceVariableNames: 'telephoneLine'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:58:18'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:58:18'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:58:18'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:06:05'!
test03
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:06:08'!
ERROR!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:06:13'!
weekDayNonWorkHoursFee
	self shouldBeImplemented.! !
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:06:34' prior: 50539696!
weekDayNonWorkHoursFee
	^0.1 * dollar / minute! !

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:06:54'!
FAILURE!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 19:08:02'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:08:10' prior: 50539583!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee) 
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee).! !

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:09:26'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:09:42' prior: 50539715!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee) 
										+ (weekDayNonWorkHoursTimeUsed * (self class weekDayNonWorkHoursFee)).! !

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:09:43'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:10:24' prior: 50539724!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * (self class weekDayWorkHoursFee))
										+ (weekDayNonWorkHoursTimeUsed * (self class weekDayNonWorkHoursFee)).! !

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:10:25'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:10:38' prior: 50539733!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee).! !
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:12:52' prior: 50539381!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	((8:00 <= aTimeOfDay) and: [aTimeOfDay <= 20:00]) ifTrue: [weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].! !
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:13:12' prior: 50539751!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	((8:00 <= aTimeOfDay) and: [aTimeOfDay <= 20:00]) ifTrue: [weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
	weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration.! !

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:13:29'!
ERROR!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:13:43' prior: 50539389 overrides: 16932297!
initialize
	weekDayWorkHoursTimeUsed := 0 * minute.
	weekDayNonWorkHoursTimeUsed := 0 * minute! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:13:44'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:13:44'!
ERROR!

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:13:44'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:13:44'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:13:53'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:13:55'!
ERROR!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:13:55'!
ERROR!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:14:08'!
ERROR!

20:00!

8:00 <= aTimeOfDay!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:15:24' prior: 50539761!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
	weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:15:26'!
FAILURE!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:15:30'!
FAILURE!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:16:07' prior: 50539781!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
	weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:16:10'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:16:10'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:16:10'!
PASSED!

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:16:10'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:16:44'!
test02CallDuringWeekDayWorkHoursIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test02CallDuringWeekDayWorkHoursIsBilledCorrectly stamp: 'AS 3/29/2025 19:16:48'!
test02CallDuringWeekDayWorkHoursIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:17:05'!
test02WeekDayWorkHoursCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:17:05'!
test02
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:17:10'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:17:10'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:17:10'!
PASSED!

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:17:10'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:17:31'!
test03WeekDayNonWorkHoursCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:17:31'!
test03
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:17:35'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:17:35'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:17:35'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:17:35'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:18:56'!
test04WeekendCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:18:59'!
ERROR!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:19:05'!
weekendHoursFee
	self shouldBeImplemented.! !
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:19:15' prior: 50539900!
weekendHoursFee
	^0.1 * dollar / minute! !

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:19:16'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:19:16'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:19:16'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:19:16'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:19:16'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:07'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:24:07'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:07'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:07'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:07'!
PASSED!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:24:39' prior: 50539905!
weekendHoursFee
	^0.12 * dollar / minute! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:24:40'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:40'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:40'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:40'!
FAILURE!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:40'!
FAILURE!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 19:26:21'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:26:18' prior: 50539793!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	aDayOfTheWeek isWeekDay ifTrue: [
	((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
	weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration. ]
	ifFalse: [weekEndTimeUsed := weekEndTimeUsed + aCallDuration].! !
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:26:54' prior: 50539774 overrides: 16932297!
initialize
	weekDayWorkHoursTimeUsed := 0 * minute.
	weekDayNonWorkHoursTimeUsed := 0 * minute.
	weekEndTimeUsed  := 0 * minute.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:26:55'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:26:57'!
ERROR!
!GregorianDay methodsFor: 'querying' stamp: 'AS 3/29/2025 19:27:15'!
isWeekDay
	self shouldBeImplemented.! !
!GregorianDay methodsFor: 'querying' stamp: 'AS 3/29/2025 19:27:55' prior: 50539947!
isWeekDay
	^self isWeekend not! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:27:58'!
ERROR!
!GregorianDay methodsFor: 'querying' stamp: 'AS 3/29/2025 19:28:01'!
isWeekend
	self shouldBeImplemented.! !
!GregorianDay methodsFor: 'querying' stamp: 'AS 3/29/2025 19:28:24' prior: 50539955!
isWeekend
	^self = Saturday or: [self = Sunday].! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:28:25'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:28:26'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:28:26'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:28:26'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:28:26'!
FAILURE!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:28:26'!
FAILURE!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:29:17' prior: 50539742!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee)
										+ (weekEndTimeUsed * self class weekDayNonWorkHoursFee).! !

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:29:19'!
FAILURE!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:29:34' prior: 50539964!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee)
										+ (weekEndTimeUsed * self class weekendHoursFee).! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:29:35'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:29:35'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:29:35'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:29:35'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:39:57'!
todo
	'- refactor isWorkableTime
	- tiempos de los tests en funcion de work hours definidas en telephoneline'! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:40:28' prior: 50539986!
todo
	'- refactor isWorkableTime
	- tiempos de los tests en funcion de work hours definidas en telephoneline o algun lado (en vez de 8:00, workHourStart + 1 minute)'! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:41:02'!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:41:02'!
test02WeekDayWorkHoursCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:41:10'!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:41:10'!
test03WeekDayNonWorkHoursCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:41:14'!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:41:14'!
test04WeekendCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:42:29'!
comments
	'No modelo como una linea llama a la otra (entiendo que excede lo pedido, que es solo facturar), por lo que seteo las llamadas desde los tests.'! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:46:10'!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires'.
	line2 := TelephoneLine from: 'Rosario'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:46:13'!
ERROR!
!TelephoneLine class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 19:46:24'!
from: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: aRenameMe1 ! !
!TelephoneLine class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 19:46:53' prior: 50540110!
from: aCallingRegion 
	^self new initializeFrom: aCallingRegion ! !

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:46:54'!
ERROR!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 19:47:04'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed callingRegion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'instance creation' stamp: 'AS 3/29/2025 19:47:04'!
initializeFrom: aCallingRegion 
	self shouldBeImplemented.
	callingRegion := aCallingRegion.! !
!TelephoneLine methodsFor: 'instance creation' stamp: 'AS 3/29/2025 19:47:11' prior: 50540134!
initializeFrom: aCallingRegion 
	callingRegion := aCallingRegion.! !

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 19:47:13'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed region'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:47:13' prior: 50540140!
initializeFrom: aCallingRegion 
	region := aCallingRegion.! !

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:47:22'!
ERROR!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:47:29'!
nationalFee
	self shouldBeImplemented.! !
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:47:57' prior: 50540160!
nationalFee
	^14 * dollar / minute.! !

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:47:59'!
FAILURE!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 19:51:04'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed region nationalTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:50:52' prior: 50539924!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	(aLineThatWasCalled isFrom: region) ifTrue: [
		aDayOfTheWeek isWeekDay ifTrue: [
		((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
		weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration. ]
		ifFalse: [weekEndTimeUsed := weekEndTimeUsed + aCallDuration].]
	ifFalse: [nationalTimeUsed := nationalTimeUsed + aCallDuration].
	! !
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:51:27' prior: 50539940 overrides: 16932297!
initialize
	weekDayWorkHoursTimeUsed := 0 * minute.
	weekDayNonWorkHoursTimeUsed := 0 * minute.
	weekEndTimeUsed  := 0 * minute.
	nationalTimeUsed := 0 * minute.
	! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:51:28'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:51:28'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:51:28'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:51:28'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:51:28'!
ERROR!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:51:45' prior: 50539993!
todo
	'- refactor isWorkableTime
	- tiempos de los tests en funcion de work hours definidas en telephoneline o algun lado (en vez de 8:00, workHourStart + 1 minute)
	- renombrar colabs de line agregandoles local'! !

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:51:56'!
ERROR!
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/29/2025 19:52:12'!
isFrom: aRegion 
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/29/2025 19:52:26' prior: 50540218!
isFrom: aRegion 
	^region = aRegion.! !

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:27'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:30'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:52:30'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:30'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:30'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:30'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:30'!
FAILURE!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:30'!
FAILURE!

line1 totalDue!

^region = aRegion!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:54:02' prior: 50539975!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee)
										+ (weekEndTimeUsed * self class weekendHoursFee)
										+ (nationalTimeUsed * self class nationalFee).! !

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:11'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:13'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:54:13'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:13'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:13'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:13'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:13'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:54:23'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:37'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:56:31'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:56:31'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:56:31'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:56:31'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:56:31'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:56:31'!
PASSED!

----SNAPSHOT----(29 March 2025 19:57:05) CuisUniversity-6350.image priorSource: 6643839!
!Behavior method!
totalDue
	#_coverageTracker10848190_ markAsExecuted.
	^ [ | receiver17 |
	receiver17 := [ | receiver13 |
	receiver13 := [ | receiver9 |
	receiver9 := [ | receiver5 |
	receiver5 := [ | receiver1 |
	receiver1 := #_coverageTracker10848190_
		coverAll:
			{12 to: 24}
		by: TelephoneLine.
	#_coverageTracker10848190_
		coverAll:
			{26 to: 40}
		evaluating: [ receiver1 basicMonthlyFee ]
		thatSends: #basicMonthlyFee
		to: receiver1 ] value.
	#_coverageTracker10848190_
		coverAll:
			{42 to: 42}
		evaluating: [
			receiver5 +
				[ | receiver4 |
				receiver4 := #_coverageTracker10848190_
					cover: (45 to: 68)
					declaredAt: (45 to: 68)
					by: weekDayWorkHoursTimeUsed.
				#_coverageTracker10848190_
					coverAll:
						{70 to: 70}
					evaluating: [
						receiver4 *
							[ | receiver3 |
							receiver3 := [ | receiver2 |
							receiver2 := #_coverageTracker10848190_
								coverAll:
									{72 to: 75}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker10848190_
								coverAll:
									{77 to: 81}
								evaluating: [ receiver2 class ]
								thatSends: #class
								to: receiver2 ] value.
							#_coverageTracker10848190_
								coverAll:
									{83 to: 101}
								evaluating: [ receiver3 weekDayWorkHoursFee ]
								thatSends: #weekDayWorkHoursFee
								to: receiver3 ] value ]
					thatSends: #*
					to: receiver4 ] value ]
		thatSends: #+
		to: receiver5 ] value.
	#_coverageTracker10848190_
		coverAll:
			{114 to: 114}
		evaluating: [
			receiver9 +
				[ | receiver8 |
				receiver8 := #_coverageTracker10848190_
					cover: (117 to: 143)
					declaredAt: (117 to: 143)
					by: weekDayNonWorkHoursTimeUsed.
				#_coverageTracker10848190_
					coverAll:
						{145 to: 145}
					evaluating: [
						receiver8 *
							[ | receiver7 |
							receiver7 := [ | receiver6 |
							receiver6 := #_coverageTracker10848190_
								coverAll:
									{147 to: 150}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker10848190_
								coverAll:
									{152 to: 156}
								evaluating: [ receiver6 class ]
								thatSends: #class
								to: receiver6 ] value.
							#_coverageTracker10848190_
								coverAll:
									{158 to: 179}
								evaluating: [ receiver7 weekDayNonWorkHoursFee ]
								thatSends: #weekDayNonWorkHoursFee
								to: receiver7 ] value ]
					thatSends: #*
					to: receiver8 ] value ]
		thatSends: #+
		to: receiver9 ] value.
	#_coverageTracker10848190_
		coverAll:
			{192 to: 192}
		evaluating: [
			receiver13 +
				[ | receiver12 |
				receiver12 := #_coverageTracker10848190_
					cover: (195 to: 209)
					declaredAt: (195 to: 209)
					by: weekEndTimeUsed.
				#_coverageTracker10848190_
					coverAll:
						{211 to: 211}
					evaluating: [
						receiver12 *
							[ | receiver11 |
							receiver11 := [ | receiver10 |
							receiver10 := #_coverageTracker10848190_
								coverAll:
									{213 to: 216}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker10848190_
								coverAll:
									{218 to: 222}
								evaluating: [ receiver10 class ]
								thatSends: #class
								to: receiver10 ] value.
							#_coverageTracker10848190_
								coverAll:
									{224 to: 238}
								evaluating: [ receiver11 weekendHoursFee ]
								thatSends: #weekendHoursFee
								to: receiver11 ] value ]
					thatSends: #*
					to: receiver12 ] value ]
		thatSends: #+
		to: receiver13 ] value.
	#_coverageTracker10848190_
		coverAll:
			{251 to: 251}
		evaluating: [
			receiver17 +
				[ | receiver16 |
				receiver16 := #_coverageTracker10848190_
					cover: (254 to: 269)
					declaredAt: (254 to: 269)
					by: nationalTimeUsed.
				#_coverageTracker10848190_
					coverAll:
						{271 to: 271}
					evaluating: [
						receiver16 *
							[ | receiver15 |
							receiver15 := [ | receiver14 |
							receiver14 := #_coverageTracker10848190_
								coverAll:
									{273 to: 276}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker10848190_
								coverAll:
									{278 to: 282}
								evaluating: [ receiver14 class ]
								thatSends: #class
								to: receiver14 ] value.
							#_coverageTracker10848190_
								coverAll:
									{284 to: 294}
								evaluating: [ receiver15 nationalFee ]
								thatSends: #nationalFee
								to: receiver15 ] value ]
					thatSends: #*
					to: receiver16 ] value ]
		thatSends: #+
		to: receiver17 ] value.! !
!Behavior method!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	#_coverageTracker10848225_ markAsExecuted.
	[ | receiver14 |
	receiver14 := [ | receiver1 |
	receiver1 := #_coverageTracker10848225_
		cover: (82 to: 99)
		declaredAt: (8 to: 25)
		by: aLineThatWasCalled.
	#_coverageTracker10848225_
		coverAll:
			{101 to: 107}
		evaluating: [
			receiver1 isFrom:
				(#_coverageTracker10848225_
					cover: (109 to: 114)
					declaredAt: (109 to: 114)
					by: region) ]
		thatSends: #isFrom:
		to: receiver1 ] value.
	#_coverageTracker10848225_
		coverAll:
			{117 to: 123. 446 to: 453}
		evaluating: [
			receiver14
				ifTrue: [
					[ | receiver12 |
					receiver12 := [ | receiver2 |
					receiver2 := #_coverageTracker10848225_
						cover: (129 to: 141)
						declaredAt: (31 to: 43)
						by: aDayOfTheWeek.
					#_coverageTracker10848225_
						coverAll:
							{143 to: 151}
						evaluating: [ receiver2 isWeekDay ]
						thatSends: #isWeekDay
						to: receiver2 ] value.
					#_coverageTracker10848225_
						coverAll:
							{153 to: 159. 381 to: 388}
						evaluating: [
							receiver12
								ifTrue: [
									[ | receiver9 |
									receiver9 := [ | receiver7 |
									receiver7 := [ | receiver4 |
									receiver4 := [ | receiver3 |
									receiver3 := #_coverageTracker10848225_
										coverAll:
											{167 to: 167}
										byLiteralOrPseudoVariable: 8.
									#_coverageTracker10848225_
										coverAll:
											{168 to: 168}
										evaluating: [
											receiver3 :
												(#_coverageTracker10848225_
													coverAll:
														{169 to: 170}
													byLiteralOrPseudoVariable: 0) ]
										thatSends: #:
										to: receiver3 ] value.
									#_coverageTracker10848225_
										coverAll:
											{172 to: 173}
										evaluating: [
											receiver4 <=
												(#_coverageTracker10848225_
													cover: (175 to: 184)
													declaredAt: (49 to: 58)
													by: aTimeOfDay) ]
										thatSends: #<=
										to: receiver4 ] value.
									#_coverageTracker10848225_
										coverAll:
											{187 to: 190}
										evaluating: [
											receiver7 and: [
												[ | receiver6 |
												receiver6 := #_coverageTracker10848225_
													cover: (193 to: 202)
													declaredAt: (49 to: 58)
													by: aTimeOfDay.
												#_coverageTracker10848225_
													coverAll:
														{204 to: 205}
													evaluating: [
														receiver6 <=
															[ | receiver5 |
															receiver5 := #_coverageTracker10848225_
																coverAll:
																	{208 to: 209}
																byLiteralOrPseudoVariable: 20.
															#_coverageTracker10848225_
																coverAll:
																	{210 to: 210}
																evaluating: [
																	receiver5 :
																		(#_coverageTracker10848225_
																			coverAll:
																				{211 to: 212}
																			byLiteralOrPseudoVariable: 0) ]
																thatSends: #:
																to: receiver5 ] value ]
													thatSends: #<=
													to: receiver6 ] value ]]
										thatSends: #and:
										to: receiver7 ] value.
									#_coverageTracker10848225_
										coverAll:
											{217 to: 223}
										evaluating: [ receiver9 ifTrue: [ ^ #_coverageTracker10848225_
													cover: (255 to: 278)
													declaredAt: (227 to: 250)
													by:
														(weekDayWorkHoursTimeUsed := [ | receiver8 |
														receiver8 := #_coverageTracker10848225_
															cover: (227 to: 250)
															declaredAt: (227 to: 250)
															by: weekDayWorkHoursTimeUsed.
														#_coverageTracker10848225_
															coverAll:
																{280 to: 280}
															evaluating: [
																receiver8 +
																	(#_coverageTracker10848225_
																		cover: (282 to: 294)
																		declaredAt: (65 to: 77)
																		by: aCallDuration) ]
															thatSends: #+
															to: receiver8 ] value) ]]
										thatSends: #ifTrue:
										to: receiver9 ] value.
									#_coverageTracker10848225_
										cover: (332 to: 358)
										declaredAt: (301 to: 327)
										by:
											(weekDayNonWorkHoursTimeUsed := [ | receiver10 |
											receiver10 := #_coverageTracker10848225_
												cover: (301 to: 327)
												declaredAt: (301 to: 327)
												by: weekDayNonWorkHoursTimeUsed.
											#_coverageTracker10848225_
												coverAll:
													{360 to: 360}
												evaluating: [
													receiver10 +
														(#_coverageTracker10848225_
															cover: (362 to: 374)
															declaredAt: (65 to: 77)
															by: aCallDuration) ]
												thatSends: #+
												to: receiver10 ] value) ]
								ifFalse: [
									#_coverageTracker10848225_
										cover: (410 to: 424)
										declaredAt: (391 to: 405)
										by:
											(weekEndTimeUsed := [ | receiver11 |
											receiver11 := #_coverageTracker10848225_
												cover: (391 to: 405)
												declaredAt: (391 to: 405)
												by: weekEndTimeUsed.
											#_coverageTracker10848225_
												coverAll:
													{426 to: 426}
												evaluating: [
													receiver11 +
														(#_coverageTracker10848225_
															cover: (428 to: 440)
															declaredAt: (65 to: 77)
															by: aCallDuration) ]
												thatSends: #+
												to: receiver11 ] value) ]]
						thatSends: #ifTrue:ifFalse:
						to: receiver12 ] value ]
				ifFalse: [
					#_coverageTracker10848225_
						cover: (476 to: 491)
						declaredAt: (456 to: 471)
						by:
							(nationalTimeUsed := [ | receiver13 |
							receiver13 := #_coverageTracker10848225_
								cover: (456 to: 471)
								declaredAt: (456 to: 471)
								by: nationalTimeUsed.
							#_coverageTracker10848225_
								coverAll:
									{493 to: 493}
								evaluating: [
									receiver13 +
										(#_coverageTracker10848225_
											cover: (495 to: 507)
											declaredAt: (65 to: 77)
											by: aCallDuration) ]
								thatSends: #+
								to: receiver13 ] value) ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver14 ] value.! !
!Behavior method!
nationalFee
	#_coverageTracker10848260_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker10848260_
		coverAll:
			{15 to: 16}
		byLiteralOrPseudoVariable: 14.
	#_coverageTracker10848260_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver1 *
				(#_coverageTracker10848260_
					coverAll:
						{20 to: 25}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker10848260_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver2 /
				(#_coverageTracker10848260_
					coverAll:
						{29 to: 34}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
isFrom: aRegion
	#_coverageTracker10848268_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker10848268_
		cover: (20 to: 25)
		declaredAt: (20 to: 25)
		by: region.
	#_coverageTracker10848268_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver1 =
				(#_coverageTracker10848268_
					cover: (29 to: 35)
					declaredAt: (9 to: 15)
					by: aRegion) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
initialize
	#_coverageTracker10848275_ markAsExecuted.
	#_coverageTracker10848275_
		cover: (13 to: 36)
		declaredAt: (13 to: 36)
		by:
			(weekDayWorkHoursTimeUsed := [ | receiver1 |
			receiver1 := #_coverageTracker10848275_
				coverAll:
					{41 to: 41}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker10848275_
				coverAll:
					{43 to: 43}
				evaluating: [
					receiver1 *
						(#_coverageTracker10848275_
							coverAll:
								{45 to: 50}
							by: minute) ]
				thatSends: #*
				to: receiver1 ] value).
	#_coverageTracker10848275_
		cover: (54 to: 80)
		declaredAt: (54 to: 80)
		by:
			(weekDayNonWorkHoursTimeUsed := [ | receiver2 |
			receiver2 := #_coverageTracker10848275_
				coverAll:
					{85 to: 85}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker10848275_
				coverAll:
					{87 to: 87}
				evaluating: [
					receiver2 *
						(#_coverageTracker10848275_
							coverAll:
								{89 to: 94}
							by: minute) ]
				thatSends: #*
				to: receiver2 ] value).
	#_coverageTracker10848275_
		cover: (98 to: 112)
		declaredAt: (98 to: 112)
		by:
			(weekEndTimeUsed := [ | receiver3 |
			receiver3 := #_coverageTracker10848275_
				coverAll:
					{118 to: 118}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker10848275_
				coverAll:
					{120 to: 120}
				evaluating: [
					receiver3 *
						(#_coverageTracker10848275_
							coverAll:
								{122 to: 127}
							by: minute) ]
				thatSends: #*
				to: receiver3 ] value).
	#_coverageTracker10848275_
		cover: (131 to: 146)
		declaredAt: (131 to: 146)
		by:
			(nationalTimeUsed := [ | receiver4 |
			receiver4 := #_coverageTracker10848275_
				coverAll:
					{151 to: 151}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker10848275_
				coverAll:
					{153 to: 153}
				evaluating: [
					receiver4 *
						(#_coverageTracker10848275_
							coverAll:
								{155 to: 160}
							by: minute) ]
				thatSends: #*
				to: receiver4 ] value).! !
!Behavior method!
weekDayNonWorkHoursFee
	#_coverageTracker10848285_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker10848285_
		coverAll:
			{26 to: 28}
		byLiteralOrPseudoVariable: 0.1.
	#_coverageTracker10848285_
		coverAll:
			{30 to: 30}
		evaluating: [
			receiver1 *
				(#_coverageTracker10848285_
					coverAll:
						{32 to: 37}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker10848285_
		coverAll:
			{39 to: 39}
		evaluating: [
			receiver2 /
				(#_coverageTracker10848285_
					coverAll:
						{41 to: 46}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
weekendHoursFee
	#_coverageTracker10848291_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker10848291_
		coverAll:
			{19 to: 22}
		byLiteralOrPseudoVariable: 0.12.
	#_coverageTracker10848291_
		coverAll:
			{24 to: 24}
		evaluating: [
			receiver1 *
				(#_coverageTracker10848291_
					coverAll:
						{26 to: 31}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker10848291_
		coverAll:
			{33 to: 33}
		evaluating: [
			receiver2 /
				(#_coverageTracker10848291_
					coverAll:
						{35 to: 40}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
weekDayWorkHoursFee
	#_coverageTracker10848295_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker10848295_
		coverAll:
			{23 to: 25}
		byLiteralOrPseudoVariable: 0.2.
	#_coverageTracker10848295_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver1 *
				(#_coverageTracker10848295_
					coverAll:
						{29 to: 34}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker10848295_
		coverAll:
			{36 to: 36}
		evaluating: [
			receiver2 /
				(#_coverageTracker10848295_
					coverAll:
						{38 to: 43}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker10848304_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker10848304_
		coverAll:
			{19 to: 20}
		byLiteralOrPseudoVariable: 10.
	#_coverageTracker10848304_
		coverAll:
			{22 to: 22}
		evaluating: [
			receiver1 *
				(#_coverageTracker10848304_
					coverAll:
						{24 to: 29}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.! !
!Behavior method!
from: aCallingRegion
	#_coverageTracker10848310_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker10848310_
		coverAll:
			{25 to: 28}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker10848310_
		coverAll:
			{30 to: 32}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker10848310_
		coverAll:
			{34 to: 48}
		evaluating: [
			receiver2 initializeFrom:
				(#_coverageTracker10848310_
					cover: (50 to: 63)
					declaredAt: (7 to: 20)
					by: aCallingRegion) ]
		thatSends: #initializeFrom:
		to: receiver2 ] value.! !
!Behavior method!
initializeFrom: aCallingRegion
	#_coverageTracker10848315_ markAsExecuted.
	#_coverageTracker10848315_
		cover: (34 to: 39)
		declaredAt: (34 to: 39)
		by:
			(region := #_coverageTracker10848315_
				cover: (44 to: 57)
				declaredAt: (17 to: 30)
				by: aCallingRegion).! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:57:11'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:57:11'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:57:11'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:57:11'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:57:11'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:58:37' prior: 50539653!
test01UnusedLineIsBilledBasicFee

	self assert: (TelephoneLine from: 'Buenos Aires') totalDue equals: TelephoneLine basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:58:38'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:58:38'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:38'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:38'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:38'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:38'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:58:45' prior: 50540001!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires').
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:45'!
FAILURE!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:58:52' prior: 50540792!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires').
	line2 := (TelephoneLine from: 'Buenos Aires').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:52'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:58:52'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:52'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:52'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:52'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:52'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:59:00' prior: 50540030!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires').
	line2 := (TelephoneLine from: 'Buenos Aires').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:00'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:59:00'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:00'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:00'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:00'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:00'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:59:07' prior: 50540059!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires').
	line2 := (TelephoneLine from: 'Buenos Aires').
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:07'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:59:07'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:07'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:07'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:07'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:07'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:03:22'!
test05InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires'.
	line2 := TelephoneLine from: 'Rosario'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:03:40'!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires'.
	line2 := TelephoneLine from: 'Rosario'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test05InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:03:40'!
test05InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires'.
	line2 := TelephoneLine from: 'Rosario'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:03:46' prior: 50540869!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires'.
	line2 := TelephoneLine from: 'Rosario'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:03:50'!
ERROR!
!TelephoneLine class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 20:04:42'!
from: aCallingRegion in: aCountry  
	^self new initializeFrom: aCallingRegion ! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:42' prior: 50540823!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires' in: Argentina).
	line2 := (TelephoneLine from: 'Buenos Aires' in: Argentina).
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:42' prior: 50540839!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires' in: Argentina).
	line2 := (TelephoneLine from: 'Buenos Aires' in: Argentina).
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:42' prior: 50540784!
test01UnusedLineIsBilledBasicFee

	self assert: (TelephoneLine from: 'Buenos Aires' in: Argentina) totalDue equals: TelephoneLine basicMonthlyFee.! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:42' prior: 50540899!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires' in: Argentina.
	line2 := TelephoneLine from: 'Rosario' in: Argentina.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:42' prior: 50540807!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires' in: Argentina).
	line2 := (TelephoneLine from: 'Buenos Aires' in: Argentina).
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:42' prior: 50540095!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires' in: Argentina.
	line2 := TelephoneLine from: 'Rosario' in: Argentina.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !

!methodRemoval: TelephoneLine class #from: stamp: 'AS 3/29/2025 20:04:42'!
from: aCallingRegion 
	^self new initializeFrom: aCallingRegion !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:55' prior: 50540954!
test01UnusedLineIsBilledBasicFee

	self assert: (TelephoneLine from: 'Buenos Aires' in: 'Argentina') totalDue equals: TelephoneLine basicMonthlyFee.! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:05:02' prior: 50540978!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine from: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:05:10' prior: 50540920!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine from: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:05:18' prior: 50540937!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine from: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:05:24' prior: 50540995!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine from: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:05:30' prior: 50540962!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine from: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneLine class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 20:05:48' prior: 50540914!
from: aCallingRegion in: aCallingCountry  
	^self new initializeFrom: aCallingRegion ! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:06:15' prior: 50541090!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine from: 'Montevideo' in: 'Uruguay'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:06:16'!
ERROR!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 20:06:20'!
internationalFee
	self shouldBeImplemented.! !
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 20:06:37' prior: 50541128!
internationalFee
	^25 * dollar / minute! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:06:39'!
FAILURE!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 20:09:28'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed region nationalTimeUsed country'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 20:09:32'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed region nationalTimeUsed country internationalTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 20:09:26' prior: 50540180!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	(aLineThatWasCalled isFromCountry: country) ifTrue: [
		(aLineThatWasCalled isFrom: region) ifTrue: [
			aDayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
			weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration. ]
			ifFalse: [weekEndTimeUsed := weekEndTimeUsed + aCallDuration].]
		ifFalse: [nationalTimeUsed := nationalTimeUsed + aCallDuration]. ]
	ifFalse: [internationalTimeUsed := nationalTimeUsed + aCallDuration.]
	! !
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 20:09:50' prior: 50540200 overrides: 16932297!
initialize
	weekDayWorkHoursTimeUsed := 0 * minute.
	weekDayNonWorkHoursTimeUsed := 0 * minute.
	weekEndTimeUsed  := 0 * minute.
	nationalTimeUsed := 0 * minute.
	internationalTimeUsed := 0 * minute.
	! !
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/29/2025 20:10:04'!
isFromRegion: aRegion 
	^region = aRegion.! !
!TelephoneLine methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:04' prior: 50541159!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	(aLineThatWasCalled isFromCountry: country) ifTrue: [
		(aLineThatWasCalled isFromRegion: region) ifTrue: [
			aDayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
			weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration. ]
			ifFalse: [weekEndTimeUsed := weekEndTimeUsed + aCallDuration].]
		ifFalse: [nationalTimeUsed := nationalTimeUsed + aCallDuration]. ]
	ifFalse: [internationalTimeUsed := nationalTimeUsed + aCallDuration.]
	! !

!methodRemoval: TelephoneLine #isFrom: stamp: 'AS 3/29/2025 20:10:04'!
isFrom: aRegion 
	^region = aRegion.!
!TelephoneLine class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 20:10:48'!
fromRegion: aCallingRegion in: aCallingCountry  
	^self new initializeFrom: aCallingRegion ! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:48' prior: 50541023!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:48' prior: 50541040!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:48' prior: 50541057!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:48' prior: 50541015!
test01UnusedLineIsBilledBasicFee

	self assert: (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina') totalDue equals: TelephoneLine basicMonthlyFee.! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:48' prior: 50541112!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:48' prior: 50541074!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !

!methodRemoval: TelephoneLine class #from:in: stamp: 'AS 3/29/2025 20:10:48'!
from: aCallingRegion in: aCallingCountry  
	^self new initializeFrom: aCallingRegion !
!TelephoneLine methodsFor: 'instance creation' stamp: 'AS 3/29/2025 20:11:07'!
initializeFromRegion: aCallingRegion 
	region := aCallingRegion.! !
!TelephoneLine class methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:11:07' prior: 50541224!
fromRegion: aCallingRegion in: aCallingCountry  
	^self new initializeFromRegion: aCallingRegion ! !

!methodRemoval: TelephoneLine #initializeFrom: stamp: 'AS 3/29/2025 20:11:07'!
initializeFrom: aCallingRegion 
	region := aCallingRegion.!
!TelephoneLine methodsFor: 'instance creation' stamp: 'AS 3/29/2025 20:11:55'!
initializeFromRegion: aCallingRegion in: aCallingCountry  
	region := aCallingRegion.! !
!TelephoneLine class methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:11:55' prior: 50541336!
fromRegion: aCallingRegion in: aCallingCountry  
	^self new initializeFromRegion: aCallingRegion in: aCallingCountry ! !

!methodRemoval: TelephoneLine #initializeFromRegion: stamp: 'AS 3/29/2025 20:11:55'!
initializeFromRegion: aCallingRegion 
	region := aCallingRegion.!
!TelephoneLine methodsFor: 'instance creation' stamp: 'AS 3/29/2025 20:12:06' prior: 50541346!
initializeFromRegion: aCallingRegion in: aCallingCountry  
	region := aCallingRegion.
	country := aCallingCountry ! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:12:11'!
ERROR!
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/29/2025 20:12:17'!
isFromCountry: aCountry 
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/29/2025 20:12:29' prior: 50541370!
isFromCountry: aCountry 
	^country = aCountry ! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:12:30'!
FAILURE!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 20:12:46' prior: 50540229!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee)
										+ (weekEndTimeUsed * self class weekendHoursFee)
										+ (nationalTimeUsed * self class nationalFee)
										+ (internationalTimeUsed * self class nationalFee).! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:12:47'!
FAILURE!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:12:53'!
FAILURE!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 20:13:09' prior: 50541197!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	(aLineThatWasCalled isFromCountry: country) ifTrue: [
		(aLineThatWasCalled isFromRegion: region) ifTrue: [
			aDayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
			weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration. ]
			ifFalse: [weekEndTimeUsed := weekEndTimeUsed + aCallDuration].]
		ifFalse: [nationalTimeUsed := nationalTimeUsed + aCallDuration]. ]
	ifFalse: [internationalTimeUsed := internationalTimeUsed + aCallDuration.]
	! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:13:11'!
FAILURE!

line1 totalDue!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 20:14:09' prior: 50541380!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee)
										+ (weekEndTimeUsed * self class weekendHoursFee)
										+ (nationalTimeUsed * self class nationalFee)
										+ (internationalTimeUsed * self class internationalFee).! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

----SNAPSHOT----(29 March 2025 20:18:36) CuisUniversity-6350.image priorSource: 6674891!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 20:51:34'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:51:34'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:51:34'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:51:34'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:51:34'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:51:34'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:39:44'!
Object subclass: #Call
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 23:39:39' prior: 50541231!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	"line1 calls: line2 on: Monday at: 8:02 for: callDuration."
	Call from: line1 to: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:39:48'!
ERROR!
!Call class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 23:39:55'!
from: line1 to: line2 on: Monday at: aRenameMe1 for: callDuration 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: line1 to: line2 on: Monday at: aRenameMe1 for: callDuration ! !
!Call class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 23:40:36' prior: 50541462!
from: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	^self new initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration ! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:40:37'!
ERROR!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:40:44'!
Object subclass: #Call
	instanceVariableNames: 'callingLine'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:40:44'!
Object subclass: #Call
	instanceVariableNames: 'callingLine lineThatIsCalled'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:40:44'!
Object subclass: #Call
	instanceVariableNames: 'callingLine lineThatIsCalled dayOfTheWeek'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:40:44'!
Object subclass: #Call
	instanceVariableNames: 'callingLine lineThatIsCalled dayOfTheWeek timeOfDay'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:40:44'!
Object subclass: #Call
	instanceVariableNames: 'callingLine lineThatIsCalled dayOfTheWeek timeOfDay callDuration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Call methodsFor: 'instance creation' stamp: 'AS 3/29/2025 23:40:44'!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	self shouldBeImplemented.
	callingLine := aCallingLine.
	lineThatIsCalled := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.! !
!Call methodsFor: 'instance creation' stamp: 'AS 3/29/2025 23:41:30' prior: 50541522!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	callingLine := aCallingLine.
	lineThatIsCalled := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:41:32'!
FAILURE!
!Call methodsFor: 'instance creation' stamp: 'AS 3/29/2025 23:43:19' prior: 50541534!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	callingLine := aCallingLine.
	lineThatIsCalled := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.
	
! !

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:43:22'!
Object subclass: #Call
	instanceVariableNames: 'caller lineThatIsCalled dayOfTheWeek timeOfDay callDuration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 23:43:22' prior: 50541546!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	caller := aCallingLine.
	lineThatIsCalled := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.
	
! !

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:43:26'!
Object subclass: #Call
	instanceVariableNames: 'caller calee dayOfTheWeek timeOfDay callDuration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 23:43:26' prior: 50541566!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	caller := aCallingLine.
	calee := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.
	
! !

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:43:30'!
Object subclass: #Call
	instanceVariableNames: 'caller callee dayOfTheWeek timeOfDay callDuration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 23:43:30' prior: 50541586!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	caller := aCallingLine.
	callee := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.
	
! !
!Call methodsFor: 'instance creation' stamp: 'AS 3/29/2025 23:44:12' prior: 50541606!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	caller := aCallingLine.
	callee := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:44:12'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:12'!
FAILURE!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:12'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:12'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:12'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:12'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:12'!
FAILURE!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 23:44:32' prior: 50541443!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:45:50'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed region nationalTimeUsed country internationalTimeUsed outgoingCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 23:45:48' prior: 50541394!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	outgoingCalls add: (Call from: self to: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration).

	(aLineThatWasCalled isFromCountry: country) ifTrue: [
		(aLineThatWasCalled isFromRegion: region) ifTrue: [
			aDayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
			weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration. ]
			ifFalse: [weekEndTimeUsed := weekEndTimeUsed + aCallDuration].]
		ifFalse: [nationalTimeUsed := nationalTimeUsed + aCallDuration]. ]
	ifFalse: [internationalTimeUsed := internationalTimeUsed + aCallDuration.]
	! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 23:47:25' prior: 50540209!
todo
	'- refactor isWorkableTime
	- tiempos de los tests en funcion de work hours definidas en telephoneline o algun lado (en vez de 8:00, workHourStart + 1 minute)
	- renombrar colabs de line agregandoles local
	- mejorar la rep del dia en que se llama (que sea una fecha completa y pueda elegir si es weekday o weekend)'! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:47:59'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:47:59'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:47:59'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:47:59'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:47:59'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:47:59'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:48:02'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:02'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:02'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:02'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:02'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:02'!
ERROR!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 23:48:15' prior: 50541183 overrides: 16932297!
initialize
	weekDayWorkHoursTimeUsed := 0 * minute.
	weekDayNonWorkHoursTimeUsed := 0 * minute.
	weekEndTimeUsed  := 0 * minute.
	nationalTimeUsed := 0 * minute.
	internationalTimeUsed := 0 * minute.
	outgoingCalls  := OrderedCollection new
	! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:48:16'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:16'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:16'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:16'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:16'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:16'!
PASSED!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 23:51:53' prior: 50541418!
totalDue
	^outgoingCalls sum: [ :aCall | aCall price].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:51:58'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:52:31'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:31'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:31'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:31'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:31'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:31'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:52:32'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:58'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:58'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 23:53:16' prior: 50541711!
totalDue
	^outgoingCalls sum: [ :aCall | aCall price] ifEmpty: [^0*dollar].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:53:18'!
FAILURE!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:18'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:18'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:18'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:18'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:18'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:53:20'!
FAILURE!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 23:53:48' prior: 50541716!
totalDue
	^outgoingCalls sum: [ :aCall | aCall price] ifEmpty: [^TelephoneLine basicMonthlyFee ].! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 23:53:55' prior: 50541722!
totalDue
	^outgoingCalls sum: [ :aCall | aCall price] ifEmpty: [^TelephoneLine basicMonthlyFee].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:53:56'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:56'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:56'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:56'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:56'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:56'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:58'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 23:56:11' prior: 50541728!
totalDue
	^outgoingCalls sum: [ :aCall | aCall cost] ifEmpty: [^TelephoneLine basicMonthlyFee].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:56:13'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:56:13'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:56:13'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:56:13'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:56:13'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:56:13'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:56:14'!
ERROR!
!Call methodsFor: 'billing' stamp: 'AS 3/29/2025 23:56:24'!
cost
	self shouldBeImplemented.! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:43:31' prior: 50541739!
cost
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [callDuration * TelephoneLine internationalFee ]! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:43:35'!
ERROR!
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/30/2025 00:43:40'!
isFromSameCountryAs: caller1 
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/30/2025 00:43:50' prior: 50541761!
isFromSameCountryAs: aTelephoneLine 
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/30/2025 00:44:09' prior: 50541766!
isFromSameCountryAs: aTelephoneLine 
	country = aTelephoneLine country.! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:11'!
ERROR!
!TelephoneLine methodsFor: 'country' stamp: 'AS 3/30/2025 00:44:39'!
country
	self shouldBeImplemented.
	^country! !
!TelephoneLine methodsFor: 'country' stamp: 'AS 3/30/2025 00:44:43' prior: 50541776!
country
	^country! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:44'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:44:55'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:55'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:55'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:55'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:55'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:55'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:57'!
ERROR!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:45:21' prior: 50541743!
cost
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ]! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:45:24'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:24'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:24'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:24'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:24'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:24'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:45:27'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:27'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:27'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:27'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:27'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:27'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:29'!
ERROR!
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/30/2025 00:47:17' prior: 50541771!
isFromSameCountryAs: aTelephoneLine 
	^country = aTelephoneLine country.! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:47:18'!
ERROR!
!TelephoneLine methodsFor: 'region' stamp: 'AS 3/30/2025 00:47:27'!
isFromSameRegionAs: caller1 
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'region' stamp: 'AS 3/30/2025 00:47:35' prior: 50541809!
isFromSameRegionAs: aTelephoneLine 
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'region' stamp: 'AS 3/30/2025 00:47:49' prior: 50541814!
isFromSameRegionAs: aTelephoneLine 
	^region = aTelephoneLine region! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:47:50'!
ERROR!
!TelephoneLine methodsFor: 'region' stamp: 'AS 3/30/2025 00:47:56'!
region
	self shouldBeImplemented.
	^region! !
!TelephoneLine methodsFor: 'region' stamp: 'AS 3/30/2025 00:47:59' prior: 50541824!
region
	^region! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:48:00'!
FAILURE!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:48:42' prior: 50541785!
cost
	| cost |
	cost := TelephoneLine basicMonthlyFee.
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ]! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:49:16' prior: 50541832!
cost
	| cost |
	cost := TelephoneLine basicMonthlyFee.
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [cost := cost + callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [cost := cost + callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [cost := cost + callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [cost := cost + callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [cost := cost + callDuration * TelephoneLine internationalFee ]
	
	^cost! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:49:21'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:21'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:21'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:21'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:21'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:21'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:22'!
ERROR!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:49:37' prior: 50541852!
cost
	| cost |
	cost := TelephoneLine basicMonthlyFee.
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [cost := cost + callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [cost := cost + callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [cost := cost + callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [cost := cost + callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [cost := cost + callDuration * TelephoneLine internationalFee ].
	
	^cost! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:49:40'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:40'!
FAILURE!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:40'!
FAILURE!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:40'!
FAILURE!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:40'!
FAILURE!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:40'!
FAILURE!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:42'!
FAILURE!

callDuration!

TelephoneLine weekDayWorkHoursFee!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:52:22' prior: 50541875!
cost
	| cost |
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [cost := callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [cost := callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [cost := callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [cost := callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [cost := callDuration * TelephoneLine internationalFee ].
	
	^cost + TelephoneLine basicMonthlyFee ! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:52:38' prior: 50541899!
cost
	| cost |
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [cost := callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [cost := callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [cost := callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [cost := callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [cost := callDuration * TelephoneLine internationalFee ].
	
	^cost! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:52:47'!
FAILURE!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 00:53:49' prior: 50541734!
totalDue
	^(outgoingCalls sum: [ :aCall | aCall cost] ifEmpty: [^0*dollar]) + TelephoneLine basicMonthlyFee .! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 00:53:52' prior: 50541941!
totalDue
	^(outgoingCalls sum: [ :aCall | aCall cost] ifEmpty: [^0*dollar]) + TelephoneLine basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:53:55'!
FAILURE!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:53:55'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:53:55'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:53:55'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:53:55'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:53:55'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:53:55'!
FAILURE!

(TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina') totalDue!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 00:54:42' prior: 50541948!
totalDue
	^(outgoingCalls sum: [ :aCall | aCall cost] ifEmpty: [0*dollar]) + TelephoneLine basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:54:43'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:54:43'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:54:43'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:54:43'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:54:43'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:54:43'!
PASSED!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/30/2025 00:55:04' prior: 50541658!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	outgoingCalls add: (Call from: self to: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration).! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:55:04'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:04'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:04'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:04'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:04'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:04'!
PASSED!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/30/2025 00:55:25' prior: 50541700 overrides: 16932297!
initialize
	outgoingCalls  := OrderedCollection new
	! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:55:25'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:25'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:25'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:25'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:25'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:25'!
PASSED!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 00:55:29'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayNonWorkHoursTimeUsed weekEndTimeUsed region nationalTimeUsed country internationalTimeUsed outgoingCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 00:55:30'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekEndTimeUsed region nationalTimeUsed country internationalTimeUsed outgoingCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 00:55:30'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'region nationalTimeUsed country internationalTimeUsed outgoingCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 00:55:30'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'region country internationalTimeUsed outgoingCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 00:55:30'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'region country outgoingCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

----SNAPSHOT----(30 March 2025 00:55:51) CuisUniversity-6350.image priorSource: 6713005!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:03:04' prior: 50541920!
cost
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ].
	
	'((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]) ifTrue: [
		dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [cost := callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [cost := callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]'
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:03:06'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:03:06'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:03:06'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:03:06'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:03:06'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:03:06'!
PASSED!

!methodRemoval: TelephoneLine #isFromRegion: stamp: 'AS 3/30/2025 01:05:18'!
isFromRegion: aRegion 
	^region = aRegion.!

!methodRemoval: TelephoneLine #isFromCountry: stamp: 'AS 3/30/2025 01:05:20'!
isFromCountry: aCountry 
	^country = aCountry !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:06:29' prior: 50542029!
cost
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ].
	
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]) ifTrue: [
		dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]].
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:06:34' prior: 50542066!
cost
	"(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ]."
	
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]) ifTrue: [
		dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]].
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:06:37'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:06:37'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:06:37'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:06:37'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:06:37'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:06:37'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:06:37'!
ERROR!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:08:00' prior: 50542102!
cost
	"(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ]."
	
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]) 
				ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]].
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:08:08'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:12'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:08:17'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:17'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:17'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:17'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:17'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:17'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:17'!
ERROR!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:12:31' prior: 50542138!
cost
	"(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ]."
	
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]) 
				ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:12:34'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:12:34'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:12:34'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:12:34'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:12:34'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:12:34'!
PASSED!

----SNAPSHOT----(30 March 2025 01:12:59) CuisUniversity-6350.image priorSource: 6732007!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:13:04' prior: 50542174!
cost
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]) 
				ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:13:13'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:13'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:13'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:13'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:13'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:13'!
PASSED!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:13:35'!
isLocal

	^ (callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:13:35' prior: 50542215!
cost
	(self isLocal) 
				ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:13:41' prior: 50542243!
cost
	(self isLocal) ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:13:43'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:43'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:43'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:43'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:43'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:43'!
PASSED!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:14:07' prior: 50542264!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:14:11'!
PASSED!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:14:22'!
isNational

	^ (callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:14:22' prior: 50542284!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	(self isNational) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:14:28' prior: 50542310!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:14:38'!
isInternational

	^ (callee isFromSameCountryAs: caller) not! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:14:38' prior: 50542328!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^callDuration * TelephoneLine nationalFee].
	self isInternational ifTrue: [^callDuration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:15:38'!
isWorkingHours

	^ (8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:15:38' prior: 50542351!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			(self isWorkingHours) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^callDuration * TelephoneLine nationalFee].
	self isInternational ifTrue: [^callDuration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:15:59'!
isDuringWorkingHours

	^ (8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]! !
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:15:59' prior: 50542373!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			(self isDuringWorkingHours) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^callDuration * TelephoneLine nationalFee].
	self isInternational ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!methodRemoval: Call #isWorkingHours stamp: 'AS 3/30/2025 01:15:59'!
isWorkingHours

	^ (8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:16:03'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:03'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:03'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:03'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:03'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:03'!
PASSED!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:16:23' prior: 50542395!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [self isDuringWorkingHours ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^callDuration * TelephoneLine nationalFee].
	self isInternational ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:16:25'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:25'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:25'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:25'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:25'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:25'!
PASSED!

!classDefinition: #CallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:26:52'!
Object subclass: #CallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 01:26:48' prior: 50541957!
totalDue
	^(outgoingCalls sum: [ :aCall | (CallBiller for: aCall) cost] ifEmpty: [0*dollar]) + TelephoneLine basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:26:55'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:26:57'!
ERROR!
!CallBiller class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:27:01'!
for: aCall 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCall ! !
!CallBiller class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:27:12' prior: 50542447!
for: aCallToBill
	^self new initializeFor: aCallToBill! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:27:13'!
ERROR!

!classDefinition: #CallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:27:19'!
Object subclass: #CallBiller
	instanceVariableNames: 'callToBill'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!CallBiller methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:27:19'!
initializeFor: aCallToBill 
	self shouldBeImplemented.
	callToBill := aCallToBill.! !
!CallBiller methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:27:26' prior: 50542467!
initializeFor: aCallToBill 
	callToBill := aCallToBill.! !

!classDefinition: #CallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:27:30'!
Object subclass: #CallBiller
	instanceVariableNames: 'call'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!CallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:27:30' prior: 50542473!
initializeFor: aCallToBill 
	call := aCallToBill.! !

!methodRemoval: CallBiller #initializeFor: stamp: 'AS 3/30/2025 01:27:54'!
initializeFor: aCallToBill 
	call := aCallToBill.!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:27:57'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:27:57'!
ERROR!

!classDefinition: #LocalCallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:32:14'!
CallBiller subclass: #LocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #NationalCallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:33:25'!
CallBiller subclass: #NationalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #InternationalCallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:33:33'!
CallBiller subclass: #InternationalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!CallBiller class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:33:19' prior: 50542455!
for: aCallToBill
	(aCallToBill isLocal) ifTrue:[^LocalCallBiller new initializeFor: aCallToBill].
	(aCallToBill isNational) ifTrue:[^NationalCallBiller new initializeFor: aCallToBill].
	(aCallToBill isInternational) ifTrue:[^InternationalCallBiller new initializeFor: aCallToBill].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:33:39'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:39'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:39'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:39'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:39'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:39'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:41'!
ERROR!

!classDefinition: #CallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:33:50'!
Object subclass: #CallBiller
	instanceVariableNames: 'call callToBill'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!CallBiller methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:33:50'!
initializeFor: aCallToBill 
	self shouldBeImplemented.
	callToBill := aCallToBill.! !
!CallBiller methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:33:57' prior: 50542538!
initializeFor: aCallToBill 
	call := aCallToBill.! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:58'!
ERROR!
!CallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:34:11'!
cost
	self shouldBeImplemented.! !
!CallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:34:16' prior: 50542548!
cost
	self subclassResponsibility ! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:34:17'!
ERROR!
!LocalCallBiller methodsFor: 'nil' stamp: 'AS 3/30/2025 01:38:50' overrides: 50542552!
cost
	call isOnAWeekDay ifTrue: [
		call isDuringWorkingHours ifTrue: [^call duration * TelephoneLine weekDayWorkHoursFee]
								 ifFalse: [^call duration * TelephoneLine  weekDayNonWorkHoursFee]]
					    ifFalse: [^call duration * TelephoneLine weekendHoursFee].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:38:56'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:38:56'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:38:56'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:38:56'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:38:56'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:38:56'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:38:57'!
ERROR!
!Call methodsFor: 'querying' stamp: 'AS 3/30/2025 01:39:05'!
isOnAWeekDay
	self shouldBeImplemented.! !
!Call methodsFor: 'querying' stamp: 'AS 3/30/2025 01:39:17' prior: 50542567!
isOnAWeekDay
	^dayOfTheWeek isWeekDay! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:19'!
ERROR!
!Call methodsFor: 'duration' stamp: 'AS 3/30/2025 01:39:25'!
duration
	self shouldBeImplemented.! !
!Call methodsFor: 'duration' stamp: 'AS 3/30/2025 01:39:34' prior: 50542575!
duration
	^callDuration ! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:37'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:38'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:39'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:40'!
ERROR!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:39:50'!
Object subclass: #Call
	instanceVariableNames: 'caller callee dayOfTheWeek timeOfDay duration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:39:50' prior: 50542416!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [self isDuringWorkingHours ifTrue: [^duration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^duration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^duration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^duration * TelephoneLine nationalFee].
	self isInternational ifTrue: [^duration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:39:50' prior: 50541617!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	caller := aCallingLine.
	callee := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	duration := aCallDuration.! !
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:39:50' prior: 50542579!
duration
	^duration ! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:39:53'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:53'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:53'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:53'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:53'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:53'!
ERROR!
!InternationalCallBiller methodsFor: 'nil' stamp: 'AS 3/30/2025 01:40:30' overrides: 50542552!
cost
	^call duration * TelephoneLine nationalFee! !
!InternationalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:40:46' prior: 50542622 overrides: 50542552!
cost
	^call duration * TelephoneLine internationalFee! !
!NationalCallBiller methodsFor: 'nil' stamp: 'AS 3/30/2025 01:40:51' overrides: 50542552!
cost
	^call duration * TelephoneLine nationalFee! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:40:54'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:40:54'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:40:54'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:40:54'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:40:54'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:40:54'!
PASSED!

!methodRemoval: Call #cost stamp: 'AS 3/30/2025 01:42:33'!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [self isDuringWorkingHours ifTrue: [^duration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^duration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^duration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^duration * TelephoneLine nationalFee].
	self isInternational ifTrue: [^duration * TelephoneLine internationalFee].
!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:42:35'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:42:35'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:42:35'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:42:35'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:42:35'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:42:35'!
PASSED!

----SNAPSHOT----(30 March 2025 01:44:07) CuisUniversity-6350.image priorSource: 6737968!
!Behavior method!
region
	#_coverageTracker31686340_ markAsExecuted.
	^ #_coverageTracker31686340_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: region.! !
!Behavior method!
for: aCallToBill
	#_coverageTracker31686350_ markAsExecuted.
	[ | receiver4 |
	receiver4 := [ | receiver1 |
	receiver1 := #_coverageTracker31686350_
		cover: (20 to: 30)
		declaredAt: (6 to: 16)
		by: aCallToBill.
	#_coverageTracker31686350_
		coverAll:
			{32 to: 38}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker31686350_
		coverAll:
			{41 to: 47}
		evaluating: [ receiver4 ifTrue: [ ^ [ | receiver3 |
				receiver3 := [ | receiver2 |
				receiver2 := #_coverageTracker31686350_
					coverAll:
						{50 to: 64}
					by: LocalCallBiller.
				#_coverageTracker31686350_
					coverAll:
						{66 to: 68}
					evaluating: [ receiver2 new ]
					thatSends: #new
					to: receiver2 ] value.
				#_coverageTracker31686350_
					coverAll:
						{70 to: 83}
					evaluating: [
						receiver3 initializeFor:
							(#_coverageTracker31686350_
								cover: (85 to: 95)
								declaredAt: (6 to: 16)
								by: aCallToBill) ]
					thatSends: #initializeFor:
					to: receiver3 ] value ]]
		thatSends: #ifTrue:
		to: receiver4 ] value.
	[ | receiver8 |
	receiver8 := [ | receiver5 |
	receiver5 := #_coverageTracker31686350_
		cover: (101 to: 111)
		declaredAt: (6 to: 16)
		by: aCallToBill.
	#_coverageTracker31686350_
		coverAll:
			{113 to: 122}
		evaluating: [ receiver5 isNational ]
		thatSends: #isNational
		to: receiver5 ] value.
	#_coverageTracker31686350_
		coverAll:
			{125 to: 131}
		evaluating: [ receiver8 ifTrue: [ ^ [ | receiver7 |
				receiver7 := [ | receiver6 |
				receiver6 := #_coverageTracker31686350_
					coverAll:
						{134 to: 151}
					by: NationalCallBiller.
				#_coverageTracker31686350_
					coverAll:
						{153 to: 155}
					evaluating: [ receiver6 new ]
					thatSends: #new
					to: receiver6 ] value.
				#_coverageTracker31686350_
					coverAll:
						{157 to: 170}
					evaluating: [
						receiver7 initializeFor:
							(#_coverageTracker31686350_
								cover: (172 to: 182)
								declaredAt: (6 to: 16)
								by: aCallToBill) ]
					thatSends: #initializeFor:
					to: receiver7 ] value ]]
		thatSends: #ifTrue:
		to: receiver8 ] value.
	[ | receiver12 |
	receiver12 := [ | receiver9 |
	receiver9 := #_coverageTracker31686350_
		cover: (188 to: 198)
		declaredAt: (6 to: 16)
		by: aCallToBill.
	#_coverageTracker31686350_
		coverAll:
			{200 to: 214}
		evaluating: [ receiver9 isInternational ]
		thatSends: #isInternational
		to: receiver9 ] value.
	#_coverageTracker31686350_
		coverAll:
			{217 to: 223}
		evaluating: [ receiver12 ifTrue: [ ^ [ | receiver11 |
				receiver11 := [ | receiver10 |
				receiver10 := #_coverageTracker31686350_
					coverAll:
						{226 to: 248}
					by: InternationalCallBiller.
				#_coverageTracker31686350_
					coverAll:
						{250 to: 252}
					evaluating: [ receiver10 new ]
					thatSends: #new
					to: receiver10 ] value.
				#_coverageTracker31686350_
					coverAll:
						{254 to: 267}
					evaluating: [
						receiver11 initializeFor:
							(#_coverageTracker31686350_
								cover: (269 to: 279)
								declaredAt: (6 to: 16)
								by: aCallToBill) ]
					thatSends: #initializeFor:
					to: receiver11 ] value ]]
		thatSends: #ifTrue:
		to: receiver12 ] value.! !
!Behavior method!
from: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	#_coverageTracker31686371_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686371_
		coverAll:
			{96 to: 99}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker31686371_
		coverAll:
			{101 to: 103}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker31686371_
		coverAll:
			{105 to: 119. 134 to: 136. 156 to: 158. 174 to: 176. 189 to: 192}
		evaluating: [
			receiver2
				initializeFrom:
					(#_coverageTracker31686371_
						cover: (121 to: 132)
						declaredAt: (7 to: 18)
						by: aCallingLine)
				to:
					(#_coverageTracker31686371_
						cover: (138 to: 154)
						declaredAt: (24 to: 40)
						by: aLineThatIsCalled)
				on:
					(#_coverageTracker31686371_
						cover: (160 to: 172)
						declaredAt: (46 to: 58)
						by: aDayOfTheWeek)
				at:
					(#_coverageTracker31686371_
						cover: (178 to: 187)
						declaredAt: (64 to: 73)
						by: aTimeOfDay)
				for:
					(#_coverageTracker31686371_
						cover: (194 to: 206)
						declaredAt: (80 to: 92)
						by: aCallDuration) ]
		thatSends: #initializeFrom:to:on:at:for:
		to: receiver2 ] value.! !
!Behavior method!
isFromSameCountryAs: aTelephoneLine
	#_coverageTracker31686379_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker31686379_
		cover: (40 to: 46)
		declaredAt: (40 to: 46)
		by: country.
	#_coverageTracker31686379_
		coverAll:
			{48 to: 48}
		evaluating: [
			receiver2 =
				[ | receiver1 |
				receiver1 := #_coverageTracker31686379_
					cover: (50 to: 63)
					declaredAt: (22 to: 35)
					by: aTelephoneLine.
				#_coverageTracker31686379_
					coverAll:
						{65 to: 71}
					evaluating: [ receiver1 country ]
					thatSends: #country
					to: receiver1 ] value ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker31686383_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker31686383_
		coverAll:
			{19 to: 20}
		byLiteralOrPseudoVariable: 10.
	#_coverageTracker31686383_
		coverAll:
			{22 to: 22}
		evaluating: [
			receiver1 *
				(#_coverageTracker31686383_
					coverAll:
						{24 to: 29}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.! !
!Behavior method!
duration
	#_coverageTracker31686385_ markAsExecuted.
	^ #_coverageTracker31686385_
		cover: (12 to: 19)
		declaredAt: (12 to: 19)
		by: duration.! !
!Behavior method!
isNational
	#_coverageTracker31686387_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 := [ | receiver1 |
	receiver1 := #_coverageTracker31686387_
		cover: (17 to: 22)
		declaredAt: (17 to: 22)
		by: callee.
	#_coverageTracker31686387_
		coverAll:
			{24 to: 43}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker31686387_
					cover: (45 to: 50)
					declaredAt: (45 to: 50)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker31686387_
		coverAll:
			{53 to: 56}
		evaluating: [
			receiver4 and: [
				[ | receiver3 |
				receiver3 := [ | receiver2 |
				receiver2 := #_coverageTracker31686387_
					cover: (60 to: 65)
					declaredAt: (17 to: 22)
					by: callee.
				#_coverageTracker31686387_
					coverAll:
						{67 to: 85}
					evaluating: [
						receiver2 isFromSameRegionAs:
							(#_coverageTracker31686387_
								cover: (87 to: 92)
								declaredAt: (45 to: 50)
								by: caller) ]
					thatSends: #isFromSameRegionAs:
					to: receiver2 ] value.
				#_coverageTracker31686387_
					coverAll:
						{95 to: 97}
					evaluating: [ receiver3 not ]
					thatSends: #not
					to: receiver3 ] value ]]
		thatSends: #and:
		to: receiver4 ] value.! !
!Behavior method!
isFromSameRegionAs: aTelephoneLine
	#_coverageTracker31686391_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker31686391_
		cover: (39 to: 44)
		declaredAt: (39 to: 44)
		by: region.
	#_coverageTracker31686391_
		coverAll:
			{46 to: 46}
		evaluating: [
			receiver2 =
				[ | receiver1 |
				receiver1 := #_coverageTracker31686391_
					cover: (48 to: 61)
					declaredAt: (21 to: 34)
					by: aTelephoneLine.
				#_coverageTracker31686391_
					coverAll:
						{63 to: 68}
					evaluating: [ receiver1 region ]
					thatSends: #region
					to: receiver1 ] value ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
initializeFromRegion: aCallingRegion in: aCallingCountry
	#_coverageTracker31686396_ markAsExecuted.
	#_coverageTracker31686396_
		cover: (61 to: 66)
		declaredAt: (61 to: 66)
		by:
			(region := #_coverageTracker31686396_
				cover: (71 to: 84)
				declaredAt: (23 to: 36)
				by: aCallingRegion).
	#_coverageTracker31686396_
		cover: (88 to: 94)
		declaredAt: (88 to: 94)
		by:
			(country := #_coverageTracker31686396_
				cover: (99 to: 113)
				declaredAt: (42 to: 56)
				by: aCallingCountry).! !
!Behavior method!
nationalFee
	#_coverageTracker31686400_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686400_
		coverAll:
			{15 to: 16}
		byLiteralOrPseudoVariable: 14.
	#_coverageTracker31686400_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver1 *
				(#_coverageTracker31686400_
					coverAll:
						{20 to: 25}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker31686400_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver2 /
				(#_coverageTracker31686400_
					coverAll:
						{29 to: 34}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
cost
	#_coverageTracker31686404_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker31686404_
		cover: (8 to: 11)
		declaredAt: (8 to: 11)
		by: call.
	#_coverageTracker31686404_
		coverAll:
			{13 to: 20}
		evaluating: [ receiver1 duration ]
		thatSends: #duration
		to: receiver1 ] value.
	#_coverageTracker31686404_
		coverAll:
			{22 to: 22}
		evaluating: [
			receiver3 *
				[ | receiver2 |
				receiver2 := #_coverageTracker31686404_
					coverAll:
						{24 to: 36}
					by: TelephoneLine.
				#_coverageTracker31686404_
					coverAll:
						{38 to: 53}
					evaluating: [ receiver2 internationalFee ]
					thatSends: #internationalFee
					to: receiver2 ] value ]
		thatSends: #*
		to: receiver3 ] value.! !
!Behavior method!
internationalFee
	#_coverageTracker31686408_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686408_
		coverAll:
			{20 to: 21}
		byLiteralOrPseudoVariable: 25.
	#_coverageTracker31686408_
		coverAll:
			{23 to: 23}
		evaluating: [
			receiver1 *
				(#_coverageTracker31686408_
					coverAll:
						{25 to: 30}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker31686408_
		coverAll:
			{32 to: 32}
		evaluating: [
			receiver2 /
				(#_coverageTracker31686408_
					coverAll:
						{34 to: 39}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
fromRegion: aCallingRegion in: aCallingCountry
	#_coverageTracker31686414_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686414_
		coverAll:
			{52 to: 55}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker31686414_
		coverAll:
			{57 to: 59}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker31686414_
		coverAll:
			{61 to: 81. 98 to: 100}
		evaluating: [
			receiver2
				initializeFromRegion:
					(#_coverageTracker31686414_
						cover: (83 to: 96)
						declaredAt: (13 to: 26)
						by: aCallingRegion)
				in:
					(#_coverageTracker31686414_
						cover: (102 to: 116)
						declaredAt: (32 to: 46)
						by: aCallingCountry) ]
		thatSends: #initializeFromRegion:in:
		to: receiver2 ] value.! !
!Behavior method!
weekendHoursFee
	#_coverageTracker31686418_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686418_
		coverAll:
			{19 to: 22}
		byLiteralOrPseudoVariable: 0.12.
	#_coverageTracker31686418_
		coverAll:
			{24 to: 24}
		evaluating: [
			receiver1 *
				(#_coverageTracker31686418_
					coverAll:
						{26 to: 31}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker31686418_
		coverAll:
			{33 to: 33}
		evaluating: [
			receiver2 /
				(#_coverageTracker31686418_
					coverAll:
						{35 to: 40}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
country
	#_coverageTracker31686422_ markAsExecuted.
	^ #_coverageTracker31686422_
		cover: (11 to: 17)
		declaredAt: (11 to: 17)
		by: country.! !
!Behavior method!
weekDayNonWorkHoursFee
	#_coverageTracker31686424_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686424_
		coverAll:
			{26 to: 28}
		byLiteralOrPseudoVariable: 0.1.
	#_coverageTracker31686424_
		coverAll:
			{30 to: 30}
		evaluating: [
			receiver1 *
				(#_coverageTracker31686424_
					coverAll:
						{32 to: 37}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker31686424_
		coverAll:
			{39 to: 39}
		evaluating: [
			receiver2 /
				(#_coverageTracker31686424_
					coverAll:
						{41 to: 46}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	#_coverageTracker31686429_ markAsExecuted.
	[ | receiver2 |
	receiver2 := #_coverageTracker31686429_
		cover: (80 to: 92)
		declaredAt: (80 to: 92)
		by: outgoingCalls.
	#_coverageTracker31686429_
		coverAll:
			{94 to: 97}
		evaluating: [
			receiver2 add:
				[ | receiver1 |
				receiver1 := #_coverageTracker31686429_
					coverAll:
						{100 to: 103}
					by: Call.
				#_coverageTracker31686429_
					coverAll:
						{105 to: 109. 116 to: 118. 139 to: 141. 157 to: 159. 172 to: 175}
					evaluating: [
						receiver1
							from:
								(#_coverageTracker31686429_
									coverAll:
										{111 to: 114}
									byLiteralOrPseudoVariable: self)
							to:
								(#_coverageTracker31686429_
									cover: (120 to: 137)
									declaredAt: (8 to: 25)
									by: aLineThatWasCalled)
							on:
								(#_coverageTracker31686429_
									cover: (143 to: 155)
									declaredAt: (31 to: 43)
									by: aDayOfTheWeek)
							at:
								(#_coverageTracker31686429_
									cover: (161 to: 170)
									declaredAt: (49 to: 58)
									by: aTimeOfDay)
							for:
								(#_coverageTracker31686429_
									cover: (177 to: 189)
									declaredAt: (65 to: 77)
									by: aCallDuration) ]
					thatSends: #from:to:on:at:for:
					to: receiver1 ] value ]
		thatSends: #add:
		to: receiver2 ] value.! !
!Behavior method!
initializeFor: aCallToBill
	#_coverageTracker31686435_ markAsExecuted.
	#_coverageTracker31686435_
		cover: (30 to: 33)
		declaredAt: (30 to: 33)
		by:
			(call := #_coverageTracker31686435_
				cover: (38 to: 48)
				declaredAt: (16 to: 26)
				by: aCallToBill).! !
!Behavior method!
weekDayWorkHoursFee
	#_coverageTracker31686437_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686437_
		coverAll:
			{23 to: 25}
		byLiteralOrPseudoVariable: 0.2.
	#_coverageTracker31686437_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver1 *
				(#_coverageTracker31686437_
					coverAll:
						{29 to: 34}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker31686437_
		coverAll:
			{36 to: 36}
		evaluating: [
			receiver2 /
				(#_coverageTracker31686437_
					coverAll:
						{38 to: 43}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
isInternational
	#_coverageTracker31686441_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686441_
		cover: (22 to: 27)
		declaredAt: (22 to: 27)
		by: callee.
	#_coverageTracker31686441_
		coverAll:
			{29 to: 48}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker31686441_
					cover: (50 to: 55)
					declaredAt: (50 to: 55)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker31686441_
		coverAll:
			{58 to: 60}
		evaluating: [ receiver2 not ]
		thatSends: #not
		to: receiver2 ] value.! !
!Behavior method!
initialize
	#_coverageTracker31686443_ markAsExecuted.
	#_coverageTracker31686443_
		cover: (13 to: 25)
		declaredAt: (13 to: 25)
		by:
			(outgoingCalls := [ | receiver1 |
			receiver1 := #_coverageTracker31686443_
				coverAll:
					{31 to: 47}
				by: OrderedCollection.
			#_coverageTracker31686443_
				coverAll:
					{49 to: 51}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
isLocal
	#_coverageTracker31686445_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker31686445_
		cover: (14 to: 19)
		declaredAt: (14 to: 19)
		by: callee.
	#_coverageTracker31686445_
		coverAll:
			{21 to: 40}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker31686445_
					cover: (42 to: 47)
					declaredAt: (42 to: 47)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker31686445_
		coverAll:
			{50 to: 53}
		evaluating: [
			receiver3 and: [
				[ | receiver2 |
				receiver2 := #_coverageTracker31686445_
					cover: (57 to: 62)
					declaredAt: (14 to: 19)
					by: callee.
				#_coverageTracker31686445_
					coverAll:
						{64 to: 82}
					evaluating: [
						receiver2 isFromSameRegionAs:
							(#_coverageTracker31686445_
								cover: (84 to: 89)
								declaredAt: (42 to: 47)
								by: caller) ]
					thatSends: #isFromSameRegionAs:
					to: receiver2 ] value ]]
		thatSends: #and:
		to: receiver3 ] value.! !
!Behavior method!
cost
	#_coverageTracker31686451_ markAsExecuted.
	[ | receiver13 |
	receiver13 := [ | receiver1 |
	receiver1 := #_coverageTracker31686451_
		cover: (7 to: 10)
		declaredAt: (7 to: 10)
		by: call.
	#_coverageTracker31686451_
		coverAll:
			{12 to: 23}
		evaluating: [ receiver1 isOnAWeekDay ]
		thatSends: #isOnAWeekDay
		to: receiver1 ] value.
	#_coverageTracker31686451_
		coverAll:
			{25 to: 31. 209 to: 216}
		evaluating: [
			receiver13
				ifTrue: [
					[ | receiver9 |
					receiver9 := [ | receiver2 |
					receiver2 := #_coverageTracker31686451_
						cover: (37 to: 40)
						declaredAt: (7 to: 10)
						by: call.
					#_coverageTracker31686451_
						coverAll:
							{42 to: 61}
						evaluating: [ receiver2 isDuringWorkingHours ]
						thatSends: #isDuringWorkingHours
						to: receiver2 ] value.
					#_coverageTracker31686451_
						coverAll:
							{63 to: 69. 133 to: 140}
						evaluating: [
							receiver9
								ifTrue: [ ^ [ | receiver5 |
									receiver5 := [ | receiver3 |
									receiver3 := #_coverageTracker31686451_
										cover: (73 to: 76)
										declaredAt: (7 to: 10)
										by: call.
									#_coverageTracker31686451_
										coverAll:
											{78 to: 85}
										evaluating: [ receiver3 duration ]
										thatSends: #duration
										to: receiver3 ] value.
									#_coverageTracker31686451_
										coverAll:
											{87 to: 87}
										evaluating: [
											receiver5 *
												[ | receiver4 |
												receiver4 := #_coverageTracker31686451_
													coverAll:
														{89 to: 101}
													by: TelephoneLine.
												#_coverageTracker31686451_
													coverAll:
														{103 to: 121}
													evaluating: [ receiver4 weekDayWorkHoursFee ]
													thatSends: #weekDayWorkHoursFee
													to: receiver4 ] value ]
										thatSends: #*
										to: receiver5 ] value ]
								ifFalse: [ ^ [ | receiver8 |
									receiver8 := [ | receiver6 |
									receiver6 := #_coverageTracker31686451_
										cover: (144 to: 147)
										declaredAt: (7 to: 10)
										by: call.
									#_coverageTracker31686451_
										coverAll:
											{149 to: 156}
										evaluating: [ receiver6 duration ]
										thatSends: #duration
										to: receiver6 ] value.
									#_coverageTracker31686451_
										coverAll:
											{158 to: 158}
										evaluating: [
											receiver8 *
												[ | receiver7 |
												receiver7 := #_coverageTracker31686451_
													coverAll:
														{160 to: 172}
													by: TelephoneLine.
												#_coverageTracker31686451_
													coverAll:
														{175 to: 196}
													evaluating: [ receiver7 weekDayNonWorkHoursFee ]
													thatSends: #weekDayNonWorkHoursFee
													to: receiver7 ] value ]
										thatSends: #*
										to: receiver8 ] value ]]
						thatSends: #ifTrue:ifFalse:
						to: receiver9 ] value ]
				ifFalse: [ ^ [ | receiver12 |
					receiver12 := [ | receiver10 |
					receiver10 := #_coverageTracker31686451_
						cover: (220 to: 223)
						declaredAt: (7 to: 10)
						by: call.
					#_coverageTracker31686451_
						coverAll:
							{225 to: 232}
						evaluating: [ receiver10 duration ]
						thatSends: #duration
						to: receiver10 ] value.
					#_coverageTracker31686451_
						coverAll:
							{234 to: 234}
						evaluating: [
							receiver12 *
								[ | receiver11 |
								receiver11 := #_coverageTracker31686451_
									coverAll:
										{236 to: 248}
									by: TelephoneLine.
								#_coverageTracker31686451_
									coverAll:
										{250 to: 264}
									evaluating: [ receiver11 weekendHoursFee ]
									thatSends: #weekendHoursFee
									to: receiver11 ] value ]
						thatSends: #*
						to: receiver12 ] value ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver13 ] value.! !
!Behavior method!
totalDue
	#_coverageTracker31686468_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 := [ | receiver4 |
	receiver4 := #_coverageTracker31686468_
		cover: (13 to: 25)
		declaredAt: (13 to: 25)
		by: outgoingCalls.
	#_coverageTracker31686468_
		coverAll:
			{27 to: 30. 73 to: 80}
		evaluating: [
			receiver4
				sum: [ :aCall |
					[ | receiver2 |
					receiver2 := [ | receiver1 |
					receiver1 := #_coverageTracker31686468_
						coverAll:
							{44 to: 53}
						by: CallBiller.
					#_coverageTracker31686468_
						coverAll:
							{55 to: 58}
						evaluating: [
							receiver1 for:
								(#_coverageTracker31686468_
									cover: (60 to: 64)
									declaredAt: (35 to: 39)
									by: aCall) ]
						thatSends: #for:
						to: receiver1 ] value.
					#_coverageTracker31686468_
						coverAll:
							{67 to: 70}
						evaluating: [ receiver2 cost ]
						thatSends: #cost
						to: receiver2 ] value ]
				ifEmpty: [
					[ | receiver3 |
					receiver3 := #_coverageTracker31686468_
						coverAll:
							{83 to: 83}
						byLiteralOrPseudoVariable: 0.
					#_coverageTracker31686468_
						coverAll:
							{84 to: 84}
						evaluating: [
							receiver3 *
								(#_coverageTracker31686468_
									coverAll:
										{85 to: 90}
									by: dollar) ]
						thatSends: #*
						to: receiver3 ] value ]]
		thatSends: #sum:ifEmpty:
		to: receiver4 ] value.
	#_coverageTracker31686468_
		coverAll:
			{94 to: 94}
		evaluating: [
			receiver6 +
				[ | receiver5 |
				receiver5 := #_coverageTracker31686468_
					coverAll:
						{96 to: 108}
					by: TelephoneLine.
				#_coverageTracker31686468_
					coverAll:
						{110 to: 124}
					evaluating: [ receiver5 basicMonthlyFee ]
					thatSends: #basicMonthlyFee
					to: receiver5 ] value ]
		thatSends: #+
		to: receiver6 ] value.! !
!Behavior method!
isDuringWorkingHours
	#_coverageTracker31686478_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 := [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686478_
		coverAll:
			{27 to: 27}
		byLiteralOrPseudoVariable: 8.
	#_coverageTracker31686478_
		coverAll:
			{28 to: 28}
		evaluating: [
			receiver1 :
				(#_coverageTracker31686478_
					coverAll:
						{29 to: 30}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #:
		to: receiver1 ] value.
	#_coverageTracker31686478_
		coverAll:
			{32 to: 33}
		evaluating: [
			receiver2 <=
				(#_coverageTracker31686478_
					cover: (35 to: 43)
					declaredAt: (35 to: 43)
					by: timeOfDay) ]
		thatSends: #<=
		to: receiver2 ] value.
	#_coverageTracker31686478_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver5 and: [
				[ | receiver4 |
				receiver4 := #_coverageTracker31686478_
					cover: (52 to: 60)
					declaredAt: (35 to: 43)
					by: timeOfDay.
				#_coverageTracker31686478_
					coverAll:
						{62 to: 63}
					evaluating: [
						receiver4 <=
							[ | receiver3 |
							receiver3 := #_coverageTracker31686478_
								coverAll:
									{66 to: 67}
								byLiteralOrPseudoVariable: 20.
							#_coverageTracker31686478_
								coverAll:
									{68 to: 68}
								evaluating: [
									receiver3 :
										(#_coverageTracker31686478_
											coverAll:
												{69 to: 70}
											byLiteralOrPseudoVariable: 0) ]
								thatSends: #:
								to: receiver3 ] value ]
					thatSends: #<=
					to: receiver4 ] value ]]
		thatSends: #and:
		to: receiver5 ] value.! !
!Behavior method!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	#_coverageTracker31686484_ markAsExecuted.
	#_coverageTracker31686484_
		cover: (106 to: 111)
		declaredAt: (106 to: 111)
		by:
			(caller := #_coverageTracker31686484_
				cover: (116 to: 127)
				declaredAt: (17 to: 28)
				by: aCallingLine).
	#_coverageTracker31686484_
		cover: (131 to: 136)
		declaredAt: (131 to: 136)
		by:
			(callee := #_coverageTracker31686484_
				cover: (141 to: 157)
				declaredAt: (34 to: 50)
				by: aLineThatIsCalled).
	#_coverageTracker31686484_
		cover: (161 to: 172)
		declaredAt: (161 to: 172)
		by:
			(dayOfTheWeek := #_coverageTracker31686484_
				cover: (177 to: 189)
				declaredAt: (56 to: 68)
				by: aDayOfTheWeek).
	#_coverageTracker31686484_
		cover: (193 to: 201)
		declaredAt: (193 to: 201)
		by:
			(timeOfDay := #_coverageTracker31686484_
				cover: (206 to: 215)
				declaredAt: (74 to: 83)
				by: aTimeOfDay).
	#_coverageTracker31686484_
		cover: (219 to: 226)
		declaredAt: (219 to: 226)
		by:
			(duration := #_coverageTracker31686484_
				cover: (231 to: 243)
				declaredAt: (90 to: 102)
				by: aCallDuration).! !
!Behavior method!
isOnAWeekDay
	#_coverageTracker31686490_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker31686490_
		cover: (16 to: 27)
		declaredAt: (16 to: 27)
		by: dayOfTheWeek.
	#_coverageTracker31686490_
		coverAll:
			{29 to: 37}
		evaluating: [ receiver1 isWeekDay ]
		thatSends: #isWeekDay
		to: receiver1 ] value.! !
!Behavior method!
cost
	#_coverageTracker31686493_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker31686493_
		cover: (8 to: 11)
		declaredAt: (8 to: 11)
		by: call.
	#_coverageTracker31686493_
		coverAll:
			{13 to: 20}
		evaluating: [ receiver1 duration ]
		thatSends: #duration
		to: receiver1 ] value.
	#_coverageTracker31686493_
		coverAll:
			{22 to: 22}
		evaluating: [
			receiver3 *
				[ | receiver2 |
				receiver2 := #_coverageTracker31686493_
					coverAll:
						{24 to: 36}
					by: TelephoneLine.
				#_coverageTracker31686493_
					coverAll:
						{38 to: 48}
					evaluating: [ receiver2 nationalFee ]
					thatSends: #nationalFee
					to: receiver2 ] value ]
		thatSends: #*
		to: receiver3 ] value.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:44:29'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:44:29'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:44:29'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:44:29'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:44:29'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:44:29'!
PASSED!
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:48:15'!
isCallDuringWorkingHours
	^ (8:00 <= call timeOfDay) and: [call timeOfDay <= (20:00)]! !
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:48:31'!
workingHoursStart

	^ 8:00! !
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:48:32' prior: 50543507!
isCallDuringWorkingHours
	^ (self workingHoursStart <= call timeOfDay) and: [call timeOfDay <= (20:00)]! !
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:48:42'!
workingHoursEnd

	^ 20:00! !
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:48:42' prior: 50543516!
isCallDuringWorkingHours
	^ (self workingHoursStart <= call timeOfDay) and: [call timeOfDay <= (self workingHoursEnd)]! !
!Call methodsFor: 'duration' stamp: 'AS 3/30/2025 01:48:56'!
timeOfDay
	^timeOfDay ! !
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:49:16' prior: 50542556 overrides: 50542552!
cost
	call isOnAWeekDay ifTrue: [
		self isCallDuringWorkingHours ifTrue: [^call duration * TelephoneLine weekDayWorkHoursFee]
								 ifFalse: [^call duration * TelephoneLine  weekDayNonWorkHoursFee]]
					    ifFalse: [^call duration * TelephoneLine weekendHoursFee].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:49:19'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:49:19'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:49:19'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:49:19'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:49:19'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:49:19'!
PASSED!

!methodRemoval: Call #isDuringWorkingHours stamp: 'AS 3/30/2025 01:49:26'!
isDuringWorkingHours

	^ (8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]!
!LocalCallBiller class methodsFor: 'billing' stamp: 'AS 3/30/2025 01:49:56'!
workingHoursEnd

	^ 20:00! !

!methodRemoval: LocalCallBiller #workingHoursEnd stamp: 'AS 3/30/2025 01:49:56'!
workingHoursEnd

	^ 20:00!
!LocalCallBiller class methodsFor: 'billing' stamp: 'AS 3/30/2025 01:49:59'!
workingHoursStart

	^ 8:00! !

!methodRemoval: LocalCallBiller #workingHoursStart stamp: 'AS 3/30/2025 01:49:59'!
workingHoursStart

	^ 8:00!
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:50:06' prior: 50543526!
isCallDuringWorkingHours
	^ (self class workingHoursStart <= call timeOfDay) and: [call timeOfDay <= (self class workingHoursEnd)]! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:50:10'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:10'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:10'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:10'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:10'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:10'!
PASSED!

!classRenamed: #TelephoneBillTest as: #TelephoneBillingTest stamp: 'AS 3/30/2025 01:50:27'!
Smalltalk renameClassNamed: #TelephoneBillTest as: #TelephoneBillingTest!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:50:30'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:30'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:30'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:30'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:30'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:30'!
PASSED!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:50:53' prior: 50541686!
todo
	'
	- tiempos de los tests en funcion de work hours definidas en telephoneline o algun lado (en vez de 8:00, workHourStart + 1 minute)
	- renombrar colabs de line agregandoles local
	- mejorar la rep del dia en que se llama (que sea una fecha completa y pueda elegir si es weekday o weekend)'! !

!methodRemoval: TelephoneBillingTest #comments stamp: 'AS 3/30/2025 01:51:33'!
comments
	'No modelo como una linea llama a la otra (entiendo que excede lo pedido, que es solo facturar), por lo que seteo las llamadas desde los tests.'!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:52:33' prior: 50541629!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: LocalCallBiller workingHoursStart + 1 * minute for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:52:34'!
ERROR!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:53:01' prior: 50543602!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: (LocalCallBiller workingHoursStart next: 1* minute) for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:04'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:53:04'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:04'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:04'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:04'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:04'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:04'!
PASSED!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:53:08' prior: 50543621!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: (LocalCallBiller workingHoursStart next: 1 * minute) for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:08'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:53:08'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:08'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:08'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:08'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:08'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:08'!
PASSED!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:53:50' prior: 50541248!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: (LocalCallBiller workingHoursStart previous:  1 * minute) for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:51'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:53:51'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:51'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:51'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:51'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:51'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:51'!
PASSED!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:15' prior: 50541266!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 9:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:21' prior: 50541309!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 9:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:25' prior: 50541292!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 9:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:26'!
PASSED!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:41'!
arbritraryTimeOfDay

	^ 9:02! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:41' prior: 50543695!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: self arbritraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:41' prior: 50543712!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: self arbritraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:41' prior: 50543678!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: self arbritraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:42'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:54:42'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:42'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:42'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:42'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:42'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:42'!
PASSED!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:54'!
arbitraryTimeOfDay

	^ 9:02! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:54' prior: 50543750!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:54' prior: 50543768!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:54' prior: 50543733!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !

!methodRemoval: TelephoneBillingTest #arbritraryTimeOfDay stamp: 'AS 3/30/2025 01:54:54'!
arbritraryTimeOfDay

	^ 9:02!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:57'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:54:57'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:57'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:57'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:57'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:57'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:57'!
PASSED!
!CallBiller class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:55:49' prior: 50542519!
for: aCallToBill
	(self allSubclasses detect: [:aSubclass | aSubclass canHandle: aCallToBill]) new initializeFor: aCallToBill.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:56:00'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:00'!
ERROR!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:00'!
ERROR!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:00'!
ERROR!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:00'!
ERROR!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:00'!
ERROR!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:01'!
ERROR!
!CallBiller class methodsFor: 'handling' stamp: 'AS 3/30/2025 01:56:23'!
canHandle: aCallToBill 
	self shouldBeImplemented.! !
!CallBiller class methodsFor: 'handling' stamp: 'AS 3/30/2025 01:56:32' prior: 50543854!
canHandle: aCallToBill 
	self subclassResponsibility ! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:34'!
ERROR!
!InternationalCallBiller class methodsFor: 'nil' stamp: 'AS 3/30/2025 01:57:11' overrides: 50543859!
canHandle: aCallToBill
	^aCallToBill isInternational.! !
!LocalCallBiller class methodsFor: 'billing' stamp: 'AS 3/30/2025 01:57:26' overrides: 50543859!
canHandle: aCallToBill
	^aCallToBill isLocal.! !
!NationalCallBiller class methodsFor: 'nil' stamp: 'AS 3/30/2025 01:57:34' overrides: 50543859!
canHandle: aCallToBill
	^aCallToBill isNational.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:57:37'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:57:37'!
ERROR!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:57:37'!
ERROR!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:57:37'!
ERROR!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:57:37'!
ERROR!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:57:37'!
ERROR!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:57:39'!
ERROR!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:58:52'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:58:52'!
ERROR!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:58:52'!
ERROR!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:58:52'!
ERROR!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:58:52'!
ERROR!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:58:52'!
ERROR!

(self allSubclasses detect: [:aSubclass | aSubclass canHandle: aCallToBill])!
!CallBiller class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:59:52' prior: 50543847!
for: aCallToBill
	^(self allSubclasses detect: [:aSubclass | aSubclass canHandle: aCallToBill]) new initializeFor: aCallToBill.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 02:00:02'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 02:00:02'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 02:00:02'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 02:00:02'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 02:00:02'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 02:00:02'!
PASSED!

----SNAPSHOT----(30 March 2025 02:02:02) CuisUniversity-6350.image priorSource: 6752050!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 02:05:59'!
toDo
	'
	- mejorar la rep del dia en que se llama (que sea una fecha completa y pueda elegir si es weekday o weekend)'! !

----QUIT----(30 March 2025 02:06:06) CuisUniversity-6350.image priorSource: 6791618!