

----STARTUP---- (29 March 2025 16:56:23) as /home/andisici/Documents/Trabajo/mercap/ejTecnico/cuis/linux64/CuisUniversity-6350.image!


TestCase subclass: #TelephoneBillTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneBillTest category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 17:08:34'!
TestCase subclass: #TelephoneBillTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 17:14:36'!
Object subclass: #TelephoneLine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillTest methodsFor: 'nil' stamp: 'AS 3/29/2025 17:14:32'!
test01UnusedLineIsBilledBasicFee

	self assert: TelephoneLine new bill totalDue equals: self basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:14:42'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 17:14:56'!
bill
	self shouldBeImplemented.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:16:34'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:16:43'!
ERROR!

!classDefinition: #TelephoneBill category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 17:17:00'!
Object subclass: #TelephoneBill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 17:16:57' prior: 50539303!
bill
	^TelephoneBill new.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:17:02'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:17:02'!
ERROR!
!TelephoneBill methodsFor: 'total' stamp: 'AS 3/29/2025 17:17:23'!
totalDue
	self shouldBeImplemented.! !
!TelephoneBill methodsFor: 'total' stamp: 'AS 3/29/2025 17:17:46' prior: 50539318!
totalDue
	^self class basicMonthlyFee! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:17:47'!
ERROR!
!TelephoneBill class methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 17:17:55'!
basicMonthlyFee
	self shouldBeImplemented.! !
!TelephoneBill class methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 17:18:12' prior: 50539326!
basicMonthlyFee
	^10 * dollar! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:18:13'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:18:26'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:18:26'!
ERROR!
!TelephoneBillTest methodsFor: 'support' stamp: 'AS 3/29/2025 17:18:33'!
basicMonthlyFee
	self shouldBeImplemented.! !
!TelephoneBillTest methodsFor: 'support' stamp: 'AS 3/29/2025 17:18:45' prior: 50539335!
basicMonthlyFee
	^TelephoneBill basicMonthlyFee ! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:18:47'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 17:18:48'!
PASSED!

Monday!

8:02!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:18:15'!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: self basicMonthlyFee + (self weekDayWorkHoursFee * 2).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:18:26'!
ERROR!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 18:18:33'!
calls: line2 on: Monday at: aRenameMe1 for: aRenameMe2 
	self shouldBeImplemented.! !

1 += 2!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:29:47'!
ERROR!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:30:15' prior: 50539345!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: self basicMonthlyFee + (self weekDayWorkHoursFee * 2).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:30:15'!
ERROR!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 18:31:12'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 18:31:11' prior: 50539355!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:31:14'!
ERROR!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 18:32:45' overrides: 16932297!
initialize
	weekDayWorkHoursTimeUsed := 0 * minute! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:32:45'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:32:45'!
ERROR!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:32:45'!
ERROR!
!TelephoneBillTest methodsFor: 'support' stamp: 'AS 3/29/2025 18:33:11'!
weekDayWorkHoursFee
	self shouldBeImplemented.! !
!TelephoneBillTest methodsFor: 'support' stamp: 'AS 3/29/2025 18:33:26' prior: 50539393!
weekDayWorkHoursFee
	TelephoneBill weekDayWorkHoursFee.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:33:33'!
ERROR!
!TelephoneBill class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:33:47'!
weekDayWorkHoursFee
	self shouldBeImplemented.! !
!TelephoneBill class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:34:14' prior: 50539403!
weekDayWorkHoursFee
	^0.20 * dollar ! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:34:15'!
ERROR!

self weekDayWorkHoursFee!
!TelephoneBillTest methodsFor: 'support' stamp: 'AS 3/29/2025 18:34:52' prior: 50539398!
weekDayWorkHoursFee
	^TelephoneBill weekDayWorkHoursFee.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:34:53'!
FAILURE!

!methodRemoval: TelephoneBillTest #basicMonthlyFee stamp: 'AS 3/29/2025 18:35:16'!
basicMonthlyFee
	^TelephoneBill basicMonthlyFee !
!TelephoneBill methodsFor: 'total' stamp: 'AS 3/29/2025 18:35:16' prior: 50539322!
totalDue
	^TelephoneBill basicMonthlyFee ! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:35:16' prior: 50539362!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: (TelephoneBill basicMonthlyFee ) + (self weekDayWorkHoursFee * 2).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:35:16' prior: 50539297!
test01UnusedLineIsBilledBasicFee

	self assert: TelephoneLine new bill totalDue equals: (TelephoneBill basicMonthlyFee ).! !

!methodRemoval: TelephoneBillTest #weekDayWorkHoursFee stamp: 'AS 3/29/2025 18:35:27'!
weekDayWorkHoursFee
	^TelephoneBill weekDayWorkHoursFee.!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:35:27' prior: 50539427!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: (TelephoneBill basicMonthlyFee ) + ((TelephoneBill weekDayWorkHoursFee) * 2).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:36:04'!
FAILURE!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 18:40:19' prior: 50539315!
bill
	^TelephoneBill for: self .! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 18:40:24' prior: 50539462!
bill
	^TelephoneBill for: self.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:40:29'!
ERROR!
!TelephoneBill class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 18:40:36'!
for: aTelephoneLine 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aTelephoneLine ! !
!TelephoneBill class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 18:40:42' prior: 50539470!
for: aTelephoneLine 
	^self new initializeFor: aTelephoneLine ! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:40:43'!
ERROR!

!classDefinition: #TelephoneBill category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 18:40:51'!
Object subclass: #TelephoneBill
	instanceVariableNames: 'telephoneLine'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBill methodsFor: 'instance creation' stamp: 'AS 3/29/2025 18:40:51'!
initializeFor: aTelephoneLine 
	self shouldBeImplemented.
	telephoneLine := aTelephoneLine.! !
!TelephoneBill methodsFor: 'instance creation' stamp: 'AS 3/29/2025 18:41:05' prior: 50539492!
initializeFor: aTelephoneLine 
	telephoneLine := aTelephoneLine.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:41:08'!
FAILURE!
!TelephoneBill methodsFor: 'total' stamp: 'AS 3/29/2025 18:48:31' prior: 50539422!
totalDue
	^telephoneLine totalDue! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:48:34'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 18:49:30'!
totalDue
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 18:50:44' prior: 50539507!
totalDue
	^TelephoneBill basicMonthlyFee + weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:50:46'!
ERROR!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:50:55'!
weekDayWorkHoursFee
	self shouldBeImplemented.! !
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:51:12' prior: 50539517!
weekDayWorkHoursFee
	^0.2 * dollar! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:51:13'!
FAILURE!

line1 bill totalDue!

TelephoneBill basicMonthlyFee!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:53:01' prior: 50539522!
weekDayWorkHoursFee
	^0.2 * dollar / minute! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:53:02'!
FAILURE!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:53:06'!
FAILURE!
!TelephoneBill class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:53:25' prior: 50539408!
weekDayWorkHoursFee
	^0.20 * dollar / minute! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:53:26'!
FAILURE!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:53:30'!
FAILURE!

line1 bill totalDue!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 18:54:00' prior: 50539511!
totalDue
	^TelephoneBill basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:54:03'!
FAILURE!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:54:07'!
FAILURE!

weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee!

^TelephoneBill basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)!

(TelephoneBill weekDayWorkHoursFee) * 2!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:55:13' prior: 50539451!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: (TelephoneBill basicMonthlyFee ) + ((TelephoneBill weekDayWorkHoursFee) * 2 * minute).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:55:14'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:55:14'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:55:14'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:55:26' prior: 50539551!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneBill weekDayWorkHoursFee) * 2 * minute).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:55:26'!
ERROR!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:55:30'!
basicMonthlyFee
	self shouldBeImplemented.! !
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 18:55:35' prior: 50539574!
basicMonthlyFee
	^10 * dollar! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:55:36'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:55:36'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:55:36'!
PASSED!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 18:56:07' prior: 50539538!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:56:17' prior: 50539439!
test01UnusedLineIsBilledBasicFee

	self assert: TelephoneLine new bill totalDue equals: (TelephoneLine basicMonthlyFee ).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:56:25' prior: 50539590!
test01UnusedLineIsBilledBasicFee

	self assert: TelephoneLine new bill totalDue equals: TelephoneLine basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:56:28'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:56:28'!
PASSED!

!methodRemoval: TelephoneBill class #basicMonthlyFee stamp: 'AS 3/29/2025 18:56:38'!
basicMonthlyFee
	^10 * dollar!

!methodRemoval: TelephoneBill class #weekDayWorkHoursFee stamp: 'AS 3/29/2025 18:56:40'!
weekDayWorkHoursFee
	^0.20 * dollar / minute!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:56:46'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:56:46'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:56:46'!
ERROR!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:56:46'!
ERROR!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:56:54' prior: 50539563!
test02
	
	| line1 line2 |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	line1 calls: line2 on: Monday at: 8:02 for: 2 * minute.
	
	self assert: line1 bill totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * 2 * minute).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:56:56'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:56:57'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:56:57'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:56:57'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:57:21' prior: 50539613!
test02
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 bill totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:57:26' prior: 50539625!
test02
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 bill totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:57:26'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:57:26'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:57:26'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:57:45' prior: 50539598!
test01UnusedLineIsBilledBasicFee

	self assert: TelephoneLine new totalDue equals: TelephoneLine basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:57:45'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:57:45'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:57:45'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 18:57:50' prior: 50539639!
test02
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:57:50'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:57:50'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:57:50'!
PASSED!

!methodRemoval: TelephoneLine #bill stamp: 'AS 3/29/2025 18:58:10'!
bill
	^TelephoneBill for: self.!

!classRemoval: #TelephoneBill stamp: 'AS 3/29/2025 18:58:14'!
Object subclass: #TelephoneBill
	instanceVariableNames: 'telephoneLine'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:58:18'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 18:58:18'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 18:58:18'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:06:05'!
test03
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:06:08'!
ERROR!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:06:13'!
weekDayNonWorkHoursFee
	self shouldBeImplemented.! !
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:06:34' prior: 50539696!
weekDayNonWorkHoursFee
	^0.1 * dollar / minute! !

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:06:54'!
FAILURE!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 19:08:02'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:08:10' prior: 50539583!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee) 
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee).! !

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:09:26'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:09:42' prior: 50539715!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee) 
										+ (weekDayNonWorkHoursTimeUsed * (self class weekDayNonWorkHoursFee)).! !

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:09:43'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:10:24' prior: 50539724!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * (self class weekDayWorkHoursFee))
										+ (weekDayNonWorkHoursTimeUsed * (self class weekDayNonWorkHoursFee)).! !

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:10:25'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:10:38' prior: 50539733!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee).! !
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:12:52' prior: 50539381!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	((8:00 <= aTimeOfDay) and: [aTimeOfDay <= 20:00]) ifTrue: [weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].! !
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:13:12' prior: 50539751!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	((8:00 <= aTimeOfDay) and: [aTimeOfDay <= 20:00]) ifTrue: [weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
	weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration.! !

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:13:29'!
ERROR!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:13:43' prior: 50539389 overrides: 16932297!
initialize
	weekDayWorkHoursTimeUsed := 0 * minute.
	weekDayNonWorkHoursTimeUsed := 0 * minute! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:13:44'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:13:44'!
ERROR!

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:13:44'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:13:44'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:13:53'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:13:55'!
ERROR!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:13:55'!
ERROR!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:14:08'!
ERROR!

20:00!

8:00 <= aTimeOfDay!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:15:24' prior: 50539761!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
	weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:15:26'!
FAILURE!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:15:30'!
FAILURE!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:16:07' prior: 50539781!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
	weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration.! !

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:16:10'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:16:10'!
PASSED!

!testRun: #TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:16:10'!
PASSED!

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:16:10'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:16:44'!
test02CallDuringWeekDayWorkHoursIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test02CallDuringWeekDayWorkHoursIsBilledCorrectly stamp: 'AS 3/29/2025 19:16:48'!
test02CallDuringWeekDayWorkHoursIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:17:05'!
test02WeekDayWorkHoursCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test02 stamp: 'AS 3/29/2025 19:17:05'!
test02
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:17:10'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:17:10'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:17:10'!
PASSED!

!testRun: #TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:17:10'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:17:31'!
test03WeekDayNonWorkHoursCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test03 stamp: 'AS 3/29/2025 19:17:31'!
test03
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:17:35'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:17:35'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:17:35'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:17:35'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:18:56'!
test04WeekendCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:18:59'!
ERROR!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:19:05'!
weekendHoursFee
	self shouldBeImplemented.! !
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:19:15' prior: 50539900!
weekendHoursFee
	^0.1 * dollar / minute! !

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:19:16'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:19:16'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:19:16'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:19:16'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:19:16'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:07'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:24:07'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:07'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:07'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:07'!
PASSED!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:24:39' prior: 50539905!
weekendHoursFee
	^0.12 * dollar / minute! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:24:40'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:40'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:40'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:40'!
FAILURE!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:24:40'!
FAILURE!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 19:26:21'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:26:18' prior: 50539793!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	aDayOfTheWeek isWeekDay ifTrue: [
	((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
	weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration. ]
	ifFalse: [weekEndTimeUsed := weekEndTimeUsed + aCallDuration].! !
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:26:54' prior: 50539774 overrides: 16932297!
initialize
	weekDayWorkHoursTimeUsed := 0 * minute.
	weekDayNonWorkHoursTimeUsed := 0 * minute.
	weekEndTimeUsed  := 0 * minute.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:26:55'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:26:57'!
ERROR!
!GregorianDay methodsFor: 'querying' stamp: 'AS 3/29/2025 19:27:15'!
isWeekDay
	self shouldBeImplemented.! !
!GregorianDay methodsFor: 'querying' stamp: 'AS 3/29/2025 19:27:55' prior: 50539947!
isWeekDay
	^self isWeekend not! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:27:58'!
ERROR!
!GregorianDay methodsFor: 'querying' stamp: 'AS 3/29/2025 19:28:01'!
isWeekend
	self shouldBeImplemented.! !
!GregorianDay methodsFor: 'querying' stamp: 'AS 3/29/2025 19:28:24' prior: 50539955!
isWeekend
	^self = Saturday or: [self = Sunday].! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:28:25'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:28:26'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:28:26'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:28:26'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:28:26'!
FAILURE!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:28:26'!
FAILURE!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:29:17' prior: 50539742!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee)
										+ (weekEndTimeUsed * self class weekDayNonWorkHoursFee).! !

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:29:19'!
FAILURE!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:29:34' prior: 50539964!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee)
										+ (weekEndTimeUsed * self class weekendHoursFee).! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:29:35'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:29:35'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:29:35'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:29:35'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:39:57'!
todo
	'- refactor isWorkableTime
	- tiempos de los tests en funcion de work hours definidas en telephoneline'! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:40:28' prior: 50539986!
todo
	'- refactor isWorkableTime
	- tiempos de los tests en funcion de work hours definidas en telephoneline o algun lado (en vez de 8:00, workHourStart + 1 minute)'! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:41:02'!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test02WeekDayWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:41:02'!
test02WeekDayWorkHoursCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:41:10'!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test03WeekDayNonWorkHoursCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:41:10'!
test03WeekDayNonWorkHoursCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:41:14'!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test04WeekendCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:41:14'!
test04WeekendCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine new.
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:42:29'!
comments
	'No modelo como una linea llama a la otra (entiendo que excede lo pedido, que es solo facturar), por lo que seteo las llamadas desde los tests.'! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:46:10'!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires'.
	line2 := TelephoneLine from: 'Rosario'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:46:13'!
ERROR!
!TelephoneLine class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 19:46:24'!
from: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: aRenameMe1 ! !
!TelephoneLine class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 19:46:53' prior: 50540110!
from: aCallingRegion 
	^self new initializeFrom: aCallingRegion ! !

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:46:54'!
ERROR!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 19:47:04'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed callingRegion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'instance creation' stamp: 'AS 3/29/2025 19:47:04'!
initializeFrom: aCallingRegion 
	self shouldBeImplemented.
	callingRegion := aCallingRegion.! !
!TelephoneLine methodsFor: 'instance creation' stamp: 'AS 3/29/2025 19:47:11' prior: 50540134!
initializeFrom: aCallingRegion 
	callingRegion := aCallingRegion.! !

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 19:47:13'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed region'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:47:13' prior: 50540140!
initializeFrom: aCallingRegion 
	region := aCallingRegion.! !

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:47:22'!
ERROR!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:47:29'!
nationalFee
	self shouldBeImplemented.! !
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 19:47:57' prior: 50540160!
nationalFee
	^14 * dollar / minute.! !

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:47:59'!
FAILURE!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 19:51:04'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed region nationalTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:50:52' prior: 50539924!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	(aLineThatWasCalled isFrom: region) ifTrue: [
		aDayOfTheWeek isWeekDay ifTrue: [
		((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
		weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration. ]
		ifFalse: [weekEndTimeUsed := weekEndTimeUsed + aCallDuration].]
	ifFalse: [nationalTimeUsed := nationalTimeUsed + aCallDuration].
	! !
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 19:51:27' prior: 50539940 overrides: 16932297!
initialize
	weekDayWorkHoursTimeUsed := 0 * minute.
	weekDayNonWorkHoursTimeUsed := 0 * minute.
	weekEndTimeUsed  := 0 * minute.
	nationalTimeUsed := 0 * minute.
	! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:51:28'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:51:28'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:51:28'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:51:28'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:51:28'!
ERROR!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:51:45' prior: 50539993!
todo
	'- refactor isWorkableTime
	- tiempos de los tests en funcion de work hours definidas en telephoneline o algun lado (en vez de 8:00, workHourStart + 1 minute)
	- renombrar colabs de line agregandoles local'! !

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:51:56'!
ERROR!
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/29/2025 19:52:12'!
isFrom: aRegion 
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/29/2025 19:52:26' prior: 50540218!
isFrom: aRegion 
	^region = aRegion.! !

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:27'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:30'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:52:30'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:30'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:30'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:30'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:30'!
FAILURE!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:52:30'!
FAILURE!

line1 totalDue!

^region = aRegion!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 19:54:02' prior: 50539975!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee)
										+ (weekEndTimeUsed * self class weekendHoursFee)
										+ (nationalTimeUsed * self class nationalFee).! !

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:11'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:13'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:54:13'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:13'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:13'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:13'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:13'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:54:23'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:54:37'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:56:31'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:56:31'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:56:31'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:56:31'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:56:31'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:56:31'!
PASSED!

----SNAPSHOT----(29 March 2025 19:57:05) CuisUniversity-6350.image priorSource: 6643839!
!Behavior method!
totalDue
	#_coverageTracker10848190_ markAsExecuted.
	^ [ | receiver17 |
	receiver17 := [ | receiver13 |
	receiver13 := [ | receiver9 |
	receiver9 := [ | receiver5 |
	receiver5 := [ | receiver1 |
	receiver1 := #_coverageTracker10848190_
		coverAll:
			{12 to: 24}
		by: TelephoneLine.
	#_coverageTracker10848190_
		coverAll:
			{26 to: 40}
		evaluating: [ receiver1 basicMonthlyFee ]
		thatSends: #basicMonthlyFee
		to: receiver1 ] value.
	#_coverageTracker10848190_
		coverAll:
			{42 to: 42}
		evaluating: [
			receiver5 +
				[ | receiver4 |
				receiver4 := #_coverageTracker10848190_
					cover: (45 to: 68)
					declaredAt: (45 to: 68)
					by: weekDayWorkHoursTimeUsed.
				#_coverageTracker10848190_
					coverAll:
						{70 to: 70}
					evaluating: [
						receiver4 *
							[ | receiver3 |
							receiver3 := [ | receiver2 |
							receiver2 := #_coverageTracker10848190_
								coverAll:
									{72 to: 75}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker10848190_
								coverAll:
									{77 to: 81}
								evaluating: [ receiver2 class ]
								thatSends: #class
								to: receiver2 ] value.
							#_coverageTracker10848190_
								coverAll:
									{83 to: 101}
								evaluating: [ receiver3 weekDayWorkHoursFee ]
								thatSends: #weekDayWorkHoursFee
								to: receiver3 ] value ]
					thatSends: #*
					to: receiver4 ] value ]
		thatSends: #+
		to: receiver5 ] value.
	#_coverageTracker10848190_
		coverAll:
			{114 to: 114}
		evaluating: [
			receiver9 +
				[ | receiver8 |
				receiver8 := #_coverageTracker10848190_
					cover: (117 to: 143)
					declaredAt: (117 to: 143)
					by: weekDayNonWorkHoursTimeUsed.
				#_coverageTracker10848190_
					coverAll:
						{145 to: 145}
					evaluating: [
						receiver8 *
							[ | receiver7 |
							receiver7 := [ | receiver6 |
							receiver6 := #_coverageTracker10848190_
								coverAll:
									{147 to: 150}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker10848190_
								coverAll:
									{152 to: 156}
								evaluating: [ receiver6 class ]
								thatSends: #class
								to: receiver6 ] value.
							#_coverageTracker10848190_
								coverAll:
									{158 to: 179}
								evaluating: [ receiver7 weekDayNonWorkHoursFee ]
								thatSends: #weekDayNonWorkHoursFee
								to: receiver7 ] value ]
					thatSends: #*
					to: receiver8 ] value ]
		thatSends: #+
		to: receiver9 ] value.
	#_coverageTracker10848190_
		coverAll:
			{192 to: 192}
		evaluating: [
			receiver13 +
				[ | receiver12 |
				receiver12 := #_coverageTracker10848190_
					cover: (195 to: 209)
					declaredAt: (195 to: 209)
					by: weekEndTimeUsed.
				#_coverageTracker10848190_
					coverAll:
						{211 to: 211}
					evaluating: [
						receiver12 *
							[ | receiver11 |
							receiver11 := [ | receiver10 |
							receiver10 := #_coverageTracker10848190_
								coverAll:
									{213 to: 216}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker10848190_
								coverAll:
									{218 to: 222}
								evaluating: [ receiver10 class ]
								thatSends: #class
								to: receiver10 ] value.
							#_coverageTracker10848190_
								coverAll:
									{224 to: 238}
								evaluating: [ receiver11 weekendHoursFee ]
								thatSends: #weekendHoursFee
								to: receiver11 ] value ]
					thatSends: #*
					to: receiver12 ] value ]
		thatSends: #+
		to: receiver13 ] value.
	#_coverageTracker10848190_
		coverAll:
			{251 to: 251}
		evaluating: [
			receiver17 +
				[ | receiver16 |
				receiver16 := #_coverageTracker10848190_
					cover: (254 to: 269)
					declaredAt: (254 to: 269)
					by: nationalTimeUsed.
				#_coverageTracker10848190_
					coverAll:
						{271 to: 271}
					evaluating: [
						receiver16 *
							[ | receiver15 |
							receiver15 := [ | receiver14 |
							receiver14 := #_coverageTracker10848190_
								coverAll:
									{273 to: 276}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker10848190_
								coverAll:
									{278 to: 282}
								evaluating: [ receiver14 class ]
								thatSends: #class
								to: receiver14 ] value.
							#_coverageTracker10848190_
								coverAll:
									{284 to: 294}
								evaluating: [ receiver15 nationalFee ]
								thatSends: #nationalFee
								to: receiver15 ] value ]
					thatSends: #*
					to: receiver16 ] value ]
		thatSends: #+
		to: receiver17 ] value.! !
!Behavior method!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	#_coverageTracker10848225_ markAsExecuted.
	[ | receiver14 |
	receiver14 := [ | receiver1 |
	receiver1 := #_coverageTracker10848225_
		cover: (82 to: 99)
		declaredAt: (8 to: 25)
		by: aLineThatWasCalled.
	#_coverageTracker10848225_
		coverAll:
			{101 to: 107}
		evaluating: [
			receiver1 isFrom:
				(#_coverageTracker10848225_
					cover: (109 to: 114)
					declaredAt: (109 to: 114)
					by: region) ]
		thatSends: #isFrom:
		to: receiver1 ] value.
	#_coverageTracker10848225_
		coverAll:
			{117 to: 123. 446 to: 453}
		evaluating: [
			receiver14
				ifTrue: [
					[ | receiver12 |
					receiver12 := [ | receiver2 |
					receiver2 := #_coverageTracker10848225_
						cover: (129 to: 141)
						declaredAt: (31 to: 43)
						by: aDayOfTheWeek.
					#_coverageTracker10848225_
						coverAll:
							{143 to: 151}
						evaluating: [ receiver2 isWeekDay ]
						thatSends: #isWeekDay
						to: receiver2 ] value.
					#_coverageTracker10848225_
						coverAll:
							{153 to: 159. 381 to: 388}
						evaluating: [
							receiver12
								ifTrue: [
									[ | receiver9 |
									receiver9 := [ | receiver7 |
									receiver7 := [ | receiver4 |
									receiver4 := [ | receiver3 |
									receiver3 := #_coverageTracker10848225_
										coverAll:
											{167 to: 167}
										byLiteralOrPseudoVariable: 8.
									#_coverageTracker10848225_
										coverAll:
											{168 to: 168}
										evaluating: [
											receiver3 :
												(#_coverageTracker10848225_
													coverAll:
														{169 to: 170}
													byLiteralOrPseudoVariable: 0) ]
										thatSends: #:
										to: receiver3 ] value.
									#_coverageTracker10848225_
										coverAll:
											{172 to: 173}
										evaluating: [
											receiver4 <=
												(#_coverageTracker10848225_
													cover: (175 to: 184)
													declaredAt: (49 to: 58)
													by: aTimeOfDay) ]
										thatSends: #<=
										to: receiver4 ] value.
									#_coverageTracker10848225_
										coverAll:
											{187 to: 190}
										evaluating: [
											receiver7 and: [
												[ | receiver6 |
												receiver6 := #_coverageTracker10848225_
													cover: (193 to: 202)
													declaredAt: (49 to: 58)
													by: aTimeOfDay.
												#_coverageTracker10848225_
													coverAll:
														{204 to: 205}
													evaluating: [
														receiver6 <=
															[ | receiver5 |
															receiver5 := #_coverageTracker10848225_
																coverAll:
																	{208 to: 209}
																byLiteralOrPseudoVariable: 20.
															#_coverageTracker10848225_
																coverAll:
																	{210 to: 210}
																evaluating: [
																	receiver5 :
																		(#_coverageTracker10848225_
																			coverAll:
																				{211 to: 212}
																			byLiteralOrPseudoVariable: 0) ]
																thatSends: #:
																to: receiver5 ] value ]
													thatSends: #<=
													to: receiver6 ] value ]]
										thatSends: #and:
										to: receiver7 ] value.
									#_coverageTracker10848225_
										coverAll:
											{217 to: 223}
										evaluating: [ receiver9 ifTrue: [ ^ #_coverageTracker10848225_
													cover: (255 to: 278)
													declaredAt: (227 to: 250)
													by:
														(weekDayWorkHoursTimeUsed := [ | receiver8 |
														receiver8 := #_coverageTracker10848225_
															cover: (227 to: 250)
															declaredAt: (227 to: 250)
															by: weekDayWorkHoursTimeUsed.
														#_coverageTracker10848225_
															coverAll:
																{280 to: 280}
															evaluating: [
																receiver8 +
																	(#_coverageTracker10848225_
																		cover: (282 to: 294)
																		declaredAt: (65 to: 77)
																		by: aCallDuration) ]
															thatSends: #+
															to: receiver8 ] value) ]]
										thatSends: #ifTrue:
										to: receiver9 ] value.
									#_coverageTracker10848225_
										cover: (332 to: 358)
										declaredAt: (301 to: 327)
										by:
											(weekDayNonWorkHoursTimeUsed := [ | receiver10 |
											receiver10 := #_coverageTracker10848225_
												cover: (301 to: 327)
												declaredAt: (301 to: 327)
												by: weekDayNonWorkHoursTimeUsed.
											#_coverageTracker10848225_
												coverAll:
													{360 to: 360}
												evaluating: [
													receiver10 +
														(#_coverageTracker10848225_
															cover: (362 to: 374)
															declaredAt: (65 to: 77)
															by: aCallDuration) ]
												thatSends: #+
												to: receiver10 ] value) ]
								ifFalse: [
									#_coverageTracker10848225_
										cover: (410 to: 424)
										declaredAt: (391 to: 405)
										by:
											(weekEndTimeUsed := [ | receiver11 |
											receiver11 := #_coverageTracker10848225_
												cover: (391 to: 405)
												declaredAt: (391 to: 405)
												by: weekEndTimeUsed.
											#_coverageTracker10848225_
												coverAll:
													{426 to: 426}
												evaluating: [
													receiver11 +
														(#_coverageTracker10848225_
															cover: (428 to: 440)
															declaredAt: (65 to: 77)
															by: aCallDuration) ]
												thatSends: #+
												to: receiver11 ] value) ]]
						thatSends: #ifTrue:ifFalse:
						to: receiver12 ] value ]
				ifFalse: [
					#_coverageTracker10848225_
						cover: (476 to: 491)
						declaredAt: (456 to: 471)
						by:
							(nationalTimeUsed := [ | receiver13 |
							receiver13 := #_coverageTracker10848225_
								cover: (456 to: 471)
								declaredAt: (456 to: 471)
								by: nationalTimeUsed.
							#_coverageTracker10848225_
								coverAll:
									{493 to: 493}
								evaluating: [
									receiver13 +
										(#_coverageTracker10848225_
											cover: (495 to: 507)
											declaredAt: (65 to: 77)
											by: aCallDuration) ]
								thatSends: #+
								to: receiver13 ] value) ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver14 ] value.! !
!Behavior method!
nationalFee
	#_coverageTracker10848260_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker10848260_
		coverAll:
			{15 to: 16}
		byLiteralOrPseudoVariable: 14.
	#_coverageTracker10848260_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver1 *
				(#_coverageTracker10848260_
					coverAll:
						{20 to: 25}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker10848260_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver2 /
				(#_coverageTracker10848260_
					coverAll:
						{29 to: 34}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
isFrom: aRegion
	#_coverageTracker10848268_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker10848268_
		cover: (20 to: 25)
		declaredAt: (20 to: 25)
		by: region.
	#_coverageTracker10848268_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver1 =
				(#_coverageTracker10848268_
					cover: (29 to: 35)
					declaredAt: (9 to: 15)
					by: aRegion) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
initialize
	#_coverageTracker10848275_ markAsExecuted.
	#_coverageTracker10848275_
		cover: (13 to: 36)
		declaredAt: (13 to: 36)
		by:
			(weekDayWorkHoursTimeUsed := [ | receiver1 |
			receiver1 := #_coverageTracker10848275_
				coverAll:
					{41 to: 41}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker10848275_
				coverAll:
					{43 to: 43}
				evaluating: [
					receiver1 *
						(#_coverageTracker10848275_
							coverAll:
								{45 to: 50}
							by: minute) ]
				thatSends: #*
				to: receiver1 ] value).
	#_coverageTracker10848275_
		cover: (54 to: 80)
		declaredAt: (54 to: 80)
		by:
			(weekDayNonWorkHoursTimeUsed := [ | receiver2 |
			receiver2 := #_coverageTracker10848275_
				coverAll:
					{85 to: 85}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker10848275_
				coverAll:
					{87 to: 87}
				evaluating: [
					receiver2 *
						(#_coverageTracker10848275_
							coverAll:
								{89 to: 94}
							by: minute) ]
				thatSends: #*
				to: receiver2 ] value).
	#_coverageTracker10848275_
		cover: (98 to: 112)
		declaredAt: (98 to: 112)
		by:
			(weekEndTimeUsed := [ | receiver3 |
			receiver3 := #_coverageTracker10848275_
				coverAll:
					{118 to: 118}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker10848275_
				coverAll:
					{120 to: 120}
				evaluating: [
					receiver3 *
						(#_coverageTracker10848275_
							coverAll:
								{122 to: 127}
							by: minute) ]
				thatSends: #*
				to: receiver3 ] value).
	#_coverageTracker10848275_
		cover: (131 to: 146)
		declaredAt: (131 to: 146)
		by:
			(nationalTimeUsed := [ | receiver4 |
			receiver4 := #_coverageTracker10848275_
				coverAll:
					{151 to: 151}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker10848275_
				coverAll:
					{153 to: 153}
				evaluating: [
					receiver4 *
						(#_coverageTracker10848275_
							coverAll:
								{155 to: 160}
							by: minute) ]
				thatSends: #*
				to: receiver4 ] value).! !
!Behavior method!
weekDayNonWorkHoursFee
	#_coverageTracker10848285_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker10848285_
		coverAll:
			{26 to: 28}
		byLiteralOrPseudoVariable: 0.1.
	#_coverageTracker10848285_
		coverAll:
			{30 to: 30}
		evaluating: [
			receiver1 *
				(#_coverageTracker10848285_
					coverAll:
						{32 to: 37}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker10848285_
		coverAll:
			{39 to: 39}
		evaluating: [
			receiver2 /
				(#_coverageTracker10848285_
					coverAll:
						{41 to: 46}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
weekendHoursFee
	#_coverageTracker10848291_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker10848291_
		coverAll:
			{19 to: 22}
		byLiteralOrPseudoVariable: 0.12.
	#_coverageTracker10848291_
		coverAll:
			{24 to: 24}
		evaluating: [
			receiver1 *
				(#_coverageTracker10848291_
					coverAll:
						{26 to: 31}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker10848291_
		coverAll:
			{33 to: 33}
		evaluating: [
			receiver2 /
				(#_coverageTracker10848291_
					coverAll:
						{35 to: 40}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
weekDayWorkHoursFee
	#_coverageTracker10848295_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker10848295_
		coverAll:
			{23 to: 25}
		byLiteralOrPseudoVariable: 0.2.
	#_coverageTracker10848295_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver1 *
				(#_coverageTracker10848295_
					coverAll:
						{29 to: 34}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker10848295_
		coverAll:
			{36 to: 36}
		evaluating: [
			receiver2 /
				(#_coverageTracker10848295_
					coverAll:
						{38 to: 43}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker10848304_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker10848304_
		coverAll:
			{19 to: 20}
		byLiteralOrPseudoVariable: 10.
	#_coverageTracker10848304_
		coverAll:
			{22 to: 22}
		evaluating: [
			receiver1 *
				(#_coverageTracker10848304_
					coverAll:
						{24 to: 29}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.! !
!Behavior method!
from: aCallingRegion
	#_coverageTracker10848310_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker10848310_
		coverAll:
			{25 to: 28}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker10848310_
		coverAll:
			{30 to: 32}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker10848310_
		coverAll:
			{34 to: 48}
		evaluating: [
			receiver2 initializeFrom:
				(#_coverageTracker10848310_
					cover: (50 to: 63)
					declaredAt: (7 to: 20)
					by: aCallingRegion) ]
		thatSends: #initializeFrom:
		to: receiver2 ] value.! !
!Behavior method!
initializeFrom: aCallingRegion
	#_coverageTracker10848315_ markAsExecuted.
	#_coverageTracker10848315_
		cover: (34 to: 39)
		declaredAt: (34 to: 39)
		by:
			(region := #_coverageTracker10848315_
				cover: (44 to: 57)
				declaredAt: (17 to: 30)
				by: aCallingRegion).! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:57:11'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:57:11'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:57:11'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:57:11'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:57:11'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:58:37' prior: 50539653!
test01UnusedLineIsBilledBasicFee

	self assert: (TelephoneLine from: 'Buenos Aires') totalDue equals: TelephoneLine basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:58:38'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:58:38'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:38'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:38'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:38'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:38'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:58:45' prior: 50540001!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires').
	line2 := TelephoneLine new.
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:45'!
FAILURE!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:58:52' prior: 50540792!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires').
	line2 := (TelephoneLine from: 'Buenos Aires').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:52'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:58:52'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:52'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:52'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:52'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:58:52'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:59:00' prior: 50540030!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires').
	line2 := (TelephoneLine from: 'Buenos Aires').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:00'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:59:00'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:00'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:00'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:00'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:00'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 19:59:07' prior: 50540059!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires').
	line2 := (TelephoneLine from: 'Buenos Aires').
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:07'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 19:59:07'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:07'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:07'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:07'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 19:59:07'!
PASSED!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:03:22'!
test05InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires'.
	line2 := TelephoneLine from: 'Rosario'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:03:40'!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires'.
	line2 := TelephoneLine from: 'Rosario'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !

!methodRemoval: TelephoneBillTest #test05InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:03:40'!
test05InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires'.
	line2 := TelephoneLine from: 'Rosario'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:03:46' prior: 50540869!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires'.
	line2 := TelephoneLine from: 'Rosario'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:03:50'!
ERROR!
!TelephoneLine class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 20:04:42'!
from: aCallingRegion in: aCountry  
	^self new initializeFrom: aCallingRegion ! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:42' prior: 50540823!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires' in: Argentina).
	line2 := (TelephoneLine from: 'Buenos Aires' in: Argentina).
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:42' prior: 50540839!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires' in: Argentina).
	line2 := (TelephoneLine from: 'Buenos Aires' in: Argentina).
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:42' prior: 50540784!
test01UnusedLineIsBilledBasicFee

	self assert: (TelephoneLine from: 'Buenos Aires' in: Argentina) totalDue equals: TelephoneLine basicMonthlyFee.! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:42' prior: 50540899!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires' in: Argentina.
	line2 := TelephoneLine from: 'Rosario' in: Argentina.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:42' prior: 50540807!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires' in: Argentina).
	line2 := (TelephoneLine from: 'Buenos Aires' in: Argentina).
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:42' prior: 50540095!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires' in: Argentina.
	line2 := TelephoneLine from: 'Rosario' in: Argentina.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !

!methodRemoval: TelephoneLine class #from: stamp: 'AS 3/29/2025 20:04:42'!
from: aCallingRegion 
	^self new initializeFrom: aCallingRegion !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:04:55' prior: 50540954!
test01UnusedLineIsBilledBasicFee

	self assert: (TelephoneLine from: 'Buenos Aires' in: 'Argentina') totalDue equals: TelephoneLine basicMonthlyFee.! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:05:02' prior: 50540978!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine from: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:05:10' prior: 50540920!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine from: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:05:18' prior: 50540937!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine from: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine from: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:05:24' prior: 50540995!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine from: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:05:30' prior: 50540962!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine from: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneLine class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 20:05:48' prior: 50540914!
from: aCallingRegion in: aCallingCountry  
	^self new initializeFrom: aCallingRegion ! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:06:15' prior: 50541090!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine from: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine from: 'Montevideo' in: 'Uruguay'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:06:16'!
ERROR!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 20:06:20'!
internationalFee
	self shouldBeImplemented.! !
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/29/2025 20:06:37' prior: 50541128!
internationalFee
	^25 * dollar / minute! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:06:39'!
FAILURE!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 20:09:28'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed region nationalTimeUsed country'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 20:09:32'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed region nationalTimeUsed country internationalTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 20:09:26' prior: 50540180!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	(aLineThatWasCalled isFromCountry: country) ifTrue: [
		(aLineThatWasCalled isFrom: region) ifTrue: [
			aDayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
			weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration. ]
			ifFalse: [weekEndTimeUsed := weekEndTimeUsed + aCallDuration].]
		ifFalse: [nationalTimeUsed := nationalTimeUsed + aCallDuration]. ]
	ifFalse: [internationalTimeUsed := nationalTimeUsed + aCallDuration.]
	! !
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 20:09:50' prior: 50540200 overrides: 16932297!
initialize
	weekDayWorkHoursTimeUsed := 0 * minute.
	weekDayNonWorkHoursTimeUsed := 0 * minute.
	weekEndTimeUsed  := 0 * minute.
	nationalTimeUsed := 0 * minute.
	internationalTimeUsed := 0 * minute.
	! !
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/29/2025 20:10:04'!
isFromRegion: aRegion 
	^region = aRegion.! !
!TelephoneLine methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:04' prior: 50541159!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	(aLineThatWasCalled isFromCountry: country) ifTrue: [
		(aLineThatWasCalled isFromRegion: region) ifTrue: [
			aDayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
			weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration. ]
			ifFalse: [weekEndTimeUsed := weekEndTimeUsed + aCallDuration].]
		ifFalse: [nationalTimeUsed := nationalTimeUsed + aCallDuration]. ]
	ifFalse: [internationalTimeUsed := nationalTimeUsed + aCallDuration.]
	! !

!methodRemoval: TelephoneLine #isFrom: stamp: 'AS 3/29/2025 20:10:04'!
isFrom: aRegion 
	^region = aRegion.!
!TelephoneLine class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 20:10:48'!
fromRegion: aCallingRegion in: aCallingCountry  
	^self new initializeFrom: aCallingRegion ! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:48' prior: 50541023!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:48' prior: 50541040!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:48' prior: 50541057!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:48' prior: 50541015!
test01UnusedLineIsBilledBasicFee

	self assert: (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina') totalDue equals: TelephoneLine basicMonthlyFee.! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:48' prior: 50541112!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:10:48' prior: 50541074!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 6:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !

!methodRemoval: TelephoneLine class #from:in: stamp: 'AS 3/29/2025 20:10:48'!
from: aCallingRegion in: aCallingCountry  
	^self new initializeFrom: aCallingRegion !
!TelephoneLine methodsFor: 'instance creation' stamp: 'AS 3/29/2025 20:11:07'!
initializeFromRegion: aCallingRegion 
	region := aCallingRegion.! !
!TelephoneLine class methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:11:07' prior: 50541224!
fromRegion: aCallingRegion in: aCallingCountry  
	^self new initializeFromRegion: aCallingRegion ! !

!methodRemoval: TelephoneLine #initializeFrom: stamp: 'AS 3/29/2025 20:11:07'!
initializeFrom: aCallingRegion 
	region := aCallingRegion.!
!TelephoneLine methodsFor: 'instance creation' stamp: 'AS 3/29/2025 20:11:55'!
initializeFromRegion: aCallingRegion in: aCallingCountry  
	region := aCallingRegion.! !
!TelephoneLine class methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 20:11:55' prior: 50541336!
fromRegion: aCallingRegion in: aCallingCountry  
	^self new initializeFromRegion: aCallingRegion in: aCallingCountry ! !

!methodRemoval: TelephoneLine #initializeFromRegion: stamp: 'AS 3/29/2025 20:11:55'!
initializeFromRegion: aCallingRegion 
	region := aCallingRegion.!
!TelephoneLine methodsFor: 'instance creation' stamp: 'AS 3/29/2025 20:12:06' prior: 50541346!
initializeFromRegion: aCallingRegion in: aCallingCountry  
	region := aCallingRegion.
	country := aCallingCountry ! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:12:11'!
ERROR!
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/29/2025 20:12:17'!
isFromCountry: aCountry 
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/29/2025 20:12:29' prior: 50541370!
isFromCountry: aCountry 
	^country = aCountry ! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:12:30'!
FAILURE!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 20:12:46' prior: 50540229!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee)
										+ (weekEndTimeUsed * self class weekendHoursFee)
										+ (nationalTimeUsed * self class nationalFee)
										+ (internationalTimeUsed * self class nationalFee).! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:12:47'!
FAILURE!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:12:53'!
FAILURE!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 20:13:09' prior: 50541197!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	(aLineThatWasCalled isFromCountry: country) ifTrue: [
		(aLineThatWasCalled isFromRegion: region) ifTrue: [
			aDayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
			weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration. ]
			ifFalse: [weekEndTimeUsed := weekEndTimeUsed + aCallDuration].]
		ifFalse: [nationalTimeUsed := nationalTimeUsed + aCallDuration]. ]
	ifFalse: [internationalTimeUsed := internationalTimeUsed + aCallDuration.]
	! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:13:11'!
FAILURE!

line1 totalDue!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 20:14:09' prior: 50541380!
totalDue
	^TelephoneLine basicMonthlyFee + (weekDayWorkHoursTimeUsed * self class weekDayWorkHoursFee)
										+ (weekDayNonWorkHoursTimeUsed * self class weekDayNonWorkHoursFee)
										+ (weekEndTimeUsed * self class weekendHoursFee)
										+ (nationalTimeUsed * self class nationalFee)
										+ (internationalTimeUsed * self class internationalFee).! !

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:14:11'!
PASSED!

----SNAPSHOT----(29 March 2025 20:18:36) CuisUniversity-6350.image priorSource: 6674891!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 20:51:34'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:51:34'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:51:34'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:51:34'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:51:34'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 20:51:34'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:08'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:37:25'!
PASSED!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:39:44'!
Object subclass: #Call
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 23:39:39' prior: 50541231!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	"line1 calls: line2 on: Monday at: 8:02 for: callDuration."
	Call from: line1 to: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:39:48'!
ERROR!
!Call class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 23:39:55'!
from: line1 to: line2 on: Monday at: aRenameMe1 for: callDuration 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: line1 to: line2 on: Monday at: aRenameMe1 for: callDuration ! !
!Call class methodsFor: 'instance creation' stamp: 'AS 3/29/2025 23:40:36' prior: 50541462!
from: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	^self new initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration ! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:40:37'!
ERROR!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:40:44'!
Object subclass: #Call
	instanceVariableNames: 'callingLine'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:40:44'!
Object subclass: #Call
	instanceVariableNames: 'callingLine lineThatIsCalled'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:40:44'!
Object subclass: #Call
	instanceVariableNames: 'callingLine lineThatIsCalled dayOfTheWeek'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:40:44'!
Object subclass: #Call
	instanceVariableNames: 'callingLine lineThatIsCalled dayOfTheWeek timeOfDay'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:40:44'!
Object subclass: #Call
	instanceVariableNames: 'callingLine lineThatIsCalled dayOfTheWeek timeOfDay callDuration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Call methodsFor: 'instance creation' stamp: 'AS 3/29/2025 23:40:44'!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	self shouldBeImplemented.
	callingLine := aCallingLine.
	lineThatIsCalled := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.! !
!Call methodsFor: 'instance creation' stamp: 'AS 3/29/2025 23:41:30' prior: 50541522!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	callingLine := aCallingLine.
	lineThatIsCalled := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:41:32'!
FAILURE!
!Call methodsFor: 'instance creation' stamp: 'AS 3/29/2025 23:43:19' prior: 50541534!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	callingLine := aCallingLine.
	lineThatIsCalled := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.
	
! !

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:43:22'!
Object subclass: #Call
	instanceVariableNames: 'caller lineThatIsCalled dayOfTheWeek timeOfDay callDuration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 23:43:22' prior: 50541546!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	caller := aCallingLine.
	lineThatIsCalled := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.
	
! !

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:43:26'!
Object subclass: #Call
	instanceVariableNames: 'caller calee dayOfTheWeek timeOfDay callDuration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 23:43:26' prior: 50541566!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	caller := aCallingLine.
	calee := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.
	
! !

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:43:30'!
Object subclass: #Call
	instanceVariableNames: 'caller callee dayOfTheWeek timeOfDay callDuration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 23:43:30' prior: 50541586!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	caller := aCallingLine.
	callee := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.
	
! !
!Call methodsFor: 'instance creation' stamp: 'AS 3/29/2025 23:44:12' prior: 50541606!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	caller := aCallingLine.
	callee := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	callDuration := aCallDuration.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:44:12'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:12'!
FAILURE!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:12'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:12'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:12'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:12'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:12'!
FAILURE!
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 23:44:32' prior: 50541443!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: 8:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:44:32'!
PASSED!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/29/2025 23:45:50'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayWorkHoursTimeUsed weekDayNonWorkHoursTimeUsed weekEndTimeUsed region nationalTimeUsed country internationalTimeUsed outgoingCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 23:45:48' prior: 50541394!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	outgoingCalls add: (Call from: self to: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration).

	(aLineThatWasCalled isFromCountry: country) ifTrue: [
		(aLineThatWasCalled isFromRegion: region) ifTrue: [
			aDayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= aTimeOfDay) and: [aTimeOfDay <= (20:00)]) ifTrue: [^weekDayWorkHoursTimeUsed := weekDayWorkHoursTimeUsed + aCallDuration.].
			weekDayNonWorkHoursTimeUsed := weekDayNonWorkHoursTimeUsed + aCallDuration. ]
			ifFalse: [weekEndTimeUsed := weekEndTimeUsed + aCallDuration].]
		ifFalse: [nationalTimeUsed := nationalTimeUsed + aCallDuration]. ]
	ifFalse: [internationalTimeUsed := internationalTimeUsed + aCallDuration.]
	! !
!TelephoneBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/29/2025 23:47:25' prior: 50540209!
todo
	'- refactor isWorkableTime
	- tiempos de los tests en funcion de work hours definidas en telephoneline o algun lado (en vez de 8:00, workHourStart + 1 minute)
	- renombrar colabs de line agregandoles local
	- mejorar la rep del dia en que se llama (que sea una fecha completa y pueda elegir si es weekday o weekend)'! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:47:59'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:47:59'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:47:59'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:47:59'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:47:59'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:47:59'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:48:02'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:02'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:02'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:02'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:02'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:02'!
ERROR!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/29/2025 23:48:15' prior: 50541183 overrides: 16932297!
initialize
	weekDayWorkHoursTimeUsed := 0 * minute.
	weekDayNonWorkHoursTimeUsed := 0 * minute.
	weekEndTimeUsed  := 0 * minute.
	nationalTimeUsed := 0 * minute.
	internationalTimeUsed := 0 * minute.
	outgoingCalls  := OrderedCollection new
	! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:48:16'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:16'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:16'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:16'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:16'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:48:16'!
PASSED!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 23:51:53' prior: 50541418!
totalDue
	^outgoingCalls sum: [ :aCall | aCall price].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:51:56'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:51:58'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:52:31'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:31'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:31'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:31'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:31'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:31'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:52:32'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:58'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:52:58'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 23:53:16' prior: 50541711!
totalDue
	^outgoingCalls sum: [ :aCall | aCall price] ifEmpty: [^0*dollar].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:53:18'!
FAILURE!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:18'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:18'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:18'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:18'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:18'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:53:20'!
FAILURE!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 23:53:48' prior: 50541716!
totalDue
	^outgoingCalls sum: [ :aCall | aCall price] ifEmpty: [^TelephoneLine basicMonthlyFee ].! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 23:53:55' prior: 50541722!
totalDue
	^outgoingCalls sum: [ :aCall | aCall price] ifEmpty: [^TelephoneLine basicMonthlyFee].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:53:56'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:56'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:56'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:56'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:56'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:56'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:53:58'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/29/2025 23:56:11' prior: 50541728!
totalDue
	^outgoingCalls sum: [ :aCall | aCall cost] ifEmpty: [^TelephoneLine basicMonthlyFee].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/29/2025 23:56:13'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:56:13'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:56:13'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:56:13'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:56:13'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:56:13'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/29/2025 23:56:14'!
ERROR!
!Call methodsFor: 'billing' stamp: 'AS 3/29/2025 23:56:24'!
cost
	self shouldBeImplemented.! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:43:31' prior: 50541739!
cost
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [callDuration * TelephoneLine internationalFee ]! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:43:35'!
ERROR!
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/30/2025 00:43:40'!
isFromSameCountryAs: caller1 
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/30/2025 00:43:50' prior: 50541761!
isFromSameCountryAs: aTelephoneLine 
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/30/2025 00:44:09' prior: 50541766!
isFromSameCountryAs: aTelephoneLine 
	country = aTelephoneLine country.! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:11'!
ERROR!
!TelephoneLine methodsFor: 'country' stamp: 'AS 3/30/2025 00:44:39'!
country
	self shouldBeImplemented.
	^country! !
!TelephoneLine methodsFor: 'country' stamp: 'AS 3/30/2025 00:44:43' prior: 50541776!
country
	^country! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:44'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:44:55'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:55'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:55'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:55'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:55'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:55'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:44:57'!
ERROR!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:45:21' prior: 50541743!
cost
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ]! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:45:24'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:24'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:24'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:24'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:24'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:24'!
ERROR!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:45:27'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:27'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:27'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:27'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:27'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:27'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:45:29'!
ERROR!
!TelephoneLine methodsFor: 'querying' stamp: 'AS 3/30/2025 00:47:17' prior: 50541771!
isFromSameCountryAs: aTelephoneLine 
	^country = aTelephoneLine country.! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:47:18'!
ERROR!
!TelephoneLine methodsFor: 'region' stamp: 'AS 3/30/2025 00:47:27'!
isFromSameRegionAs: caller1 
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'region' stamp: 'AS 3/30/2025 00:47:35' prior: 50541809!
isFromSameRegionAs: aTelephoneLine 
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'region' stamp: 'AS 3/30/2025 00:47:49' prior: 50541814!
isFromSameRegionAs: aTelephoneLine 
	^region = aTelephoneLine region! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:47:50'!
ERROR!
!TelephoneLine methodsFor: 'region' stamp: 'AS 3/30/2025 00:47:56'!
region
	self shouldBeImplemented.
	^region! !
!TelephoneLine methodsFor: 'region' stamp: 'AS 3/30/2025 00:47:59' prior: 50541824!
region
	^region! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:48:00'!
FAILURE!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:48:42' prior: 50541785!
cost
	| cost |
	cost := TelephoneLine basicMonthlyFee.
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ]! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:49:16' prior: 50541832!
cost
	| cost |
	cost := TelephoneLine basicMonthlyFee.
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [cost := cost + callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [cost := cost + callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [cost := cost + callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [cost := cost + callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [cost := cost + callDuration * TelephoneLine internationalFee ]
	
	^cost! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:49:21'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:21'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:21'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:21'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:21'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:21'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:22'!
ERROR!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:49:37' prior: 50541852!
cost
	| cost |
	cost := TelephoneLine basicMonthlyFee.
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [cost := cost + callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [cost := cost + callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [cost := cost + callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [cost := cost + callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [cost := cost + callDuration * TelephoneLine internationalFee ].
	
	^cost! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:49:40'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:40'!
FAILURE!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:40'!
FAILURE!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:40'!
FAILURE!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:40'!
FAILURE!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:40'!
FAILURE!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:49:42'!
FAILURE!

callDuration!

TelephoneLine weekDayWorkHoursFee!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:52:22' prior: 50541875!
cost
	| cost |
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [cost := callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [cost := callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [cost := callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [cost := callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [cost := callDuration * TelephoneLine internationalFee ].
	
	^cost + TelephoneLine basicMonthlyFee ! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 00:52:38' prior: 50541899!
cost
	| cost |
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [cost := callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [cost := callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [cost := callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [cost := callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [cost := callDuration * TelephoneLine internationalFee ].
	
	^cost! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:52:47'!
FAILURE!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 00:53:49' prior: 50541734!
totalDue
	^(outgoingCalls sum: [ :aCall | aCall cost] ifEmpty: [^0*dollar]) + TelephoneLine basicMonthlyFee .! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 00:53:52' prior: 50541941!
totalDue
	^(outgoingCalls sum: [ :aCall | aCall cost] ifEmpty: [^0*dollar]) + TelephoneLine basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:53:55'!
FAILURE!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:53:55'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:53:55'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:53:55'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:53:55'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:53:55'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:53:55'!
FAILURE!

(TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina') totalDue!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 00:54:42' prior: 50541948!
totalDue
	^(outgoingCalls sum: [ :aCall | aCall cost] ifEmpty: [0*dollar]) + TelephoneLine basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:54:43'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:54:43'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:54:43'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:54:43'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:54:43'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:54:43'!
PASSED!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/30/2025 00:55:04' prior: 50541658!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	outgoingCalls add: (Call from: self to: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration).! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:55:04'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:04'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:04'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:04'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:04'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:04'!
PASSED!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/30/2025 00:55:25' prior: 50541700 overrides: 16932297!
initialize
	outgoingCalls  := OrderedCollection new
	! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 00:55:25'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:25'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:25'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:25'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:25'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 00:55:25'!
PASSED!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 00:55:29'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekDayNonWorkHoursTimeUsed weekEndTimeUsed region nationalTimeUsed country internationalTimeUsed outgoingCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 00:55:30'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'weekEndTimeUsed region nationalTimeUsed country internationalTimeUsed outgoingCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 00:55:30'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'region nationalTimeUsed country internationalTimeUsed outgoingCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 00:55:30'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'region country internationalTimeUsed outgoingCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 00:55:30'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'region country outgoingCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

----SNAPSHOT----(30 March 2025 00:55:51) CuisUniversity-6350.image priorSource: 6713005!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:03:04' prior: 50541920!
cost
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ].
	
	'((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]) ifTrue: [
		dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [cost := callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [cost := callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]'
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:03:06'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:03:06'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:03:06'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:03:06'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:03:06'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:03:06'!
PASSED!

!methodRemoval: TelephoneLine #isFromRegion: stamp: 'AS 3/30/2025 01:05:18'!
isFromRegion: aRegion 
	^region = aRegion.!

!methodRemoval: TelephoneLine #isFromCountry: stamp: 'AS 3/30/2025 01:05:20'!
isFromCountry: aCountry 
	^country = aCountry !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:06:29' prior: 50542029!
cost
	(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ].
	
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]) ifTrue: [
		dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]].
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:06:34' prior: 50542066!
cost
	"(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ]."
	
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]) ifTrue: [
		dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]].
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:06:37'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:06:37'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:06:37'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:06:37'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:06:37'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:06:37'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:06:37'!
ERROR!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:08:00' prior: 50542102!
cost
	"(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ]."
	
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]) 
				ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]].
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:08:08'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:12'!
PASSED!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:08:17'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:17'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:17'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:17'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:17'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:17'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:08:17'!
ERROR!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:12:31' prior: 50542138!
cost
	"(callee isFromSameCountryAs: caller) ifTrue: [
		(callee isFromSameRegionAs: caller) ifTrue: [
			dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
				ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee .] ]
			ifFalse: [^callDuration * TelephoneLine weekendHoursFee].]
		ifFalse: [^callDuration * TelephoneLine nationalFee]. ]
	ifFalse: [^callDuration * TelephoneLine internationalFee ]."
	
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]) 
				ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:12:34'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:12:34'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:12:34'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:12:34'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:12:34'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:12:34'!
PASSED!

----SNAPSHOT----(30 March 2025 01:12:59) CuisUniversity-6350.image priorSource: 6732007!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:13:04' prior: 50542174!
cost
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]) 
				ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:13:13'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:13'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:13'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:13'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:13'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:13'!
PASSED!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:13:35'!
isLocal

	^ (callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller)]! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:13:35' prior: 50542215!
cost
	(self isLocal) 
				ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:13:41' prior: 50542243!
cost
	(self isLocal) ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:13:43'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:43'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:43'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:43'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:43'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:13:43'!
PASSED!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:14:07' prior: 50542264!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	((callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:14:11'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:14:11'!
PASSED!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:14:22'!
isNational

	^ (callee isFromSameCountryAs: caller) and: [(callee isFromSameRegionAs: caller) not]! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:14:22' prior: 50542284!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	(self isNational) ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:14:28' prior: 50542310!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^callDuration * TelephoneLine nationalFee].
	(callee isFromSameCountryAs: caller) not ifTrue: [^callDuration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:14:38'!
isInternational

	^ (callee isFromSameCountryAs: caller) not! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:14:38' prior: 50542328!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			((8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^callDuration * TelephoneLine nationalFee].
	self isInternational ifTrue: [^callDuration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:15:38'!
isWorkingHours

	^ (8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:15:38' prior: 50542351!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			(self isWorkingHours) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^callDuration * TelephoneLine nationalFee].
	self isInternational ifTrue: [^callDuration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:15:59'!
isDuringWorkingHours

	^ (8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]! !
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:15:59' prior: 50542373!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [
			(self isDuringWorkingHours) ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^callDuration * TelephoneLine nationalFee].
	self isInternational ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!methodRemoval: Call #isWorkingHours stamp: 'AS 3/30/2025 01:15:59'!
isWorkingHours

	^ (8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:16:03'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:03'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:03'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:03'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:03'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:03'!
PASSED!
!Call methodsFor: 'billing' stamp: 'AS 3/30/2025 01:16:23' prior: 50542395!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [self isDuringWorkingHours ifTrue: [^callDuration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^callDuration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^callDuration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^callDuration * TelephoneLine nationalFee].
	self isInternational ifTrue: [^callDuration * TelephoneLine internationalFee].
! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:16:25'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:25'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:25'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:25'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:25'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:16:25'!
PASSED!

!classDefinition: #CallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:26:52'!
Object subclass: #CallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 01:26:48' prior: 50541957!
totalDue
	^(outgoingCalls sum: [ :aCall | (CallBiller for: aCall) cost] ifEmpty: [0*dollar]) + TelephoneLine basicMonthlyFee.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:26:55'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:26:55'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:26:57'!
ERROR!
!CallBiller class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:27:01'!
for: aCall 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCall ! !
!CallBiller class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:27:12' prior: 50542447!
for: aCallToBill
	^self new initializeFor: aCallToBill! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:27:13'!
ERROR!

!classDefinition: #CallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:27:19'!
Object subclass: #CallBiller
	instanceVariableNames: 'callToBill'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!CallBiller methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:27:19'!
initializeFor: aCallToBill 
	self shouldBeImplemented.
	callToBill := aCallToBill.! !
!CallBiller methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:27:26' prior: 50542467!
initializeFor: aCallToBill 
	callToBill := aCallToBill.! !

!classDefinition: #CallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:27:30'!
Object subclass: #CallBiller
	instanceVariableNames: 'call'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!CallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:27:30' prior: 50542473!
initializeFor: aCallToBill 
	call := aCallToBill.! !

!methodRemoval: CallBiller #initializeFor: stamp: 'AS 3/30/2025 01:27:54'!
initializeFor: aCallToBill 
	call := aCallToBill.!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:27:57'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:27:57'!
ERROR!

!classDefinition: #LocalCallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:32:14'!
CallBiller subclass: #LocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #NationalCallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:33:25'!
CallBiller subclass: #NationalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #InternationalCallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:33:33'!
CallBiller subclass: #InternationalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!CallBiller class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:33:19' prior: 50542455!
for: aCallToBill
	(aCallToBill isLocal) ifTrue:[^LocalCallBiller new initializeFor: aCallToBill].
	(aCallToBill isNational) ifTrue:[^NationalCallBiller new initializeFor: aCallToBill].
	(aCallToBill isInternational) ifTrue:[^InternationalCallBiller new initializeFor: aCallToBill].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:33:39'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:39'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:39'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:39'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:39'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:39'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:41'!
ERROR!

!classDefinition: #CallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:33:50'!
Object subclass: #CallBiller
	instanceVariableNames: 'call callToBill'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!CallBiller methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:33:50'!
initializeFor: aCallToBill 
	self shouldBeImplemented.
	callToBill := aCallToBill.! !
!CallBiller methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:33:57' prior: 50542538!
initializeFor: aCallToBill 
	call := aCallToBill.! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:33:58'!
ERROR!
!CallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:34:11'!
cost
	self shouldBeImplemented.! !
!CallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:34:16' prior: 50542548!
cost
	self subclassResponsibility ! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:34:17'!
ERROR!
!LocalCallBiller methodsFor: 'nil' stamp: 'AS 3/30/2025 01:38:50' overrides: 50542552!
cost
	call isOnAWeekDay ifTrue: [
		call isDuringWorkingHours ifTrue: [^call duration * TelephoneLine weekDayWorkHoursFee]
								 ifFalse: [^call duration * TelephoneLine  weekDayNonWorkHoursFee]]
					    ifFalse: [^call duration * TelephoneLine weekendHoursFee].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:38:56'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:38:56'!
ERROR!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:38:56'!
ERROR!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:38:56'!
ERROR!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:38:56'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:38:56'!
ERROR!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:38:57'!
ERROR!
!Call methodsFor: 'querying' stamp: 'AS 3/30/2025 01:39:05'!
isOnAWeekDay
	self shouldBeImplemented.! !
!Call methodsFor: 'querying' stamp: 'AS 3/30/2025 01:39:17' prior: 50542567!
isOnAWeekDay
	^dayOfTheWeek isWeekDay! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:19'!
ERROR!
!Call methodsFor: 'duration' stamp: 'AS 3/30/2025 01:39:25'!
duration
	self shouldBeImplemented.! !
!Call methodsFor: 'duration' stamp: 'AS 3/30/2025 01:39:34' prior: 50542575!
duration
	^callDuration ! !

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:37'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:38'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:39'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:40'!
ERROR!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 01:39:50'!
Object subclass: #Call
	instanceVariableNames: 'caller callee dayOfTheWeek timeOfDay duration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:39:50' prior: 50542416!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [self isDuringWorkingHours ifTrue: [^duration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^duration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^duration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^duration * TelephoneLine nationalFee].
	self isInternational ifTrue: [^duration * TelephoneLine internationalFee].
! !
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:39:50' prior: 50541617!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	caller := aCallingLine.
	callee := aLineThatIsCalled.
	dayOfTheWeek := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	duration := aCallDuration.! !
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:39:50' prior: 50542579!
duration
	^duration ! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:39:53'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:53'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:53'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:53'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:53'!
ERROR!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:39:53'!
ERROR!
!InternationalCallBiller methodsFor: 'nil' stamp: 'AS 3/30/2025 01:40:30' overrides: 50542552!
cost
	^call duration * TelephoneLine nationalFee! !
!InternationalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:40:46' prior: 50542622 overrides: 50542552!
cost
	^call duration * TelephoneLine internationalFee! !
!NationalCallBiller methodsFor: 'nil' stamp: 'AS 3/30/2025 01:40:51' overrides: 50542552!
cost
	^call duration * TelephoneLine nationalFee! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:40:54'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:40:54'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:40:54'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:40:54'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:40:54'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:40:54'!
PASSED!

!methodRemoval: Call #cost stamp: 'AS 3/30/2025 01:42:33'!
cost
	self isLocal ifTrue: [ dayOfTheWeek isWeekDay ifTrue: [self isDuringWorkingHours ifTrue: [^duration * TelephoneLine weekDayWorkHoursFee.]
					ifFalse: [^duration * TelephoneLine  weekDayNonWorkHoursFee ] ]
				ifFalse: [^duration * TelephoneLine weekendHoursFee]].
		
	self isNational ifTrue: [^duration * TelephoneLine nationalFee].
	self isInternational ifTrue: [^duration * TelephoneLine internationalFee].
!

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:42:35'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:42:35'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:42:35'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:42:35'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:42:35'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:42:35'!
PASSED!

----SNAPSHOT----(30 March 2025 01:44:07) CuisUniversity-6350.image priorSource: 6737968!
!Behavior method!
region
	#_coverageTracker31686340_ markAsExecuted.
	^ #_coverageTracker31686340_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: region.! !
!Behavior method!
for: aCallToBill
	#_coverageTracker31686350_ markAsExecuted.
	[ | receiver4 |
	receiver4 := [ | receiver1 |
	receiver1 := #_coverageTracker31686350_
		cover: (20 to: 30)
		declaredAt: (6 to: 16)
		by: aCallToBill.
	#_coverageTracker31686350_
		coverAll:
			{32 to: 38}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker31686350_
		coverAll:
			{41 to: 47}
		evaluating: [ receiver4 ifTrue: [ ^ [ | receiver3 |
				receiver3 := [ | receiver2 |
				receiver2 := #_coverageTracker31686350_
					coverAll:
						{50 to: 64}
					by: LocalCallBiller.
				#_coverageTracker31686350_
					coverAll:
						{66 to: 68}
					evaluating: [ receiver2 new ]
					thatSends: #new
					to: receiver2 ] value.
				#_coverageTracker31686350_
					coverAll:
						{70 to: 83}
					evaluating: [
						receiver3 initializeFor:
							(#_coverageTracker31686350_
								cover: (85 to: 95)
								declaredAt: (6 to: 16)
								by: aCallToBill) ]
					thatSends: #initializeFor:
					to: receiver3 ] value ]]
		thatSends: #ifTrue:
		to: receiver4 ] value.
	[ | receiver8 |
	receiver8 := [ | receiver5 |
	receiver5 := #_coverageTracker31686350_
		cover: (101 to: 111)
		declaredAt: (6 to: 16)
		by: aCallToBill.
	#_coverageTracker31686350_
		coverAll:
			{113 to: 122}
		evaluating: [ receiver5 isNational ]
		thatSends: #isNational
		to: receiver5 ] value.
	#_coverageTracker31686350_
		coverAll:
			{125 to: 131}
		evaluating: [ receiver8 ifTrue: [ ^ [ | receiver7 |
				receiver7 := [ | receiver6 |
				receiver6 := #_coverageTracker31686350_
					coverAll:
						{134 to: 151}
					by: NationalCallBiller.
				#_coverageTracker31686350_
					coverAll:
						{153 to: 155}
					evaluating: [ receiver6 new ]
					thatSends: #new
					to: receiver6 ] value.
				#_coverageTracker31686350_
					coverAll:
						{157 to: 170}
					evaluating: [
						receiver7 initializeFor:
							(#_coverageTracker31686350_
								cover: (172 to: 182)
								declaredAt: (6 to: 16)
								by: aCallToBill) ]
					thatSends: #initializeFor:
					to: receiver7 ] value ]]
		thatSends: #ifTrue:
		to: receiver8 ] value.
	[ | receiver12 |
	receiver12 := [ | receiver9 |
	receiver9 := #_coverageTracker31686350_
		cover: (188 to: 198)
		declaredAt: (6 to: 16)
		by: aCallToBill.
	#_coverageTracker31686350_
		coverAll:
			{200 to: 214}
		evaluating: [ receiver9 isInternational ]
		thatSends: #isInternational
		to: receiver9 ] value.
	#_coverageTracker31686350_
		coverAll:
			{217 to: 223}
		evaluating: [ receiver12 ifTrue: [ ^ [ | receiver11 |
				receiver11 := [ | receiver10 |
				receiver10 := #_coverageTracker31686350_
					coverAll:
						{226 to: 248}
					by: InternationalCallBiller.
				#_coverageTracker31686350_
					coverAll:
						{250 to: 252}
					evaluating: [ receiver10 new ]
					thatSends: #new
					to: receiver10 ] value.
				#_coverageTracker31686350_
					coverAll:
						{254 to: 267}
					evaluating: [
						receiver11 initializeFor:
							(#_coverageTracker31686350_
								cover: (269 to: 279)
								declaredAt: (6 to: 16)
								by: aCallToBill) ]
					thatSends: #initializeFor:
					to: receiver11 ] value ]]
		thatSends: #ifTrue:
		to: receiver12 ] value.! !
!Behavior method!
from: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	#_coverageTracker31686371_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686371_
		coverAll:
			{96 to: 99}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker31686371_
		coverAll:
			{101 to: 103}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker31686371_
		coverAll:
			{105 to: 119. 134 to: 136. 156 to: 158. 174 to: 176. 189 to: 192}
		evaluating: [
			receiver2
				initializeFrom:
					(#_coverageTracker31686371_
						cover: (121 to: 132)
						declaredAt: (7 to: 18)
						by: aCallingLine)
				to:
					(#_coverageTracker31686371_
						cover: (138 to: 154)
						declaredAt: (24 to: 40)
						by: aLineThatIsCalled)
				on:
					(#_coverageTracker31686371_
						cover: (160 to: 172)
						declaredAt: (46 to: 58)
						by: aDayOfTheWeek)
				at:
					(#_coverageTracker31686371_
						cover: (178 to: 187)
						declaredAt: (64 to: 73)
						by: aTimeOfDay)
				for:
					(#_coverageTracker31686371_
						cover: (194 to: 206)
						declaredAt: (80 to: 92)
						by: aCallDuration) ]
		thatSends: #initializeFrom:to:on:at:for:
		to: receiver2 ] value.! !
!Behavior method!
isFromSameCountryAs: aTelephoneLine
	#_coverageTracker31686379_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker31686379_
		cover: (40 to: 46)
		declaredAt: (40 to: 46)
		by: country.
	#_coverageTracker31686379_
		coverAll:
			{48 to: 48}
		evaluating: [
			receiver2 =
				[ | receiver1 |
				receiver1 := #_coverageTracker31686379_
					cover: (50 to: 63)
					declaredAt: (22 to: 35)
					by: aTelephoneLine.
				#_coverageTracker31686379_
					coverAll:
						{65 to: 71}
					evaluating: [ receiver1 country ]
					thatSends: #country
					to: receiver1 ] value ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker31686383_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker31686383_
		coverAll:
			{19 to: 20}
		byLiteralOrPseudoVariable: 10.
	#_coverageTracker31686383_
		coverAll:
			{22 to: 22}
		evaluating: [
			receiver1 *
				(#_coverageTracker31686383_
					coverAll:
						{24 to: 29}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.! !
!Behavior method!
duration
	#_coverageTracker31686385_ markAsExecuted.
	^ #_coverageTracker31686385_
		cover: (12 to: 19)
		declaredAt: (12 to: 19)
		by: duration.! !
!Behavior method!
isNational
	#_coverageTracker31686387_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 := [ | receiver1 |
	receiver1 := #_coverageTracker31686387_
		cover: (17 to: 22)
		declaredAt: (17 to: 22)
		by: callee.
	#_coverageTracker31686387_
		coverAll:
			{24 to: 43}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker31686387_
					cover: (45 to: 50)
					declaredAt: (45 to: 50)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker31686387_
		coverAll:
			{53 to: 56}
		evaluating: [
			receiver4 and: [
				[ | receiver3 |
				receiver3 := [ | receiver2 |
				receiver2 := #_coverageTracker31686387_
					cover: (60 to: 65)
					declaredAt: (17 to: 22)
					by: callee.
				#_coverageTracker31686387_
					coverAll:
						{67 to: 85}
					evaluating: [
						receiver2 isFromSameRegionAs:
							(#_coverageTracker31686387_
								cover: (87 to: 92)
								declaredAt: (45 to: 50)
								by: caller) ]
					thatSends: #isFromSameRegionAs:
					to: receiver2 ] value.
				#_coverageTracker31686387_
					coverAll:
						{95 to: 97}
					evaluating: [ receiver3 not ]
					thatSends: #not
					to: receiver3 ] value ]]
		thatSends: #and:
		to: receiver4 ] value.! !
!Behavior method!
isFromSameRegionAs: aTelephoneLine
	#_coverageTracker31686391_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker31686391_
		cover: (39 to: 44)
		declaredAt: (39 to: 44)
		by: region.
	#_coverageTracker31686391_
		coverAll:
			{46 to: 46}
		evaluating: [
			receiver2 =
				[ | receiver1 |
				receiver1 := #_coverageTracker31686391_
					cover: (48 to: 61)
					declaredAt: (21 to: 34)
					by: aTelephoneLine.
				#_coverageTracker31686391_
					coverAll:
						{63 to: 68}
					evaluating: [ receiver1 region ]
					thatSends: #region
					to: receiver1 ] value ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
initializeFromRegion: aCallingRegion in: aCallingCountry
	#_coverageTracker31686396_ markAsExecuted.
	#_coverageTracker31686396_
		cover: (61 to: 66)
		declaredAt: (61 to: 66)
		by:
			(region := #_coverageTracker31686396_
				cover: (71 to: 84)
				declaredAt: (23 to: 36)
				by: aCallingRegion).
	#_coverageTracker31686396_
		cover: (88 to: 94)
		declaredAt: (88 to: 94)
		by:
			(country := #_coverageTracker31686396_
				cover: (99 to: 113)
				declaredAt: (42 to: 56)
				by: aCallingCountry).! !
!Behavior method!
nationalFee
	#_coverageTracker31686400_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686400_
		coverAll:
			{15 to: 16}
		byLiteralOrPseudoVariable: 14.
	#_coverageTracker31686400_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver1 *
				(#_coverageTracker31686400_
					coverAll:
						{20 to: 25}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker31686400_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver2 /
				(#_coverageTracker31686400_
					coverAll:
						{29 to: 34}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
cost
	#_coverageTracker31686404_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker31686404_
		cover: (8 to: 11)
		declaredAt: (8 to: 11)
		by: call.
	#_coverageTracker31686404_
		coverAll:
			{13 to: 20}
		evaluating: [ receiver1 duration ]
		thatSends: #duration
		to: receiver1 ] value.
	#_coverageTracker31686404_
		coverAll:
			{22 to: 22}
		evaluating: [
			receiver3 *
				[ | receiver2 |
				receiver2 := #_coverageTracker31686404_
					coverAll:
						{24 to: 36}
					by: TelephoneLine.
				#_coverageTracker31686404_
					coverAll:
						{38 to: 53}
					evaluating: [ receiver2 internationalFee ]
					thatSends: #internationalFee
					to: receiver2 ] value ]
		thatSends: #*
		to: receiver3 ] value.! !
!Behavior method!
internationalFee
	#_coverageTracker31686408_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686408_
		coverAll:
			{20 to: 21}
		byLiteralOrPseudoVariable: 25.
	#_coverageTracker31686408_
		coverAll:
			{23 to: 23}
		evaluating: [
			receiver1 *
				(#_coverageTracker31686408_
					coverAll:
						{25 to: 30}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker31686408_
		coverAll:
			{32 to: 32}
		evaluating: [
			receiver2 /
				(#_coverageTracker31686408_
					coverAll:
						{34 to: 39}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
fromRegion: aCallingRegion in: aCallingCountry
	#_coverageTracker31686414_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686414_
		coverAll:
			{52 to: 55}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker31686414_
		coverAll:
			{57 to: 59}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker31686414_
		coverAll:
			{61 to: 81. 98 to: 100}
		evaluating: [
			receiver2
				initializeFromRegion:
					(#_coverageTracker31686414_
						cover: (83 to: 96)
						declaredAt: (13 to: 26)
						by: aCallingRegion)
				in:
					(#_coverageTracker31686414_
						cover: (102 to: 116)
						declaredAt: (32 to: 46)
						by: aCallingCountry) ]
		thatSends: #initializeFromRegion:in:
		to: receiver2 ] value.! !
!Behavior method!
weekendHoursFee
	#_coverageTracker31686418_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686418_
		coverAll:
			{19 to: 22}
		byLiteralOrPseudoVariable: 0.12.
	#_coverageTracker31686418_
		coverAll:
			{24 to: 24}
		evaluating: [
			receiver1 *
				(#_coverageTracker31686418_
					coverAll:
						{26 to: 31}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker31686418_
		coverAll:
			{33 to: 33}
		evaluating: [
			receiver2 /
				(#_coverageTracker31686418_
					coverAll:
						{35 to: 40}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
country
	#_coverageTracker31686422_ markAsExecuted.
	^ #_coverageTracker31686422_
		cover: (11 to: 17)
		declaredAt: (11 to: 17)
		by: country.! !
!Behavior method!
weekDayNonWorkHoursFee
	#_coverageTracker31686424_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686424_
		coverAll:
			{26 to: 28}
		byLiteralOrPseudoVariable: 0.1.
	#_coverageTracker31686424_
		coverAll:
			{30 to: 30}
		evaluating: [
			receiver1 *
				(#_coverageTracker31686424_
					coverAll:
						{32 to: 37}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker31686424_
		coverAll:
			{39 to: 39}
		evaluating: [
			receiver2 /
				(#_coverageTracker31686424_
					coverAll:
						{41 to: 46}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
calls: aLineThatWasCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	#_coverageTracker31686429_ markAsExecuted.
	[ | receiver2 |
	receiver2 := #_coverageTracker31686429_
		cover: (80 to: 92)
		declaredAt: (80 to: 92)
		by: outgoingCalls.
	#_coverageTracker31686429_
		coverAll:
			{94 to: 97}
		evaluating: [
			receiver2 add:
				[ | receiver1 |
				receiver1 := #_coverageTracker31686429_
					coverAll:
						{100 to: 103}
					by: Call.
				#_coverageTracker31686429_
					coverAll:
						{105 to: 109. 116 to: 118. 139 to: 141. 157 to: 159. 172 to: 175}
					evaluating: [
						receiver1
							from:
								(#_coverageTracker31686429_
									coverAll:
										{111 to: 114}
									byLiteralOrPseudoVariable: self)
							to:
								(#_coverageTracker31686429_
									cover: (120 to: 137)
									declaredAt: (8 to: 25)
									by: aLineThatWasCalled)
							on:
								(#_coverageTracker31686429_
									cover: (143 to: 155)
									declaredAt: (31 to: 43)
									by: aDayOfTheWeek)
							at:
								(#_coverageTracker31686429_
									cover: (161 to: 170)
									declaredAt: (49 to: 58)
									by: aTimeOfDay)
							for:
								(#_coverageTracker31686429_
									cover: (177 to: 189)
									declaredAt: (65 to: 77)
									by: aCallDuration) ]
					thatSends: #from:to:on:at:for:
					to: receiver1 ] value ]
		thatSends: #add:
		to: receiver2 ] value.! !
!Behavior method!
initializeFor: aCallToBill
	#_coverageTracker31686435_ markAsExecuted.
	#_coverageTracker31686435_
		cover: (30 to: 33)
		declaredAt: (30 to: 33)
		by:
			(call := #_coverageTracker31686435_
				cover: (38 to: 48)
				declaredAt: (16 to: 26)
				by: aCallToBill).! !
!Behavior method!
weekDayWorkHoursFee
	#_coverageTracker31686437_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686437_
		coverAll:
			{23 to: 25}
		byLiteralOrPseudoVariable: 0.2.
	#_coverageTracker31686437_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver1 *
				(#_coverageTracker31686437_
					coverAll:
						{29 to: 34}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker31686437_
		coverAll:
			{36 to: 36}
		evaluating: [
			receiver2 /
				(#_coverageTracker31686437_
					coverAll:
						{38 to: 43}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
isInternational
	#_coverageTracker31686441_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686441_
		cover: (22 to: 27)
		declaredAt: (22 to: 27)
		by: callee.
	#_coverageTracker31686441_
		coverAll:
			{29 to: 48}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker31686441_
					cover: (50 to: 55)
					declaredAt: (50 to: 55)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker31686441_
		coverAll:
			{58 to: 60}
		evaluating: [ receiver2 not ]
		thatSends: #not
		to: receiver2 ] value.! !
!Behavior method!
initialize
	#_coverageTracker31686443_ markAsExecuted.
	#_coverageTracker31686443_
		cover: (13 to: 25)
		declaredAt: (13 to: 25)
		by:
			(outgoingCalls := [ | receiver1 |
			receiver1 := #_coverageTracker31686443_
				coverAll:
					{31 to: 47}
				by: OrderedCollection.
			#_coverageTracker31686443_
				coverAll:
					{49 to: 51}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
isLocal
	#_coverageTracker31686445_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker31686445_
		cover: (14 to: 19)
		declaredAt: (14 to: 19)
		by: callee.
	#_coverageTracker31686445_
		coverAll:
			{21 to: 40}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker31686445_
					cover: (42 to: 47)
					declaredAt: (42 to: 47)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker31686445_
		coverAll:
			{50 to: 53}
		evaluating: [
			receiver3 and: [
				[ | receiver2 |
				receiver2 := #_coverageTracker31686445_
					cover: (57 to: 62)
					declaredAt: (14 to: 19)
					by: callee.
				#_coverageTracker31686445_
					coverAll:
						{64 to: 82}
					evaluating: [
						receiver2 isFromSameRegionAs:
							(#_coverageTracker31686445_
								cover: (84 to: 89)
								declaredAt: (42 to: 47)
								by: caller) ]
					thatSends: #isFromSameRegionAs:
					to: receiver2 ] value ]]
		thatSends: #and:
		to: receiver3 ] value.! !
!Behavior method!
cost
	#_coverageTracker31686451_ markAsExecuted.
	[ | receiver13 |
	receiver13 := [ | receiver1 |
	receiver1 := #_coverageTracker31686451_
		cover: (7 to: 10)
		declaredAt: (7 to: 10)
		by: call.
	#_coverageTracker31686451_
		coverAll:
			{12 to: 23}
		evaluating: [ receiver1 isOnAWeekDay ]
		thatSends: #isOnAWeekDay
		to: receiver1 ] value.
	#_coverageTracker31686451_
		coverAll:
			{25 to: 31. 209 to: 216}
		evaluating: [
			receiver13
				ifTrue: [
					[ | receiver9 |
					receiver9 := [ | receiver2 |
					receiver2 := #_coverageTracker31686451_
						cover: (37 to: 40)
						declaredAt: (7 to: 10)
						by: call.
					#_coverageTracker31686451_
						coverAll:
							{42 to: 61}
						evaluating: [ receiver2 isDuringWorkingHours ]
						thatSends: #isDuringWorkingHours
						to: receiver2 ] value.
					#_coverageTracker31686451_
						coverAll:
							{63 to: 69. 133 to: 140}
						evaluating: [
							receiver9
								ifTrue: [ ^ [ | receiver5 |
									receiver5 := [ | receiver3 |
									receiver3 := #_coverageTracker31686451_
										cover: (73 to: 76)
										declaredAt: (7 to: 10)
										by: call.
									#_coverageTracker31686451_
										coverAll:
											{78 to: 85}
										evaluating: [ receiver3 duration ]
										thatSends: #duration
										to: receiver3 ] value.
									#_coverageTracker31686451_
										coverAll:
											{87 to: 87}
										evaluating: [
											receiver5 *
												[ | receiver4 |
												receiver4 := #_coverageTracker31686451_
													coverAll:
														{89 to: 101}
													by: TelephoneLine.
												#_coverageTracker31686451_
													coverAll:
														{103 to: 121}
													evaluating: [ receiver4 weekDayWorkHoursFee ]
													thatSends: #weekDayWorkHoursFee
													to: receiver4 ] value ]
										thatSends: #*
										to: receiver5 ] value ]
								ifFalse: [ ^ [ | receiver8 |
									receiver8 := [ | receiver6 |
									receiver6 := #_coverageTracker31686451_
										cover: (144 to: 147)
										declaredAt: (7 to: 10)
										by: call.
									#_coverageTracker31686451_
										coverAll:
											{149 to: 156}
										evaluating: [ receiver6 duration ]
										thatSends: #duration
										to: receiver6 ] value.
									#_coverageTracker31686451_
										coverAll:
											{158 to: 158}
										evaluating: [
											receiver8 *
												[ | receiver7 |
												receiver7 := #_coverageTracker31686451_
													coverAll:
														{160 to: 172}
													by: TelephoneLine.
												#_coverageTracker31686451_
													coverAll:
														{175 to: 196}
													evaluating: [ receiver7 weekDayNonWorkHoursFee ]
													thatSends: #weekDayNonWorkHoursFee
													to: receiver7 ] value ]
										thatSends: #*
										to: receiver8 ] value ]]
						thatSends: #ifTrue:ifFalse:
						to: receiver9 ] value ]
				ifFalse: [ ^ [ | receiver12 |
					receiver12 := [ | receiver10 |
					receiver10 := #_coverageTracker31686451_
						cover: (220 to: 223)
						declaredAt: (7 to: 10)
						by: call.
					#_coverageTracker31686451_
						coverAll:
							{225 to: 232}
						evaluating: [ receiver10 duration ]
						thatSends: #duration
						to: receiver10 ] value.
					#_coverageTracker31686451_
						coverAll:
							{234 to: 234}
						evaluating: [
							receiver12 *
								[ | receiver11 |
								receiver11 := #_coverageTracker31686451_
									coverAll:
										{236 to: 248}
									by: TelephoneLine.
								#_coverageTracker31686451_
									coverAll:
										{250 to: 264}
									evaluating: [ receiver11 weekendHoursFee ]
									thatSends: #weekendHoursFee
									to: receiver11 ] value ]
						thatSends: #*
						to: receiver12 ] value ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver13 ] value.! !
!Behavior method!
totalDue
	#_coverageTracker31686468_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 := [ | receiver4 |
	receiver4 := #_coverageTracker31686468_
		cover: (13 to: 25)
		declaredAt: (13 to: 25)
		by: outgoingCalls.
	#_coverageTracker31686468_
		coverAll:
			{27 to: 30. 73 to: 80}
		evaluating: [
			receiver4
				sum: [ :aCall |
					[ | receiver2 |
					receiver2 := [ | receiver1 |
					receiver1 := #_coverageTracker31686468_
						coverAll:
							{44 to: 53}
						by: CallBiller.
					#_coverageTracker31686468_
						coverAll:
							{55 to: 58}
						evaluating: [
							receiver1 for:
								(#_coverageTracker31686468_
									cover: (60 to: 64)
									declaredAt: (35 to: 39)
									by: aCall) ]
						thatSends: #for:
						to: receiver1 ] value.
					#_coverageTracker31686468_
						coverAll:
							{67 to: 70}
						evaluating: [ receiver2 cost ]
						thatSends: #cost
						to: receiver2 ] value ]
				ifEmpty: [
					[ | receiver3 |
					receiver3 := #_coverageTracker31686468_
						coverAll:
							{83 to: 83}
						byLiteralOrPseudoVariable: 0.
					#_coverageTracker31686468_
						coverAll:
							{84 to: 84}
						evaluating: [
							receiver3 *
								(#_coverageTracker31686468_
									coverAll:
										{85 to: 90}
									by: dollar) ]
						thatSends: #*
						to: receiver3 ] value ]]
		thatSends: #sum:ifEmpty:
		to: receiver4 ] value.
	#_coverageTracker31686468_
		coverAll:
			{94 to: 94}
		evaluating: [
			receiver6 +
				[ | receiver5 |
				receiver5 := #_coverageTracker31686468_
					coverAll:
						{96 to: 108}
					by: TelephoneLine.
				#_coverageTracker31686468_
					coverAll:
						{110 to: 124}
					evaluating: [ receiver5 basicMonthlyFee ]
					thatSends: #basicMonthlyFee
					to: receiver5 ] value ]
		thatSends: #+
		to: receiver6 ] value.! !
!Behavior method!
isDuringWorkingHours
	#_coverageTracker31686478_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 := [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker31686478_
		coverAll:
			{27 to: 27}
		byLiteralOrPseudoVariable: 8.
	#_coverageTracker31686478_
		coverAll:
			{28 to: 28}
		evaluating: [
			receiver1 :
				(#_coverageTracker31686478_
					coverAll:
						{29 to: 30}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #:
		to: receiver1 ] value.
	#_coverageTracker31686478_
		coverAll:
			{32 to: 33}
		evaluating: [
			receiver2 <=
				(#_coverageTracker31686478_
					cover: (35 to: 43)
					declaredAt: (35 to: 43)
					by: timeOfDay) ]
		thatSends: #<=
		to: receiver2 ] value.
	#_coverageTracker31686478_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver5 and: [
				[ | receiver4 |
				receiver4 := #_coverageTracker31686478_
					cover: (52 to: 60)
					declaredAt: (35 to: 43)
					by: timeOfDay.
				#_coverageTracker31686478_
					coverAll:
						{62 to: 63}
					evaluating: [
						receiver4 <=
							[ | receiver3 |
							receiver3 := #_coverageTracker31686478_
								coverAll:
									{66 to: 67}
								byLiteralOrPseudoVariable: 20.
							#_coverageTracker31686478_
								coverAll:
									{68 to: 68}
								evaluating: [
									receiver3 :
										(#_coverageTracker31686478_
											coverAll:
												{69 to: 70}
											byLiteralOrPseudoVariable: 0) ]
								thatSends: #:
								to: receiver3 ] value ]
					thatSends: #<=
					to: receiver4 ] value ]]
		thatSends: #and:
		to: receiver5 ] value.! !
!Behavior method!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration
	#_coverageTracker31686484_ markAsExecuted.
	#_coverageTracker31686484_
		cover: (106 to: 111)
		declaredAt: (106 to: 111)
		by:
			(caller := #_coverageTracker31686484_
				cover: (116 to: 127)
				declaredAt: (17 to: 28)
				by: aCallingLine).
	#_coverageTracker31686484_
		cover: (131 to: 136)
		declaredAt: (131 to: 136)
		by:
			(callee := #_coverageTracker31686484_
				cover: (141 to: 157)
				declaredAt: (34 to: 50)
				by: aLineThatIsCalled).
	#_coverageTracker31686484_
		cover: (161 to: 172)
		declaredAt: (161 to: 172)
		by:
			(dayOfTheWeek := #_coverageTracker31686484_
				cover: (177 to: 189)
				declaredAt: (56 to: 68)
				by: aDayOfTheWeek).
	#_coverageTracker31686484_
		cover: (193 to: 201)
		declaredAt: (193 to: 201)
		by:
			(timeOfDay := #_coverageTracker31686484_
				cover: (206 to: 215)
				declaredAt: (74 to: 83)
				by: aTimeOfDay).
	#_coverageTracker31686484_
		cover: (219 to: 226)
		declaredAt: (219 to: 226)
		by:
			(duration := #_coverageTracker31686484_
				cover: (231 to: 243)
				declaredAt: (90 to: 102)
				by: aCallDuration).! !
!Behavior method!
isOnAWeekDay
	#_coverageTracker31686490_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker31686490_
		cover: (16 to: 27)
		declaredAt: (16 to: 27)
		by: dayOfTheWeek.
	#_coverageTracker31686490_
		coverAll:
			{29 to: 37}
		evaluating: [ receiver1 isWeekDay ]
		thatSends: #isWeekDay
		to: receiver1 ] value.! !
!Behavior method!
cost
	#_coverageTracker31686493_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker31686493_
		cover: (8 to: 11)
		declaredAt: (8 to: 11)
		by: call.
	#_coverageTracker31686493_
		coverAll:
			{13 to: 20}
		evaluating: [ receiver1 duration ]
		thatSends: #duration
		to: receiver1 ] value.
	#_coverageTracker31686493_
		coverAll:
			{22 to: 22}
		evaluating: [
			receiver3 *
				[ | receiver2 |
				receiver2 := #_coverageTracker31686493_
					coverAll:
						{24 to: 36}
					by: TelephoneLine.
				#_coverageTracker31686493_
					coverAll:
						{38 to: 48}
					evaluating: [ receiver2 nationalFee ]
					thatSends: #nationalFee
					to: receiver2 ] value ]
		thatSends: #*
		to: receiver3 ] value.! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:44:29'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:44:29'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:44:29'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:44:29'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:44:29'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:44:29'!
PASSED!
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:48:15'!
isCallDuringWorkingHours
	^ (8:00 <= call timeOfDay) and: [call timeOfDay <= (20:00)]! !
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:48:31'!
workingHoursStart

	^ 8:00! !
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:48:32' prior: 50543507!
isCallDuringWorkingHours
	^ (self workingHoursStart <= call timeOfDay) and: [call timeOfDay <= (20:00)]! !
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:48:42'!
workingHoursEnd

	^ 20:00! !
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:48:42' prior: 50543516!
isCallDuringWorkingHours
	^ (self workingHoursStart <= call timeOfDay) and: [call timeOfDay <= (self workingHoursEnd)]! !
!Call methodsFor: 'duration' stamp: 'AS 3/30/2025 01:48:56'!
timeOfDay
	^timeOfDay ! !
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:49:16' prior: 50542556 overrides: 50542552!
cost
	call isOnAWeekDay ifTrue: [
		self isCallDuringWorkingHours ifTrue: [^call duration * TelephoneLine weekDayWorkHoursFee]
								 ifFalse: [^call duration * TelephoneLine  weekDayNonWorkHoursFee]]
					    ifFalse: [^call duration * TelephoneLine weekendHoursFee].! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:49:19'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:49:19'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:49:19'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:49:19'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:49:19'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:49:19'!
PASSED!

!methodRemoval: Call #isDuringWorkingHours stamp: 'AS 3/30/2025 01:49:26'!
isDuringWorkingHours

	^ (8:00 <= timeOfDay) and: [timeOfDay <= (20:00)]!
!LocalCallBiller class methodsFor: 'billing' stamp: 'AS 3/30/2025 01:49:56'!
workingHoursEnd

	^ 20:00! !

!methodRemoval: LocalCallBiller #workingHoursEnd stamp: 'AS 3/30/2025 01:49:56'!
workingHoursEnd

	^ 20:00!
!LocalCallBiller class methodsFor: 'billing' stamp: 'AS 3/30/2025 01:49:59'!
workingHoursStart

	^ 8:00! !

!methodRemoval: LocalCallBiller #workingHoursStart stamp: 'AS 3/30/2025 01:49:59'!
workingHoursStart

	^ 8:00!
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 01:50:06' prior: 50543526!
isCallDuringWorkingHours
	^ (self class workingHoursStart <= call timeOfDay) and: [call timeOfDay <= (self class workingHoursEnd)]! !

!testRun: #TelephoneBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:50:10'!
PASSED!

!testRun: #TelephoneBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:10'!
PASSED!

!testRun: #TelephoneBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:10'!
PASSED!

!testRun: #TelephoneBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:10'!
PASSED!

!testRun: #TelephoneBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:10'!
PASSED!

!testRun: #TelephoneBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:10'!
PASSED!

!classRenamed: #TelephoneBillTest as: #TelephoneBillingTest stamp: 'AS 3/30/2025 01:50:27'!
Smalltalk renameClassNamed: #TelephoneBillTest as: #TelephoneBillingTest!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:50:30'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:30'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:30'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:30'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:30'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:50:30'!
PASSED!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:50:53' prior: 50541686!
todo
	'
	- tiempos de los tests en funcion de work hours definidas en telephoneline o algun lado (en vez de 8:00, workHourStart + 1 minute)
	- renombrar colabs de line agregandoles local
	- mejorar la rep del dia en que se llama (que sea una fecha completa y pueda elegir si es weekday o weekend)'! !

!methodRemoval: TelephoneBillingTest #comments stamp: 'AS 3/30/2025 01:51:33'!
comments
	'No modelo como una linea llama a la otra (entiendo que excede lo pedido, que es solo facturar), por lo que seteo las llamadas desde los tests.'!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:52:33' prior: 50541629!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: LocalCallBiller workingHoursStart + 1 * minute for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:52:34'!
ERROR!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:53:01' prior: 50543602!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: (LocalCallBiller workingHoursStart next: 1* minute) for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:04'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:53:04'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:04'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:04'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:04'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:04'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:04'!
PASSED!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:53:08' prior: 50543621!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: (LocalCallBiller workingHoursStart next: 1 * minute) for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:08'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:53:08'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:08'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:08'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:08'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:08'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:08'!
PASSED!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:53:50' prior: 50541248!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: (LocalCallBiller workingHoursStart previous:  1 * minute) for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:51'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:53:51'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:51'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:51'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:51'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:51'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:53:51'!
PASSED!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:15' prior: 50541266!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 9:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:21' prior: 50541309!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 9:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:25' prior: 50541292!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: 9:02 for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:26'!
PASSED!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:41'!
arbritraryTimeOfDay

	^ 9:02! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:41' prior: 50543695!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: self arbritraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:41' prior: 50543712!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: self arbritraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:41' prior: 50543678!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: self arbritraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:42'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:54:42'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:42'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:42'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:42'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:42'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:42'!
PASSED!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:54'!
arbitraryTimeOfDay

	^ 9:02! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:54' prior: 50543750!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:54' prior: 50543768!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 01:54:54' prior: 50543733!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Saturday at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !

!methodRemoval: TelephoneBillingTest #arbritraryTimeOfDay stamp: 'AS 3/30/2025 01:54:54'!
arbritraryTimeOfDay

	^ 9:02!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:57'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:54:57'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:57'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:57'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:57'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:57'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:54:57'!
PASSED!
!CallBiller class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:55:49' prior: 50542519!
for: aCallToBill
	(self allSubclasses detect: [:aSubclass | aSubclass canHandle: aCallToBill]) new initializeFor: aCallToBill.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:56:00'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:00'!
ERROR!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:00'!
ERROR!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:00'!
ERROR!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:00'!
ERROR!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:00'!
ERROR!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:01'!
ERROR!
!CallBiller class methodsFor: 'handling' stamp: 'AS 3/30/2025 01:56:23'!
canHandle: aCallToBill 
	self shouldBeImplemented.! !
!CallBiller class methodsFor: 'handling' stamp: 'AS 3/30/2025 01:56:32' prior: 50543854!
canHandle: aCallToBill 
	self subclassResponsibility ! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:56:34'!
ERROR!
!InternationalCallBiller class methodsFor: 'nil' stamp: 'AS 3/30/2025 01:57:11' overrides: 50543859!
canHandle: aCallToBill
	^aCallToBill isInternational.! !
!LocalCallBiller class methodsFor: 'billing' stamp: 'AS 3/30/2025 01:57:26' overrides: 50543859!
canHandle: aCallToBill
	^aCallToBill isLocal.! !
!NationalCallBiller class methodsFor: 'nil' stamp: 'AS 3/30/2025 01:57:34' overrides: 50543859!
canHandle: aCallToBill
	^aCallToBill isNational.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:57:37'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:57:37'!
ERROR!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:57:37'!
ERROR!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:57:37'!
ERROR!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:57:37'!
ERROR!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:57:37'!
ERROR!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:57:39'!
ERROR!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 01:58:52'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:58:52'!
ERROR!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:58:52'!
ERROR!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:58:52'!
ERROR!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:58:52'!
ERROR!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 01:58:52'!
ERROR!

(self allSubclasses detect: [:aSubclass | aSubclass canHandle: aCallToBill])!
!CallBiller class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 01:59:52' prior: 50543847!
for: aCallToBill
	^(self allSubclasses detect: [:aSubclass | aSubclass canHandle: aCallToBill]) new initializeFor: aCallToBill.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 02:00:02'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 02:00:02'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 02:00:02'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 02:00:02'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 02:00:02'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 02:00:02'!
PASSED!

----SNAPSHOT----(30 March 2025 02:02:02) CuisUniversity-6350.image priorSource: 6752050!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 02:05:59'!
toDo
	'
	- mejorar la rep del dia en que se llama (que sea una fecha completa y pueda elegir si es weekday o weekend)'! !

----QUIT----(30 March 2025 02:06:06) CuisUniversity-6350.image priorSource: 6791618!

----STARTUP---- (30 March 2025 17:59:12) as /home/andisici/Documents/Trabajo/mercap/cuisMercap/cuis/linux64/CuisUniversity-6350.image!


!methodRemoval: TelephoneBillingTest #todo stamp: 'AS 3/30/2025 18:02:39'!
todo
	'
	- tiempos de los tests en funcion de work hours definidas en telephoneline o algun lado (en vez de 8:00, workHourStart + 1 minute)
	- renombrar colabs de line agregandoles local
	- mejorar la rep del dia en que se llama (que sea una fecha completa y pueda elegir si es weekday o weekend)'!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:02:44'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:02:44'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:02:44'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:02:44'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:02:44'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:02:44'!
PASSED!

!classDefinition: #CallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 18:05:09'!
Object subclass: #CallBiller
	instanceVariableNames: 'call'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 18:06:35' prior: 50542440!
totalDue
	^(outgoingCalls sum: [ :aCall | (CallBiller for: aCall) cost] ifEmpty: [0*dollar]) + self class basicMonthlyFee.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:06:35'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:06:35'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:06:35'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:06:35'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:06:35'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:06:35'!
PASSED!
!InternationalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 18:08:20' prior: 50542628 overrides: 50542552!
cost
	^call duration * call caller class internationalFee! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:08:22'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:22'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:22'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:22'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:22'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:22'!
ERROR!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:22'!
ERROR!
!Call methodsFor: 'caller' stamp: 'AS 3/30/2025 18:08:33'!
caller
	self shouldBeImplemented.
	^caller! !
!Call methodsFor: 'caller' stamp: 'AS 3/30/2025 18:08:36' prior: 50543937!
caller
	^caller! !

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:37'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:08:39'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:39'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:39'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:39'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:39'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:39'!
PASSED!
!NationalCallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:08:51' prior: 50542633 overrides: 50542552!
cost
	^call duration * call caller class nationalFee! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:08:54'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:54'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:54'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:54'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:54'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:08:54'!
PASSED!
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 18:09:02' prior: 50543537 overrides: 50542552!
cost
	call isOnAWeekDay ifTrue: [
		self isCallDuringWorkingHours ifTrue: [^call duration * call caller class weekDayWorkHoursFee]
								 ifFalse: [^call duration * call caller class  weekDayNonWorkHoursFee]]
					    ifFalse: [^call duration * call caller class weekendHoursFee].! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:09:03'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:09:03'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:09:03'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:09:03'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:09:03'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:09:03'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:09:19'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:09:19'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:09:19'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:09:19'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:09:19'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:09:19'!
PASSED!

LocalCallBiller subclass: #WeekendLocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #WeekendLocalCallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 18:10:52'!
LocalCallBiller subclass: #WeekendLocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

LocalCallBiller subclass: #WeekDayWorkingHoursLocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #WeekDayWorkingHoursLocalCallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 18:11:11'!
LocalCallBiller subclass: #WeekDayWorkingHoursLocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

LocalCallBiller subclass: #WeekDayNonWorkingHoursLocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #WeekDayNonWorkingHoursLocalCallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 18:11:21'!
LocalCallBiller subclass: #WeekDayNonWorkingHoursLocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!WeekDayWorkingHoursLocalCallBiller methodsFor: 'nil' stamp: 'AS 3/30/2025 18:11:57' overrides: 50543952!
cost

	^call duration * call caller class weekDayWorkHoursFee! !
!WeekDayNonWorkingHoursLocalCallBiller methodsFor: 'nil' stamp: 'AS 3/30/2025 18:12:30' overrides: 50543952!
cost

	^call duration * call caller class  weekDayNonWorkHoursFee! !
!WeekendLocalCallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:12:41' overrides: 50543952!
cost

	^call duration * call caller class weekendHoursFee! !
!WeekDayWorkingHoursLocalCallBiller class methodsFor: 'nil' stamp: 'AS 3/30/2025 18:14:37' overrides: 50543869!
canHandle: aCallToBill
	^aCallToBill isLocal and: [aCallToBill isOnAWeekDay and: [aCallToBill isDuringWorkingHours] ].! !
!WeekDayWorkingHoursLocalCallBiller class methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:16:14' prior: 50544025 overrides: 50543869!
canHandle: aCallToBill
	^aCallToBill isLocal and: [(self isCallOnAWeekDay: aCallToBill) and: [self isCallDuringWorkingHours: aCallToBill ] ].! !
!WeekDayNonWorkingHoursLocalCallBiller class methodsFor: 'nil' stamp: 'AS 3/30/2025 18:16:49' overrides: 50543869!
canHandle: aCallToBill
	^aCallToBill isLocal and: [(self isCallOnAWeekDay: aCallToBill) and: [(self isCallDuringWorkingHours: aCallToBill) not ] ].! !
!WeekendLocalCallBiller class methodsFor: 'nil' stamp: 'AS 3/30/2025 18:17:24' overrides: 50543869!
canHandle: aCallToBill
	^aCallToBill isLocal and: [(self isCallOnAWeekDay: aCallToBill) not]! !
!LocalCallBiller class methodsFor: 'billing' stamp: 'AS 3/30/2025 18:18:02' prior: 50543869 overrides: 50543859!
canHandle: aCallToBill
	^false! !
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 18:18:31' prior: 50543952 overrides: 50542552!
cost
	self subclassResponsibility ! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:18:37'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:18:37'!
ERROR!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:18:37'!
ERROR!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:18:37'!
ERROR!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:18:37'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:18:37'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:18:39'!
ERROR!
!LocalCallBiller class methodsFor: 'querying' stamp: 'AS 3/30/2025 18:19:08'!
isCallOnAWeekDay: aCallToBill 
	self shouldBeImplemented.! !
!LocalCallBiller class methodsFor: 'querying' stamp: 'AS 3/30/2025 18:19:46' prior: 50544067!
isCallOnAWeekDay: aCallToBill 
	^aCallToBill dayOfTheWeek isWeekDay! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:19:56'!
ERROR!
!Call methodsFor: 'day' stamp: 'AS 3/30/2025 18:20:04'!
dayOfTheWeek
	self shouldBeImplemented.
	^dayOfTheWeek! !
!Call methodsFor: 'day' stamp: 'AS 3/30/2025 18:20:07' prior: 50544076!
dayOfTheWeek
	^dayOfTheWeek! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:20:08'!
ERROR!
!LocalCallBiller class methodsFor: 'querying' stamp: 'AS 3/30/2025 18:20:20'!
isCallDuringWorkingHours: aCallToBill 
	self shouldBeImplemented.! !
!LocalCallBiller class methodsFor: 'querying' stamp: 'AS 3/30/2025 18:20:57' prior: 50544085!
isCallDuringWorkingHours: aCallToBill 
	^ (self workingHoursStart <= aCallToBill timeOfDay) and: [aCallToBill timeOfDay <= (self workingHoursEnd)]! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:20:58'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:21:00'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:21:00'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:21:00'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:21:00'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:21:00'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:21:00'!
PASSED!

!methodRemoval: LocalCallBiller #isCallDuringWorkingHours stamp: 'AS 3/30/2025 18:21:13'!
isCallDuringWorkingHours
	^ (self class workingHoursStart <= call timeOfDay) and: [call timeOfDay <= (self class workingHoursEnd)]!

!methodRemoval: Call #isOnAWeekDay stamp: 'AS 3/30/2025 18:22:36'!
isOnAWeekDay
	^dayOfTheWeek isWeekDay!

----SNAPSHOT----(30 March 2025 18:23:42) CuisUniversity-6350.image priorSource: 6791929!
!WeekDayNonWorkingHoursLocalCallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:24:35' prior: 50544013 overrides: 50544063!
cost

	^call duration * call caller class weekDayNonWorkHoursFee! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:24:36'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:24:36'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:24:36'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:24:36'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:24:36'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:24:36'!
PASSED!
!CallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 18:25:06' prior: 50542552!
cost
	
	^call duration * self fee! !
!CallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 18:25:17'!
fee
	^self subclassResponsibility ! !
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 18:25:25' overrides: 50544123!
fee
	self subclassResponsibility ! !
!CallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 18:25:30' prior: 50544123!
fee
	self subclassResponsibility ! !
!InternationalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 18:25:49' overrides: 50544132!
fee

	^ call caller class internationalFee! !
!InternationalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 18:25:49' prior: 50543933 overrides: 50544119!
cost
	^call duration * self fee! !
!NationalCallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:26:04' overrides: 50544132!
fee

	^ call caller class nationalFee! !
!NationalCallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:26:04' prior: 50543946 overrides: 50544119!
cost
	^call duration * self fee! !
!WeekDayNonWorkingHoursLocalCallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:26:21' overrides: 50544128!
fee

	^ call caller class weekDayNonWorkHoursFee! !
!WeekDayNonWorkingHoursLocalCallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:26:21' prior: 50544114 overrides: 50544063!
cost

	^call duration * self fee! !
!WeekDayWorkingHoursLocalCallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:26:28' overrides: 50544128!
fee

	^ call caller class weekDayWorkHoursFee! !
!WeekDayWorkingHoursLocalCallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:26:28' prior: 50544007 overrides: 50544063!
cost

	^call duration * self fee! !
!WeekendLocalCallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:26:34' overrides: 50544128!
fee

	^ call caller class weekendHoursFee! !
!WeekendLocalCallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:26:34' prior: 50544019 overrides: 50544063!
cost

	^call duration * self fee! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:26:36'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:26:36'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:26:36'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:26:36'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:26:36'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:26:36'!
PASSED!

!methodRemoval: InternationalCallBiller #cost stamp: 'AS 3/30/2025 18:26:43'!
cost
	^call duration * self fee!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:26:45'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:26:45'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:26:45'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:26:45'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:26:45'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:26:45'!
PASSED!

!methodRemoval: LocalCallBiller #cost stamp: 'AS 3/30/2025 18:26:55'!
cost
	self subclassResponsibility !

!methodRemoval: WeekDayNonWorkingHoursLocalCallBiller #cost stamp: 'AS 3/30/2025 18:27:04'!
cost

	^call duration * self fee!

!methodRemoval: WeekDayWorkingHoursLocalCallBiller #cost stamp: 'AS 3/30/2025 18:27:06'!
cost

	^call duration * self fee!

!methodRemoval: WeekendLocalCallBiller #cost stamp: 'AS 3/30/2025 18:27:10'!
cost

	^call duration * self fee!

!methodRemoval: NationalCallBiller #cost stamp: 'AS 3/30/2025 18:27:14'!
cost
	^call duration * self fee!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:27:16'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:27:16'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:27:16'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:27:16'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:27:16'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:27:16'!
PASSED!

LocalCallBiller subclass: #WeekDayLocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #WeekDayLocalCallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 18:28:46'!
LocalCallBiller subclass: #WeekDayLocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

WeekDayLocalCallBiller subclass: #WeekDayNonWorkingHoursLocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #WeekDayNonWorkingHoursLocalCallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 18:28:51'!
WeekDayLocalCallBiller subclass: #WeekDayNonWorkingHoursLocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

WeekDayLocalCallBiller subclass: #WeekDayWorkingHoursLocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #WeekDayWorkingHoursLocalCallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 18:28:58'!
WeekDayLocalCallBiller subclass: #WeekDayWorkingHoursLocalCallBiller
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:29:05'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:05'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:05'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:05'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:05'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:05'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:29:07'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:07'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:07'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:07'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:07'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:07'!
PASSED!
!WeekDayLocalCallBiller class methodsFor: 'nil' stamp: 'AS 3/30/2025 18:29:19' overrides: 50544058!
canHandle: aCallToBill
	^false! !
!WeekDayLocalCallBiller class methodsFor: 'querying' stamp: 'AS 3/30/2025 18:29:48' overrides: 50544091!
isCallDuringWorkingHours: aCallToBill 
	^ (self workingHoursStart <= aCallToBill timeOfDay) and: [aCallToBill timeOfDay <= (self workingHoursEnd)]! !

!methodRemoval: LocalCallBiller class #isCallDuringWorkingHours: stamp: 'AS 3/30/2025 18:29:48'!
isCallDuringWorkingHours: aCallToBill 
	^ (self workingHoursStart <= aCallToBill timeOfDay) and: [aCallToBill timeOfDay <= (self workingHoursEnd)]!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:29:50'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:50'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:50'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:50'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:50'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:29:50'!
PASSED!
!WeekDayLocalCallBiller class methodsFor: 'working hours' stamp: 'AS 3/30/2025 18:30:03' overrides: 50543553!
workingHoursEnd

	^ 20:00! !

!methodRemoval: LocalCallBiller class #workingHoursEnd stamp: 'AS 3/30/2025 18:30:03'!
workingHoursEnd

	^ 20:00!
!WeekDayLocalCallBiller class methodsFor: 'working hours' stamp: 'AS 3/30/2025 18:30:11' overrides: 50543560!
workingHoursStart

	^ 8:00! !

!methodRemoval: LocalCallBiller class #workingHoursStart stamp: 'AS 3/30/2025 18:30:11'!
workingHoursStart

	^ 8:00!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:30:25'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:30:25'!
ERROR!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:30:25'!
ERROR!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:30:26'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:30:26'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:30:26'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:30:27'!
ERROR!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:30:48' prior: 50543640!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: (WeekDayLocalCallBiller workingHoursStart next: 1 * minute) for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:30:50'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:30:51'!
ERROR!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:30:57' prior: 50543659!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: Monday at: (WeekDayLocalCallBiller workingHoursStart previous:  1 * minute) for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:30:59'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 18:31:00'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:31:00'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:31:00'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:31:00'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:31:00'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 18:31:00'!
PASSED!
!WeekDayLocalCallBiller methodsFor: 'nil' stamp: 'AS 3/30/2025 18:31:10' overrides: 50544128!
fee
	self subclassResponsibility ! !

----SNAPSHOT----(30 March 2025 18:32:28) CuisUniversity-6350.image priorSource: 6798655!

Date today!

Date today month !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:54:55'!
weekDay

	^ Monday! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:54:55' prior: 50544313!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: (WeekDayLocalCallBiller workingHoursStart previous:  1 * minute) for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 18:54:55' prior: 50544294!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: (WeekDayLocalCallBiller workingHoursStart next: 1 * minute) for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 18:56:11' prior: 50544340!
weekDay

	^ Date today! !

Date today!

Date today weekday!
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 18:57:15' prior: 50544383!
weekDay

	^ self closestWeekDayTo: Date today ! !

Date today!

Date today isWeekDay !

Date today!
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 19:01:11'!
closestWeekDayTo: aDate
	| date |
	date := aDate.
	(date weekdayIndex between: 1 and: 5) whileFalse: [date := date next].
	^date! !

TelephoneBillingTest closestWeekDayTo: Date today!

TelephoneBillingTest new closestWeekDayTo: Date today!
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 19:02:13' prior: 50544394!
closestWeekDayTo: aDate
	| date |
	date := aDate.
	[date weekdayIndex between: 1 and: 5] whileFalse: [date := date next].
	^date! !

TelephoneBillingTest new closestWeekDayTo: Date today!

Date today!

(TelephoneBillingTest new closestWeekDayTo: Date today) weekday !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 19:03:41'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:03:41'!
ERROR!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:03:41'!
ERROR!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:03:41'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:03:41'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:03:41'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:03:42'!
ERROR!
!Date methodsFor: 'public protocol' stamp: 'AS 3/30/2025 19:04:51'!
isWeekDay
	self shouldBeImplemented.! !
!Date methodsFor: 'public protocol' stamp: 'AS 3/30/2025 19:05:05' prior: 50544416!
isWeekDay
	self weekdayIndex between: 1 and: 5.! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:05:06'!
ERROR!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:05:18'!
ERROR!
!Date methodsFor: 'public protocol' stamp: 'AS 3/30/2025 19:06:06' prior: 50544420!
isWeekDay
	^self weekdayIndex between: 1 and: 5.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 19:06:50'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:06:50'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:06:50'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:06:50'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:06:50'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:06:50'!
PASSED!

!classDefinition: #Call category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 19:07:12'!
Object subclass: #Call
	instanceVariableNames: 'caller callee date timeOfDay duration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 19:07:12' prior: 50544081!
dayOfTheWeek
	^date! !
!Call methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 19:07:12' prior: 50542607!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDayOfTheWeek at: aTimeOfDay for: aCallDuration 
	caller := aCallingLine.
	callee := aLineThatIsCalled.
	date := aDayOfTheWeek.
	timeOfDay := aTimeOfDay.
	duration := aCallDuration.! !
!Call methodsFor: 'day' stamp: 'AS 3/30/2025 19:07:19'!
date
	^date! !
!LocalCallBiller class methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 19:07:19' prior: 50544072!
isCallOnAWeekDay: aCallToBill 
	^aCallToBill date isWeekDay! !

!methodRemoval: Call #dayOfTheWeek stamp: 'AS 3/30/2025 19:07:19'!
dayOfTheWeek
	^date!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 19:07:25'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:07:25'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:07:25'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:07:25'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:07:25'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:07:25'!
PASSED!

Time now!

Time now!

9:02!

TimeOfDay now!

	^ TimeOfDay now!
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 19:10:41' prior: 50543785!
arbitraryTimeOfDay

	^ TimeOfDay now! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 19:10:42'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:10:42'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:10:42'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:10:42'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:10:42'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:10:42'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:11:08'!
weekendDay

	^ Saturday! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:11:08' prior: 50543826!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:11:08' prior: 50543790!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:11:08' prior: 50543808!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 19:11:30' prior: 50544470!
weekendDay

	^self closestWeekendDayTo: Date today ! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 19:11:32'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:11:32'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:11:32'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:11:32'!
ERROR!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:11:32'!
ERROR!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:11:32'!
ERROR!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:11:34'!
ERROR!
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 19:11:40'!
closestWeekendDayTo: aRenameMe1 
	self shouldBeImplemented.! !
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 19:11:46' prior: 50544531!
closestWeekendDayTo: aDate 
	self shouldBeImplemented.! !
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 19:12:33' prior: 50544536!
closestWeekendDayTo: aDate 
	| date |
	date := aDate.
	[date weekdayIndex between: 6 and: 7] whileFalse: [date := date next].
	^date! !

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:12:33'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 19:12:41'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:12:41'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:12:41'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:12:41'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:12:41'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:12:41'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:13:31'!
weekDayWorkingHoursTime

	^ WeekDayLocalCallBiller workingHoursStart next: 1 * minute! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:13:31' prior: 50544364!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: (self weekDayWorkingHoursTime) for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:13:36' prior: 50544554!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:13:36'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 19:13:36'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:13:36'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:13:36'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:13:36'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:13:36'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:13:36'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:13:51'!
weekDayNonWorkingHoursTime

	^ WeekDayLocalCallBiller workingHoursStart previous:  1 * minute! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:13:51' prior: 50544344!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: (self weekDayNonWorkingHoursTime) for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:13:56' prior: 50544595!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:13:56'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 19:13:56'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:13:56'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:13:56'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:13:56'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:13:56'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:13:56'!
PASSED!

----SNAPSHOT----(30 March 2025 19:15:48) CuisUniversity-6350.image priorSource: 6805924!

Date now!

Date today!

Date today firstDayOfMonth !

Date today firstDayOfMonth!

Date today firstDayOfMonth!

Date today firstDayOfMonth !

Date today!

Date today!

Date today!

self firstDayOfMonth !

self next: 2!

self next !

self next next!

self next next next!

(self next next next) firstDayOfMonth !

Date today month!

Date today month!

Date today month!

Date today month class!

Date today month!

Date today!

Date today month!

Date newDay: 1 month: (Date today month) year: (Date today year)!

Date newDay: 1 month: (Date today month) year: (Date today year)!

Date newDay: 1 month: (Date today month monthIndex ) year: (Date today year)!

Date newDay: 1 month: 3 year: 2025!

Date today month!

Date today month monthName !

Date today month monthIndex!

Date today year!

Date today year yearNumber !

Date newDay: 1 month: Date today month monthIndex year: Date today year yearNumber!
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 19:43:10' prior: 50544388!
weekDay

	^ self closestWeekDayTo: (Date newDay: 1 month: Date today month monthIndex year: Date today year yearNumber) ! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 19:43:10'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:43:10'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:43:10'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:43:10'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:43:10'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:43:10'!
PASSED!
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 19:43:18' prior: 50544526!
weekendDay

	^self closestWeekendDayTo: (Date newDay: 1 month: Date today month monthIndex year: Date today year yearNumber) ! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 19:43:18'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:43:18'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:43:18'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:43:18'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:43:18'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:43:18'!
PASSED!
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 19:43:32'!
firstDayOfTodaysMonth

	^ Date newDay: 1 month: Date today month monthIndex year: Date today year yearNumber! !
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 19:43:32' prior: 50544670!
weekendDay

	^self closestWeekendDayTo: (self firstDayOfTodaysMonth) ! !
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 19:43:32' prior: 50544663!
weekDay

	^ self closestWeekDayTo: (self firstDayOfTodaysMonth) ! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:45:51'!
test07
	
	| line localLine nationalLine internationalLine callDuration|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:46:12'!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	! !

!methodRemoval: TelephoneBillingTest #test07 stamp: 'AS 3/30/2025 19:46:12'!
test07
	
	| line localLine nationalLine internationalLine callDuration|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:46:59' prior: 50544713!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: nationalLine on: self wee at: self weekDayNonWorkingHoursTime for: callDuration.
	! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:48:30' prior: 50544474!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Date today at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:48:33'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:48:43'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:48:52' prior: 50544491!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 2 * minute.
	line1 calls: line2 on: Date today at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:50:02' prior: 50544775!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	callDuration := 2 * minute.
	line1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:50:05'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:50:11' prior: 50544792!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 2 * minute.
	line1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:50:14'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:50:41' prior: 50544750!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	line calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	line calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 19:55:31' prior: 50544844!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	line calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	line calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line totalDue equals: (line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendHoursFee + line nationalFee + line internationalFee))).
	! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 19:55:32'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:55:50'!
basicMonthlyFee
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:56:13' prior: 50544913!
basicMonthlyFee
	self class basicMonthlyFee ! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 19:56:15'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:56:21'!
weekDayWorkHoursFee
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:56:56' prior: 50544922!
weekDayWorkHoursFee
	self class weekDayWorkHoursFee ! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:57:02' prior: 50544927!
weekDayWorkHoursFee
	^self class weekDayWorkHoursFee ! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 19:57:06'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:57:11'!
weekDayNonWorkHoursFee
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:57:17' prior: 50544936!
weekDayNonWorkHoursFee
	^self class weekDayNonWorkHoursFee ! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 19:57:20'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:57:26'!
weekendHoursFee
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:57:51' prior: 50544946!
weekendHoursFee
	^self class weekendHoursFee ! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:58:00'!
weekendFee
	^self class weekendHoursFee ! !
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/30/2025 19:58:00'!
weekendFee
	^0.12 * dollar / minute! !
!TelephoneLine methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 19:58:00' prior: 50544951!
weekendHoursFee
	^self class weekendFee ! !
!WeekendLocalCallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 19:58:00' prior: 50544182 overrides: 50544128!
fee

	^ call caller class weekendFee! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 19:58:00' prior: 50544508!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 19:58:00' prior: 50544876!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	line calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	line calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line totalDue equals: (line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee + line nationalFee + line internationalFee))).
	! !
!TelephoneLine methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 19:58:00' prior: 50544955!
weekendFee
	^self class weekendFee ! !

!methodRemoval: TelephoneLine #weekendHoursFee stamp: 'AS 3/30/2025 19:58:00'!
weekendHoursFee
	^self class weekendFee !

!methodRemoval: TelephoneLine class #weekendHoursFee stamp: 'AS 3/30/2025 19:58:00'!
weekendHoursFee
	^0.12 * dollar / minute!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 19:58:23'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:58:23'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:58:23'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:58:23'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:58:23'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:58:23'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 19:58:23'!
ERROR!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 19:58:23'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:58:27'!
nationalFee
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:58:32' prior: 50545043!
nationalFee
	^self class nationalFee ! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 19:58:34'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:58:38'!
internationalFee
	self shouldBeImplemented.! !
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:58:45' prior: 50545051!
internationalFee
	^self class internationalFee ! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 19:58:47'!
ERROR!
!TelephoneLine methodsFor: 'billing' stamp: 'AS 3/30/2025 19:59:07' prior: 50544918!
basicMonthlyFee
	^self class basicMonthlyFee ! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 19:59:10'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:59:10'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:59:10'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:59:10'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:59:10'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 19:59:10'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 19:59:10'!
PASSED!

!methodRemoval: TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 19:59:27'!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	line calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	line calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line totalDue equals: (line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee + line nationalFee + line internationalFee))).
	!

Date today month!

Date today month asString!

!classDefinition: #Bill category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 20:14:13'!
Object subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 20:14:08'!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration bill|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	line calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	line calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := Bill for: line duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee + line nationalFee + line internationalFee))).
	self assert: bill basicMonthlyFee equals: line basicMonthlyFee.
	self assert: bill localUsage equals: (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee) * callDuration.
	self assert: bill nationalUsage equals: (line nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (line internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 20:14:23'!
ERROR!
!Bill class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:02:56'!
for: line duringMonth: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: line duringMonth: aRenameMe1 ! !
!Bill class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:03:05' prior: 50545176!
for: line duringMonth: aRenameMe1 
	^self new initializeFor: line duringMonth: aRenameMe1 ! !
!Bill class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:03:11' prior: 50545185!
for: aLineToBeBilled duringMonth: aRenameMe1 
	^self new initializeFor: aLineToBeBilled duringMonth: aRenameMe1 ! !
!Bill class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:03:45' prior: 50545191!
for: aLineToBill duringMonth: aRenameMe1 
	^self new initializeFor: aLineToBill duringMonth: aRenameMe1 ! !
!Bill class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:03:54' prior: 50545198!
for: aLineToBill duringMonth: aMonthOfBilling 
	^self new initializeFor: aLineToBill duringMonth: aMonthOfBilling ! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:04:04'!
ERROR!

!classDefinition: #Bill category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 21:04:11'!
Object subclass: #Bill
	instanceVariableNames: 'lineToBill'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #Bill category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 21:04:12'!
Object subclass: #Bill
	instanceVariableNames: 'lineToBill monthOfBilling'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Bill methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:04:12'!
initializeFor: aLineToBill duringMonth: aMonthOfBilling 
	self shouldBeImplemented.
	lineToBill := aLineToBill.
	monthOfBilling := aMonthOfBilling.! !
!Bill methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:04:19' prior: 50545226!
initializeFor: aLineToBill duringMonth: aMonthOfBilling 
	lineToBill := aLineToBill.
	monthOfBilling := aMonthOfBilling.! !

!classDefinition: #Bill category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 21:04:22'!
Object subclass: #Bill
	instanceVariableNames: 'line monthOfBilling'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Bill methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 21:04:22' prior: 50545234!
initializeFor: aLineToBill duringMonth: aMonthOfBilling 
	line := aLineToBill.
	monthOfBilling := aMonthOfBilling.! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:04:28'!
ERROR!
!Bill methodsFor: 'total' stamp: 'AS 3/30/2025 21:04:38'!
totalDue
	self shouldBeImplemented.! !
!Bill methodsFor: 'total' stamp: 'AS 3/30/2025 21:04:50' prior: 50545255!
totalDue
	^self total! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:04:51'!
ERROR!

!classDefinition: #Bill category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 21:14:29'!
Object subclass: #Bill
	instanceVariableNames: 'line monthOfBilling total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Bill methodsFor: 'total' stamp: 'AS 3/30/2025 21:14:27' prior: 50545259!
totalDue
	total := line basicMonthlyFee + line outgoingCalls sum: [ :aCall | (CallBiller for: aCall in: self) cost] ifEmpty: [0*dollar]! !
!Bill methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:14:45' prior: 50545249!
initializeFor: aLineToBill duringMonth: aMonthOfBilling 
	line := aLineToBill.
	monthOfBilling := aMonthOfBilling.
	self calculateTotalCost.! !
!Bill methodsFor: 'total' stamp: 'AS 3/30/2025 21:15:02'!
calculateTotalCost
	total := line basicMonthlyFee + line outgoingCalls sum: [ :aCall | (CallBiller for: aCall in: self) cost] ifEmpty: [0*dollar]! !
!Bill methodsFor: 'total' stamp: 'AS 3/30/2025 21:15:27' prior: 50545270!
totalDue
	^total! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 21:17:27'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:17:27'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:17:27'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:17:27'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:17:27'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:17:27'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:17:27'!
ERROR!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:17:27'!
ERROR!
!TelephoneLine methodsFor: 'calls' stamp: 'AS 3/30/2025 21:17:34'!
outgoingCalls
	self shouldBeImplemented.
	^outgoingCalls! !
!TelephoneLine methodsFor: 'calls' stamp: 'AS 3/30/2025 21:18:28' prior: 50545295!
outgoingCalls
	'Podria argumentarse que rompe encapsulamiento, pero lo hago en pos de no agregarle logica de calculo de costos a la linea ya no que no tiene que ver con la esencia de este objeto.'
	^outgoingCalls! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:18:38'!
ERROR!
!TelephoneLine methodsFor: 'calls' stamp: 'AS 3/30/2025 21:18:51' prior: 50545300!
outgoingCalls
	"Podria argumentarse que rompe encapsulamiento, pero lo hago en pos de no agregarle logica de calculo de costos a la linea ya no que no tiene que ver con la esencia de este objeto."
	^outgoingCalls! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:18:53'!
ERROR!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 21:19:02'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:19:02'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:19:02'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:19:02'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:19:02'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:19:02'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:19:02'!
ERROR!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:19:02'!
ERROR!
!Bill methodsFor: 'total - private' stamp: 'AS 3/30/2025 21:19:15' prior: 50545285!
calculateTotalCost
	total := line basicMonthlyFee + (line outgoingCalls sum: [ :aCall | (CallBiller for: aCall in: self) cost] ifEmpty: [0*dollar])! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:19:16'!
ERROR!
!CallBiller class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:19:21'!
for: aCall in: aBill 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCall in: aBill ! !
!CallBiller class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:19:50' prior: 50545328!
for: aCallToBill in: aRequestingBill 
	^self new initializeFor: aCallToBill in: aRequestingBill ! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:19:52'!
ERROR!

!classDefinition: #CallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 21:19:56'!
Object subclass: #CallBiller
	instanceVariableNames: 'call callToBill'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #CallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 21:19:57'!
Object subclass: #CallBiller
	instanceVariableNames: 'call callToBill requestingBill'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!CallBiller methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:19:57'!
initializeFor: aCallToBill in: aRequestingBill 
	self shouldBeImplemented.
	callToBill := aCallToBill.
	requestingBill := aRequestingBill.! !
!CallBiller methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:20:25' prior: 50545359!
initializeFor: aCallToBill in: aRequestingBill 
	call := aCallToBill.
	requestingBill := aRequestingBill.! !

!classDefinition: #CallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 21:20:28'!
Object subclass: #CallBiller
	instanceVariableNames: 'call callToBill bill'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!CallBiller methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 21:20:28' prior: 50545367!
initializeFor: aCallToBill in: aRequestingBill 
	call := aCallToBill.
	bill := aRequestingBill.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 21:20:57'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:20:57'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:20:57'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:20:57'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:20:57'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:20:57'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:20:57'!
ERROR!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:20:57'!
ERROR!
!CallBiller class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:21:55' prior: 50545337!
for: aCallToBill in: aRequestingBill 
	^(self allSubclasses detect: [:aSubclass | aSubclass canHandle: aCallToBill]) new initializeFor: aCallToBill in: aRequestingBill.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 21:22:01'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:22:01'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:22:01'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:22:01'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:22:01'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:22:01'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:22:01'!
ERROR!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:22:01'!
ERROR!
!Bill methodsFor: 'fee' stamp: 'AS 3/30/2025 21:22:35'!
basicMonthlyFee
	self shouldBeImplemented.! !

!classDefinition: #Bill category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 21:22:48'!
Object subclass: #Bill
	instanceVariableNames: 'line monthOfBilling total basicMonthlyFee'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Bill methodsFor: 'fee' stamp: 'AS 3/30/2025 21:22:46' prior: 50545397!
basicMonthlyFee
	^basicMonthlyFee! !
!Bill methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:23:30' prior: 50545278!
initializeFor: aLineToBill duringMonth: aMonthOfBilling 
	line := aLineToBill.
	monthOfBilling := aMonthOfBilling.
	basicMonthlyFee := line basicMonthlyFee. "Se hace una vez por si cambia en el futuro"
	self calculateTotalCost.! !
!Bill methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:23:36' prior: 50545413!
initializeFor: aLineToBill duringMonth: aMonthOfBilling 
	line := aLineToBill.
	monthOfBilling := aMonthOfBilling.
	basicMonthlyFee := line basicMonthlyFee. "Se hace una vez por si cambia en el futuro."
	self calculateTotalCost.! !
!Bill methodsFor: 'instance creation' stamp: 'AS 3/30/2025 21:23:59' prior: 50545423!
initializeFor: aLineToBill duringMonth: aMonthOfBilling 
	line := aLineToBill.
	monthOfBilling := aMonthOfBilling.
	basicMonthlyFee := line basicMonthlyFee. "Se hace una vez por si cambia en el futuro, pues quiero que la factura tenga la fee de ese momento."
	self calculateTotalCost.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 21:24:40'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:24:40'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:24:40'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:24:40'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:24:40'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:24:40'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:24:40'!
ERROR!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:24:40'!
ERROR!
!Bill methodsFor: 'local' stamp: 'AS 3/30/2025 21:24:57'!
localUsage
	self shouldBeImplemented.! !

!classDefinition: #Bill category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 21:25:17'!
Object subclass: #Bill
	instanceVariableNames: 'line monthOfBilling total basicMonthlyFee localUsage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Bill methodsFor: 'local' stamp: 'AS 3/30/2025 21:25:08' prior: 50545444!
localUsage
	^localUsage! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:25:20'!
FAILURE!
!Bill methodsFor: 'total - private' stamp: 'AS 3/30/2025 21:26:05' prior: 50545320!
calculateTotalCost
	localUsage := 0*dollar.
	total := line basicMonthlyFee + (line outgoingCalls sum: [ :aCall | (CallBiller for: aCall in: self) cost] ifEmpty: [0*dollar])! !

!classDefinition: #Bill category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 21:26:28'!
Object subclass: #Bill
	instanceVariableNames: 'line monthOfBilling total basicMonthlyFee localUsage nationalUsage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #Bill category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 21:26:29'!
Object subclass: #Bill
	instanceVariableNames: 'line monthOfBilling total basicMonthlyFee localUsage nationalUsage internationalUsage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!Bill methodsFor: 'total - private' stamp: 'AS 3/30/2025 21:26:26' prior: 50545461!
calculateTotalCost
	localUsage := 0*dollar.
	nationalUsage := 0*dollar.
	internationalUsage := 0*dollar.
	total := line basicMonthlyFee + (line outgoingCalls sum: [ :aCall | (CallBiller for: aCall in: self) cost] ifEmpty: [0*dollar])! !
!Bill methodsFor: 'total - private' stamp: 'AS 3/30/2025 21:31:07' prior: 50545488!
calculateTotalCost
	total := line basicMonthlyFee.
	line outgoingCalls do: [ :aCall | (CallBiller for: aCall in: self) addToBill].! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 21:31:26'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:31:26'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:31:26'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:31:26'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:31:26'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:31:26'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:31:26'!
ERROR!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:31:26'!
ERROR!
!CallBiller methodsFor: 'relaying' stamp: 'AS 3/30/2025 21:32:25'!
addToBill
	self shouldBeImplemented.! !
!CallBiller methodsFor: 'relaying' stamp: 'AS 3/30/2025 21:32:35' prior: 50545506!
addToBill
	self subclassResponsibility ! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:32:37'!
ERROR!
!CallBiller methodsFor: 'relaying' stamp: 'AS 3/30/2025 21:34:25' prior: 50545510!
addToBill
	bill add: self cost.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 21:42:51'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:42:51'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:42:51'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:42:51'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:42:51'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:42:51'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:42:51'!
ERROR!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:42:51'!
ERROR!
!Bill methodsFor: 'adding - private' stamp: 'AS 3/30/2025 21:43:20'!
add: aRenameMe1 
	self shouldBeImplemented.! !
!Bill methodsFor: 'adding - private' stamp: 'AS 3/30/2025 21:43:32' prior: 50545518!
add: aCallCostToAdd 
	self shouldBeImplemented.! !
!Bill methodsFor: 'adding - private' stamp: 'AS 3/30/2025 21:43:52' prior: 50545523!
add: aCallCostToAdd 
	total := total + aCallCostToAdd ! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:43:54'!
FAILURE!

self assert: bill totalDue equals: (line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee + line nationalFee + line internationalFee))).!

bill totalDue!

(line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee + line nationalFee + line internationalFee)))!

!classRenamed: #Bill as: #TelephoneLine\Bill stamp: 'AS 3/30/2025 21:46:13'!
Smalltalk renameClassNamed: #Bill as: #TelephoneLine\Bill!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 21:46:13' prior: 50545111!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration bill|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	line calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	line calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLine\Bill for: line duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee + line nationalFee + line internationalFee))).
	self assert: bill basicMonthlyFee equals: line basicMonthlyFee.
	self assert: bill localUsage equals: (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee) * callDuration.
	self assert: bill nationalUsage equals: (line nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (line internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue).! !

Smalltalk globals at: #Bill!

Smalltalk globals at: #TelephoneBill.!

!classRenamed: #TelephoneLine\Bill as: #TelephoneLineeBill stamp: 'AS 3/30/2025 21:47:53'!
Smalltalk renameClassNamed: #TelephoneLine\Bill as: #TelephoneLineeBill!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 21:48:17'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:48:17'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:48:17'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:48:17'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:48:17'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 21:48:17'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:48:17'!
ERROR!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:48:17'!
ERROR!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 21:48:23' prior: 50545550!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration bill|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	line calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	line calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineeBill for: line duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee + line nationalFee + line internationalFee))).
	self assert: bill basicMonthlyFee equals: line basicMonthlyFee.
	self assert: bill localUsage equals: (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee) * callDuration.
	self assert: bill nationalUsage equals: (line nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (line internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 21:48:24'!
FAILURE!
!InternationalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 21:51:58'!
addToBillAsInternational

	^bill addAsInternational: self cost.! !
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 21:52:14'!
addToBillAsLocal

	^bill addAsLocal: self cost.! !
!NationalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 21:52:23'!
addToBillAsNational

	^bill addAsInternational: self cost.! !
!NationalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 21:52:30' prior: 50545697!
addToBillAsNational

	^bill addAsNational: self cost.! !
!NationalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 21:52:41' overrides: 50545514!
addToBill

	^bill addAsNational: self cost.! !

!methodRemoval: NationalCallBiller #addToBillAsNational stamp: 'AS 3/30/2025 21:52:45'!
addToBillAsNational

	^bill addAsNational: self cost.!
!LocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 21:52:54' overrides: 50545514!
addToBill

	^bill addAsLocal: self cost.! !

!methodRemoval: LocalCallBiller #addToBillAsLocal stamp: 'AS 3/30/2025 21:52:54'!
addToBillAsLocal

	^bill addAsLocal: self cost.!
!InternationalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 21:53:01' overrides: 50545514!
addToBill

	^bill addAsInternational: self cost.! !

!methodRemoval: InternationalCallBiller #addToBillAsInternational stamp: 'AS 3/30/2025 21:53:01'!
addToBillAsInternational

	^bill addAsInternational: self cost.!
!CallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 21:53:18' prior: 50545514!
addToBill

	self subclassResponsibility ! !
!TelephoneLineeBill methodsFor: 'total - private' stamp: 'AS 3/30/2025 21:54:57'!
addAsNational: aNationalCallCostToAdd 
	nationalUsage := nationalUsage + aNationalCallCostToAdd ! !
!TelephoneLineeBill methodsFor: 'total - private' stamp: 'AS 3/30/2025 21:55:19'!
addAsInternational: anInternationalCallCostToAdd 
	internationalUsage := internationalUsage + anInternationalCallCostToAdd ! !
!TelephoneLineeBill methodsFor: 'total - private' stamp: 'AS 3/30/2025 21:55:35'!
addAsLocal: aLocalCallCostToAdd 
	localUsage := localUsage + aLocalCallCostToAdd ! !
!TelephoneLineeBill methodsFor: 'total - private' stamp: 'AS 3/30/2025 21:56:25' prior: 50545499!
calculateTotalCost
	localUsage := 0*dollar.
	nationalUsage := 0*dollar.
	internationalUsage := 0*dollar.
	total := line basicMonthlyFee.
	line outgoingCalls do: [ :aCall | (CallBiller for: aCall in: self) addToBill].
	! !
!TelephoneLineeBill methodsFor: 'total - private' stamp: 'AS 3/30/2025 21:56:45' prior: 50545758!
calculateTotalCost
	localUsage := 0*dollar.
	nationalUsage := 0*dollar.
	internationalUsage := 0*dollar.
	line outgoingCalls do: [ :aCall | (CallBiller for: aCall in: self) addToBill].
	
	total := line basicMonthlyFee + localUsage + nationalUsage + internationalUsage.
	! !
!TelephoneLineeBill methodsFor: 'total - private' stamp: 'AS 3/30/2025 22:00:00' prior: 50545768!
calculateTotalCost
	localUsage := 0*dollar.
	nationalUsage := 0*dollar.
	internationalUsage := 0*dollar.
	line outgoingCalls do: [ :aCall | (CallBiller for: aCall in: self) addToBill].
	
	total := line basicMonthlyFee + localUsage + nationalUsage + internationalUsage.
	
	"Se podria argumentar que si agrego un tipo de llamada debo modificar este metodo, y que por lo tanto seria mejor sumar los costos
	de manera indistinta, pero creo que el hecho de que haya distintos tipos de llamada es esencial a la factura (por el enunciado), ya
	que entiendo que pide que se discriminen los costos y no se podria hacer si no se diferenciaran los tipos de costos.
	Por lo tanto tiene sentido tener que ademas modificar la factura si se agrega un nuevo tipo."
	! !
!TelephoneLineeBill methodsFor: 'total - private' stamp: 'AS 3/30/2025 22:00:13' prior: 50545780!
calculateTotalCost
	
	"Se podria argumentar que si agrego un tipo de llamada debo modificar este metodo, y que por lo tanto seria mejor sumar los costos
	de manera indistinta, pero creo que el hecho de que haya distintos tipos de llamada es esencial a la factura (por el enunciado), ya
	que entiendo que pide que se discriminen los costos y no se podria hacer si no se diferenciaran los tipos de costos.
	Por lo tanto tiene sentido tener que ademas modificar la factura si se agrega un nuevo tipo."
	
	localUsage := 0*dollar.
	nationalUsage := 0*dollar.
	internationalUsage := 0*dollar.
	line outgoingCalls do: [ :aCall | (CallBiller for: aCall in: self) addToBill].
	
	total := line basicMonthlyFee + localUsage + nationalUsage + internationalUsage.
	
	! !
!TelephoneLineeBill methodsFor: 'total - private' stamp: 'AS 3/30/2025 22:00:39' prior: 50545807!
calculateTotalCost
	
	"Se podria argumentar que si agrego un tipo de llamada debo modificar este metodo, y que por lo tanto seria mejor sumar los costos
	de manera indistinta, pero creo que el hecho de que haya distintos tipos de llamada es esencial a la factura (por el enunciado), ya
	que entiendo que pide que se discriminen los costos, lo cual no se podria hacer si no se diferenciaran los tipos de estos.
	Por lo tanto tiene sentido tener que ademas modificar la factura si se agrega un nuevo tipo."
	
	localUsage := 0*dollar.
	nationalUsage := 0*dollar.
	internationalUsage := 0*dollar.
	line outgoingCalls do: [ :aCall | (CallBiller for: aCall in: self) addToBill].
	
	total := line basicMonthlyFee + localUsage + nationalUsage + internationalUsage.
	
	! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:00:52'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:00:52'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:00:52'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:00:52'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:00:52'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:00:52'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:00:52'!
FAILURE!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:00:52'!
FAILURE!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:01:27'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:01:27'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:01:27'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:01:27'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:01:27'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:01:27'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:01:27'!
FAILURE!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:01:27'!
FAILURE!

bill localUsage!

(line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee) * callDuration!

bill localUsage!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:03:59' prior: 50545623!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration bill|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	line calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	line calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineeBill for: line duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee + line nationalFee + line internationalFee))).
	self assert: bill basicMonthlyFee equals: line basicMonthlyFee.
	self assert: bill localUsage equals: (line weekDayWorkHoursFee  * callDuration) + (line weekDayNonWorkHoursFee * callDuration) + (line weekendFee * callDuration).
	self assert: bill nationalUsage equals: (line nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (line internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:04:04'!
ERROR!
!TelephoneLineeBill methodsFor: 'national' stamp: 'AS 3/30/2025 22:04:20'!
nationalUsage
	self shouldBeImplemented.
	^nationalUsage! !
!TelephoneLineeBill methodsFor: 'national' stamp: 'AS 3/30/2025 22:04:22' prior: 50545931!
nationalUsage
	^nationalUsage! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:04:24'!
ERROR!
!TelephoneLineeBill methodsFor: 'international' stamp: 'AS 3/30/2025 22:04:30'!
internationalUsage
	self shouldBeImplemented.
	^internationalUsage! !
!TelephoneLineeBill methodsFor: 'international' stamp: 'AS 3/30/2025 22:04:33' prior: 50545940!
internationalUsage
	^internationalUsage! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:04:34'!
ERROR!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:05:24'!
ERROR!
!TelephoneLineeBill methodsFor: 'showing' stamp: 'AS 3/30/2025 22:05:33'!
show
	self shouldBeImplemented.! !
!TelephoneLineeBill methodsFor: 'showing' stamp: 'AS 3/30/2025 22:07:12' prior: 50545950!
show
	(OrderedCollection with: 'Bill for line number ', line number , ' during period ', monthOfBilling asString
											           with: '		Monthly fee: ', basicMonthlyFee asString
												    with: 'Local usage: ', localUsage asString
												    with: 'National and international usage: ', self nationalAndInternationalUsage asString
												    with: 'Total due: ' , total).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:07:14'!
ERROR!
!TelephoneLine methodsFor: 'number' stamp: 'AS 3/30/2025 22:07:27'!
number
	self shouldBeImplemented.! !

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:07:35'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'region country outgoingCalls number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'number' stamp: 'AS 3/30/2025 22:07:33' prior: 50545969!
number
	^number! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:07:37'!
ERROR!
!TelephoneLine class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 22:08:33'!
fromRegion: aCallingRegion in: aCallingCountry number: aLineNumber   
	^self new initializeFromRegion: aCallingRegion in: aCallingCountry ! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:08:33' prior: 50544826!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: xxx.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: xxx.
	callDuration := 2 * minute.
	line1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:08:33' prior: 50544572!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: xxx).
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: xxx).
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:08:33' prior: 50545865!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration bill|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: xxx.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: xxx.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: xxx.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: xxx.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	line calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	line calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineeBill for: line duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee + line nationalFee + line internationalFee))).
	self assert: bill basicMonthlyFee equals: line basicMonthlyFee.
	self assert: bill localUsage equals: (line weekDayWorkHoursFee  * callDuration) + (line weekDayNonWorkHoursFee * callDuration) + (line weekendFee * callDuration).
	self assert: bill nationalUsage equals: (line nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (line internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:08:33' prior: 50544975!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: xxx).
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: xxx).
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:08:33' prior: 50544613!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: xxx).
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: xxx).
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:08:33' prior: 50541283!
test01UnusedLineIsBilledBasicFee

	self assert: (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: xxx) totalDue equals: TelephoneLine basicMonthlyFee.! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:08:33' prior: 50544809!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: xxx.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: xxx.
	callDuration := 2 * minute.
	line1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !

!methodRemoval: TelephoneLine class #fromRegion:in: stamp: 'AS 3/30/2025 22:08:33'!
fromRegion: aCallingRegion in: aCallingCountry  
	^self new initializeFromRegion: aCallingRegion in: aCallingCountry !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:09:09' prior: 50546139!
test01UnusedLineIsBilledBasicFee

	self assert: (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678') totalDue equals: TelephoneLine basicMonthlyFee.! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:09:15' prior: 50546013!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:09:25' prior: 50546181!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:09:38'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: 'xxx'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:09:37' prior: 50546120!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: xxx).
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:09:53' prior: 50546227!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:10:49' prior: 50546101!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:11:01' prior: 50546148!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: xxx.
	callDuration := 2 * minute.
	line1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:11:33' prior: 50546285!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	callDuration := 2 * minute.
	line1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine nationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:11:48' prior: 50545994!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: xxx.
	callDuration := 2 * minute.
	line1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:12:22' prior: 50546322!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	callDuration := 2 * minute.
	line1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine internationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:13:14' prior: 50546032!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration bill|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	line calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	line calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineeBill for: line duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee + line nationalFee + line internationalFee))).
	self assert: bill basicMonthlyFee equals: line basicMonthlyFee.
	self assert: bill localUsage equals: (line weekDayWorkHoursFee  * callDuration) + (line weekDayNonWorkHoursFee * callDuration) + (line weekendFee * callDuration).
	self assert: bill nationalUsage equals: (line nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (line internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue).! !

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:13:29'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:13:38'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:13:38'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:13:38'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:13:38'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:13:38'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:13:38'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:13:38'!
ERROR!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:13:38'!
ERROR!
!TelephoneLine methodsFor: 'instance creation' stamp: 'AS 3/30/2025 22:14:29'!
initializeFromRegion: aCallingRegion in: aCallingCountry number: aLineNumber   
	region := aCallingRegion.
	country := aCallingCountry ! !
!TelephoneLine class methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:14:29' prior: 50545986!
fromRegion: aCallingRegion in: aCallingCountry number: aLineNumber   
	^self new initializeFromRegion: aCallingRegion in: aCallingCountry number: aLineNumber ! !

!methodRemoval: TelephoneLine #initializeFromRegion:in: stamp: 'AS 3/30/2025 22:14:29'!
initializeFromRegion: aCallingRegion in: aCallingCountry  
	region := aCallingRegion.
	country := aCallingCountry !
!TelephoneLine methodsFor: 'instance creation' stamp: 'AS 3/30/2025 22:14:42' prior: 50546437!
initializeFromRegion: aCallingRegion in: aCallingCountry number: aLineNumber   
	region := aCallingRegion.
	country := aCallingCountry.
	number := aLineNumber ! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:14:46'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:14:46'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:14:46'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:14:46'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:14:46'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:14:46'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:14:46'!
ERROR!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:14:46'!
ERROR!
!TelephoneLineeBill methodsFor: 'national and international' stamp: 'AS 3/30/2025 22:15:08'!
nationalAndInternationalUsage
	self shouldBeImplemented.! !
!TelephoneLineeBill methodsFor: 'national and international' stamp: 'AS 3/30/2025 22:15:18' prior: 50546468!
nationalAndInternationalUsage
	^nationalUsage + internationalUsage ! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:15:19'!
ERROR!
!TelephoneLineeBill methodsFor: 'showing' stamp: 'AS 3/30/2025 22:15:31' prior: 50545954!
show
	(OrderedCollection with: 'Bill for line number ', line number , ' during period ', monthOfBilling asString
											           with: '		Monthly fee: ', basicMonthlyFee asString
												    with: 'Local usage: ', localUsage asString
												    with: 'National and international usage: ', self nationalAndInternationalUsage asString
												    with: 'Total due: ' , total asString).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:15:34'!
ERROR!
!TelephoneLineeBill methodsFor: 'line' stamp: 'AS 3/30/2025 22:16:03'!
line
	self shouldBeImplemented.
	^line! !
!TelephoneLineeBill methodsFor: 'line' stamp: 'AS 3/30/2025 22:16:06' prior: 50546495!
line
	^line! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:16:07'!
ERROR!
!TelephoneLineeBill methodsFor: 'month' stamp: 'AS 3/30/2025 22:16:21'!
month
	self shouldBeImplemented.! !
!TelephoneLineeBill methodsFor: 'month' stamp: 'AS 3/30/2025 22:16:28' prior: 50546503!
month
	^monthOfBilling ! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:16:29'!
ERROR!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:16:45' prior: 50546360!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration bill|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	line calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	line calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineeBill for: line duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee + line nationalFee + line internationalFee))).
	self assert: bill basicMonthlyFee equals: line basicMonthlyFee.
	self assert: bill localUsage equals: (line weekDayWorkHoursFee  * callDuration) + (line weekDayNonWorkHoursFee * callDuration) + (line weekendFee * callDuration).
	self assert: bill nationalUsage equals: (line nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (line internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:16:46'!
FAILURE!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:16:52'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:16:52'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:16:52'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:16:52'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:16:52'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:16:52'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:16:52'!
FAILURE!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:16:52'!
FAILURE!

bill show!
!TelephoneLineeBill methodsFor: 'showing' stamp: 'AS 3/30/2025 22:18:36' prior: 50546480!
show
	^(OrderedCollection with: 'Bill for line number ', line number , ' during period ', monthOfBilling asString
											           with: '		Monthly fee: ', basicMonthlyFee asString
												    with: 'Local usage: ', localUsage asString
												    with: 'National and international usage: ', self nationalAndInternationalUsage asString
												    with: 'Total due: ' , total asString).! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:18:52'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:18:52'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:18:52'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:18:52'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:18:52'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:18:52'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:18:52'!
PASSED!

----SNAPSHOT----(30 March 2025 22:19:21) CuisUniversity-6350.image priorSource: 6815358!

Undeclared inspect!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:21:32'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:21:32'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:21:32'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:21:32'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:21:32'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:21:32'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:21:32'!
PASSED!

!classRenamed: #TelephoneLineeBill as: #TelephoneLineBill stamp: 'AS 3/30/2025 22:21:38'!
Smalltalk renameClassNamed: #TelephoneLineeBill as: #TelephoneLineBill!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:21:38' prior: 50546511!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration bill|
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	line calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	line calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: line duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee + line nationalFee + line internationalFee))).
	self assert: bill basicMonthlyFee equals: line basicMonthlyFee.
	self assert: bill localUsage equals: (line weekDayWorkHoursFee  * callDuration) + (line weekDayNonWorkHoursFee * callDuration) + (line weekendFee * callDuration).
	self assert: bill nationalUsage equals: (line nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (line internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:21:44'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:21:44'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:21:44'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:21:44'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:21:44'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:21:44'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:21:44'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:23:08' prior: 50546200!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill|
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:09'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:23:09'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:09'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:09'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:09'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:09'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:09'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:23:09'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:23:23' prior: 50546246!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekDayNonWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:28'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:23:28'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:28'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:28'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:28'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:28'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:28'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:23:28'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:23:36' prior: 50546266!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (TelephoneLine basicMonthlyFee ) + ((TelephoneLine weekendFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:23:51' prior: 50546720!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 class basicMonthlyFee ) + ((TelephoneLine weekendFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:51'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:23:51'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:51'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:51'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:51'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:51'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:51'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:23:51'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:23:55' prior: 50546741!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 class basicMonthlyFee ) + ((line2 class weekendFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:55'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:23:55'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:55'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:55'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:55'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:55'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:55'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:23:55'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:23:59' prior: 50546762!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((line2 class weekendFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:59'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:23:59'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:59'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:59'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:59'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:59'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:23:59'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:23:59'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:24:01' prior: 50546783!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((line2 weekendFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:01'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:24:01'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:01'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:01'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:01'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:01'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:01'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:24:01'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:24:36' prior: 50546172!
test01UnusedLineIsBilledBasicFee
	
	| bill line |
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	bill := TelephoneLineBill for: line duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: TelephoneLine basicMonthlyFee.! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:24:41' prior: 50546825!
test01UnusedLineIsBilledBasicFee
	
	| bill line |
	line := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	bill := TelephoneLineBill for: line duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: line basicMonthlyFee.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:24:41'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:24:41'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:41'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:41'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:41'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:41'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:41'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:24:41'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:24:52' prior: 50546698!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((line2 weekDayNonWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:52'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:24:52'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:52'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:52'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:52'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:52'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:24:52'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:24:52'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:25:06' prior: 50546676!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill|
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((TelephoneLine weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:06'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:25:07'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:07'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:07'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:07'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:07'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:07'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:25:07'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:25:10' prior: 50546871!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill|
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((line1 weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:10'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:25:10'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:10'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:10'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:10'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:10'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:10'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:25:10'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:25:20' prior: 50546849!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((line1 weekDayNonWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:20'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:25:20'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:20'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:20'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:20'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:20'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:20'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:25:20'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:25:25' prior: 50546804!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678').
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((line1 weekendFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:25'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:25:25'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:25'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:25'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:25'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:25'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:25'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:25:25'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:25:34' prior: 50546303!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	callDuration := 2 * minute.
	line1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	
	self assert: line1 totalDue equals: (line1 basicMonthlyFee ) + ((line1 nationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:35'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:25:35'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:35'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:35'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:35'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:35'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:35'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:25:35'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:25:57' prior: 50546958!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	callDuration := 2 * minute.
	line1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((line1 nationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:58'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:25:58'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:58'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:58'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:58'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:58'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:25:58'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:25:58'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:26:25' prior: 50546341!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	callDuration := 2 * minute.
	line1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((line1 internationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:26:26'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:26:26'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:26:26'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:26:26'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:26:26'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:26:26'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:26:26'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:26:26'!
PASSED!

!methodRemoval: TelephoneLine #totalDue stamp: 'AS 3/30/2025 22:26:57'!
totalDue
	^(outgoingCalls sum: [ :aCall | (CallBiller for: aCall) cost] ifEmpty: [0*dollar]) + self class basicMonthlyFee.!
!TelephoneLine methodsFor: 'testing' stamp: 'AS 3/30/2025 22:27:27' prior: 50541964!
calls: aLineThatWasCalled on: aDate at: aTimeOfDay for: aCallDuration
	outgoingCalls add: (Call from: self to: aLineThatWasCalled on: aDate at: aTimeOfDay for: aCallDuration).! !
!Call class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 22:27:41' prior: 50541473!
from: aCallingLine to: aLineThatIsCalled on: aDate at: aTimeOfDay for: aCallDuration
	^self new initializeFrom: aCallingLine to: aLineThatIsCalled on: aDate at: aTimeOfDay for: aCallDuration ! !
!Call methodsFor: 'instance creation' stamp: 'AS 3/30/2025 22:27:49' prior: 50544442!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDate at: aTimeOfDay for: aCallDuration 
	caller := aCallingLine.
	callee := aLineThatIsCalled.
	date := aDate.
	timeOfDay := aTimeOfDay.
	duration := aCallDuration.! !
!NationalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 22:28:34' prior: 50544148 overrides: 50544132!
fee

	^ call caller nationalFee! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:28:37'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:28:37'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:28:37'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:28:37'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:28:37'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:28:37'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:28:37'!
PASSED!
!InternationalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 22:28:49' prior: 50544137 overrides: 50544132!
fee

	^ call caller internationalFee! !
!WeekDayNonWorkingHoursLocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 22:28:56' prior: 50544159 overrides: 50544332!
fee

	^ call caller weekDayNonWorkHoursFee! !
!WeekDayWorkingHoursLocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 22:28:59' prior: 50544171 overrides: 50544332!
fee

	^ call caller weekDayWorkHoursFee! !
!WeekendLocalCallBiller methodsFor: 'billing' stamp: 'AS 3/30/2025 22:29:02' prior: 50544970 overrides: 50544128!
fee

	^ call caller weekendFee! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:29:05'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:29:05'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:29:05'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:29:05'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:29:05'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:29:05'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:29:05'!
PASSED!

!methodRemoval: TelephoneBillingTest #toDo stamp: 'AS 3/30/2025 22:30:46'!
toDo
	'
	- mejorar la rep del dia en que se llama (que sea una fecha completa y pueda elegir si es weekday o weekend)'!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:31:32'!
localLine1

	^ TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:31:32' prior: 50546893!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill|
	line1 := (self localLine1).
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((line1 weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:31:32' prior: 50546915!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := (self localLine1).
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((line1 weekDayNonWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:31:32' prior: 50546606!
test07BillIsCorrectlyGenerated
	
	| line localLine nationalLine internationalLine callDuration bill|
	line := self localLine1.
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	callDuration := 3 * minute.
	
	line calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	line calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	line calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	line calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: line duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (line basicMonthlyFee + 
	(callDuration  * (line weekDayWorkHoursFee  + line weekDayNonWorkHoursFee + line weekendFee + line nationalFee + line internationalFee))).
	self assert: bill basicMonthlyFee equals: line basicMonthlyFee.
	self assert: bill localUsage equals: (line weekDayWorkHoursFee  * callDuration) + (line weekDayNonWorkHoursFee * callDuration) + (line weekendFee * callDuration).
	self assert: bill nationalUsage equals: (line nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (line internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:31:32' prior: 50546837!
test01UnusedLineIsBilledBasicFee
	
	| bill line |
	line := self localLine1.
	bill := TelephoneLineBill for: line duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: line basicMonthlyFee.! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:31:32' prior: 50546976!
test05NationalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := self localLine1.
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	callDuration := 2 * minute.
	line1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((line1 nationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:31:32' prior: 50546937!
test04WeekendLocalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := (self localLine1).
	line2 := (TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555').
	callDuration := 2 * minute.
	line1 calls: line2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((line1 weekendFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:31:32' prior: 50546997!
test06InternationalCallIsBilledCorrectly
	
	| line1 line2 callDuration bill |
	line1 := self localLine1.
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	callDuration := 2 * minute.
	line1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: line1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (line1 basicMonthlyFee ) + ((line1 internationalFee) * callDuration).! !

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:32:20'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: 'localLine1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillingTest methodsFor: 'nil' stamp: 'AS 3/30/2025 22:32:19' overrides: 50365032!
setUp
	localLine1 := self localLine1 ! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:32:37' prior: 50547275 overrides: 50365032!
setUp
	localLine1 :=  TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678' ! !

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:33:19'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: 'localLine1 localLine2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillingTest methodsFor: 'setUp/tearDown' stamp: 'AS 3/30/2025 22:33:18' prior: 50547281 overrides: 50365032!
setUp
	localLine1 :=  TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:33:53'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:33:53'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:33:53'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:33:53'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:33:53'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:33:53'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:33:53'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:33:53'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:34:39' prior: 50547091!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| callDuration bill|
	callDuration := 2 * minute.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekDayWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:34:40'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:34:40'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:34:40'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:34:40'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:34:40'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:34:40'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:34:40'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:34:40'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:34:58' prior: 50547111!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| callDuration bill |
	callDuration := 2 * minute.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekDayNonWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:34:58'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:34:58'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:34:58'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:34:58'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:34:58'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:34:58'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:34:58'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:34:58'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:35:18' prior: 50547228!
test04WeekendLocalCallIsBilledCorrectly
	
	| callDuration bill |
	callDuration := 2 * minute.
	localLine1 calls: localLine2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekendFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:18'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:35:18'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:18'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:18'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:18'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:18'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:18'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:35:18'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:35:41' prior: 50547209!
test05NationalCallIsBilledCorrectly
	
	| line2 callDuration bill |
	line2 := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	callDuration := 2 * minute.
	localLine1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 nationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:41'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:35:41'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:41'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:41'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:41'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:41'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:41'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:35:41'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:35:55' prior: 50547247!
test06InternationalCallIsBilledCorrectly
	
	| line2 callDuration bill |
	line2 := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	callDuration := 2 * minute.
	localLine1 calls: line2 on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 internationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:55'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:35:55'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:55'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:55'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:55'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:55'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:35:55'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:35:55'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:36:42' prior: 50547131!
test07BillIsCorrectlyGenerated
	
	| localLine nationalLine internationalLine callDuration bill|
	localLine := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	callDuration := 3 * minute.
	
	localLine1 calls: localLine on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	localLine1 calls: localLine on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	localLine1 calls: localLine on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(callDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (localLine1 weekDayWorkHoursFee  * callDuration) + (localLine1 weekDayNonWorkHoursFee * callDuration) + (localLine1 weekendFee * callDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:36:42'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:36:42'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:36:42'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:36:42'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:36:42'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:36:42'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:36:42'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:36:42'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:37:05' prior: 50547391!
test07BillIsCorrectlyGenerated
	
	| nationalLine internationalLine callDuration bill|
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	callDuration := 3 * minute.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(callDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (localLine1 weekDayWorkHoursFee  * callDuration) + (localLine1 weekDayNonWorkHoursFee * callDuration) + (localLine1 weekendFee * callDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:37:05'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:37:05'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:37:05'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:37:05'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:37:05'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:37:05'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:37:05'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:37:05'!
PASSED!

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:38:16'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: 'localLine1 localLine2 nationalLineee'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:38:17'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: 'localLine1 localLine2 nationalLineee internationalLineee'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillingTest methodsFor: 'setUp/tearDown' stamp: 'AS 3/30/2025 22:38:14' prior: 50547297 overrides: 50365032!
setUp
	localLine1 :=  TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLineee := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLineee := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:38:40' prior: 50547354!
test05NationalCallIsBilledCorrectly
	
	| callDuration bill |
	callDuration := 2 * minute.
	localLine1 calls: nationalLineee on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 nationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:40'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:38:40'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:40'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:40'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:40'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:40'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:40'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:38:40'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:38:46' prior: 50547567!
test05NationalCallIsBilledCorrectly
	
	| callDuration bill |
	callDuration := 2 * minute.
	localLine1 calls: internationalLineee on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 nationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:46'!
FAILURE!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:38:54' prior: 50547583!
test05NationalCallIsBilledCorrectly
	
	| callDuration bill |
	callDuration := 2 * minute.
	localLine1 calls: nationalLineee on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 nationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:54'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:38:54'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:54'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:54'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:54'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:54'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:54'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:38:54'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:56'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:38:56'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:56'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:56'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:56'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:56'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:38:56'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:38:56'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:39:09' prior: 50547372!
test06InternationalCallIsBilledCorrectly
	
	|  callDuration bill |
	
	callDuration := 2 * minute.
	localLine1 calls: internationalLineee on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 internationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:39:10'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:39:10'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:39:10'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:39:10'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:39:10'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:39:10'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:39:10'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:39:10'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:39:15' prior: 50547599!
test05NationalCallIsBilledCorrectly
	
	| callDuration bill |
	
	callDuration := 2 * minute.
	localLine1 calls: nationalLineee on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 nationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:39:15'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:39:15'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:39:15'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:39:15'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:39:15'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:39:15'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:39:15'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:39:15'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:41:28'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:41:28'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:41:28'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:41:28'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:41:28'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:41:28'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:41:28'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:41:28'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:41:55' prior: 50547461!
test07BillIsCorrectlyGenerated
	
	| callDuration bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	callDuration := 3 * minute.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: nationalLineee on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: internationalLineee on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(callDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (localLine1 weekDayWorkHoursFee  * callDuration) + (localLine1 weekDayNonWorkHoursFee * callDuration) + (localLine1 weekendFee * callDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:41:55'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:41:56'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:41:56'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:41:56'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:41:56'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:41:56'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:41:56'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:41:56'!
PASSED!

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:41:59'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: 'localLine1 localLine2 nationalLine internationalLineee'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:41:59' prior: 50547551 overrides: 50365032!
setUp
	localLine1 :=  TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLineee := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:41:59' prior: 50547647!
test07BillIsCorrectlyGenerated
	
	| callDuration bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	callDuration := 3 * minute.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: internationalLineee on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(callDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (localLine1 weekDayWorkHoursFee  * callDuration) + (localLine1 weekDayNonWorkHoursFee * callDuration) + (localLine1 weekendFee * callDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:41:59' prior: 50547631!
test05NationalCallIsBilledCorrectly
	
	| callDuration bill |
	
	callDuration := 2 * minute.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 nationalFee) * callDuration).! !

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:42:02'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: 'localLine1 localLine2 nationalLine internationalLine'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:42:02' prior: 50547721 overrides: 50365032!
setUp
	localLine1 :=  TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:42:02' prior: 50547737!
test07BillIsCorrectlyGenerated
	
	| callDuration bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	callDuration := 3 * minute.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(callDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (localLine1 weekDayWorkHoursFee  * callDuration) + (localLine1 weekDayNonWorkHoursFee * callDuration) + (localLine1 weekendFee * callDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:42:02' prior: 50547615!
test06InternationalCallIsBilledCorrectly
	
	|  callDuration bill |
	
	callDuration := 2 * minute.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 internationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:42:15' prior: 50547843!
test07BillIsCorrectlyGenerated
	
	| callDuration bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	callDuration := 2 * minute.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(callDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (localLine1 weekDayWorkHoursFee  * callDuration) + (localLine1 weekDayNonWorkHoursFee * callDuration) + (localLine1 weekendFee * callDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:42:16'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:42:16'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:42:16'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:42:16'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:42:16'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:42:16'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:42:16'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:42:16'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:42:42'!
arbitraryCallDuration

	^ 2 * minute! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:42:42' prior: 50547307!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| callDuration bill|
	callDuration := self arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:42:42' prior: 50547323!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	| callDuration bill |
	callDuration := self arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekDayNonWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:42:42' prior: 50547923!
test07BillIsCorrectlyGenerated
	
	| callDuration bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	callDuration := self arbitraryCallDuration.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(callDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (localLine1 weekDayWorkHoursFee  * callDuration) + (localLine1 weekDayNonWorkHoursFee * callDuration) + (localLine1 weekendFee * callDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:42:42' prior: 50547801!
test05NationalCallIsBilledCorrectly
	
	| callDuration bill |
	
	callDuration := self arbitraryCallDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 nationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:42:42' prior: 50547339!
test04WeekendLocalCallIsBilledCorrectly
	
	| callDuration bill |
	callDuration := self arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekendFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:42:42' prior: 50547907!
test06InternationalCallIsBilledCorrectly
	
	|  callDuration bill |
	
	callDuration := self arbitraryCallDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 internationalFee) * callDuration).! !

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:43:11'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: 'localLine1 localLine2 nationalLine internationalLine arbitraryCallDuration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillingTest methodsFor: 'setUp/tearDown' stamp: 'AS 3/30/2025 22:43:09' prior: 50547827 overrides: 50365032!
setUp
	localLine1 :=  TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	arbitraryCallDuration := 2 * minute.! !

!methodRemoval: TelephoneBillingTest #arbitraryCallDuration stamp: 'AS 3/30/2025 22:43:17'!
arbitraryCallDuration

	^ 2 * minute!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:43:26' prior: 50547991!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| bill|
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekDayWorkHoursFee) * arbitraryCallDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:43:37' prior: 50548008!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	|  bill |
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekDayNonWorkHoursFee) * arbitraryCallDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:43:48' prior: 50548105!
test04WeekendLocalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: localLine2 on: self weekendDay at: self arbitraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekendFee) * arbitraryCallDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:44:00' prior: 50548089!
test05NationalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 nationalFee) * arbitraryCallDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:44:09' prior: 50548121!
test06InternationalCallIsBilledCorrectly
	
	|   bill |
	
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 internationalFee) * arbitraryCallDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:44:32' prior: 50548025!
test07BillIsCorrectlyGenerated
	
	| bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekendDay at: self arbitraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(arbitraryCallDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (localLine1 weekDayWorkHoursFee  * arbitraryCallDuration) + (localLine1 weekDayNonWorkHoursFee * arbitraryCallDuration) + (localLine1 weekendFee * arbitraryCallDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * arbitraryCallDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * arbitraryCallDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:44:35'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:44:35'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:44:35'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:44:35'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:44:35'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:44:35'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:44:35'!
PASSED!

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:44:46'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: 'localLine1 localLine2 nationalLine internationalLine callDuration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:44:46' prior: 50548201!
test04WeekendLocalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: localLine2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekendFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:44:46' prior: 50548170!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| bill|
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekDayWorkHoursFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:44:46' prior: 50548231!
test06InternationalCallIsBilledCorrectly
	
	|   bill |
	
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 internationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:44:46' prior: 50548247!
test07BillIsCorrectlyGenerated
	
	| bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekendDay at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(callDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (localLine1 weekDayWorkHoursFee  * callDuration) + (localLine1 weekDayNonWorkHoursFee * callDuration) + (localLine1 weekendFee * callDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:44:46' prior: 50548149 overrides: 50365032!
setUp
	localLine1 :=  TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	callDuration := 2 * minute.! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:44:46' prior: 50548216!
test05NationalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at: self arbitraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 nationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:44:46' prior: 50548185!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	|  bill |
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekDayNonWorkHoursFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:44:48'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:44:48'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:44:48'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:44:48'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:44:48'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:44:48'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:44:48'!
PASSED!

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:45:22'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: 'localLine1 localLine2 nationalLine internationalLine callDuration timeOfDay'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillingTest methodsFor: 'support' stamp: 'AS 3/30/2025 22:45:21' prior: 50544466!
arbitraryTimeOfDay

	^ timeOfDay! !
!TelephoneBillingTest methodsFor: 'setUp/tearDown' stamp: 'AS 3/30/2025 22:45:34' prior: 50548431 overrides: 50365032!
setUp
	localLine1 :=  TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	callDuration := 2 * minute.
	timeOfDay := TimeOfDay now.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:45:35'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:45:35'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:45:35'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:45:35'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:45:35'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:45:35'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:45:35'!
PASSED!

!methodRemoval: TelephoneBillingTest #arbitraryTimeOfDay stamp: 'AS 3/30/2025 22:45:47'!
arbitraryTimeOfDay

	^ timeOfDay!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:45:47' prior: 50548448!
test05NationalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  timeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 nationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:45:47' prior: 50548368!
test07BillIsCorrectlyGenerated
	
	| bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekendDay at:  timeOfDay for: callDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  timeOfDay for: callDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  timeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(callDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (localLine1 weekDayWorkHoursFee  * callDuration) + (localLine1 weekDayNonWorkHoursFee * callDuration) + (localLine1 weekendFee * callDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:45:47' prior: 50548322!
test04WeekendLocalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: localLine2 on: self weekendDay at:  timeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekendFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:45:47' prior: 50548352!
test06InternationalCallIsBilledCorrectly
	
	|   bill |
	
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  timeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 internationalFee) * callDuration).! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:45:50'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:45:50'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:45:50'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:45:50'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:45:50'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:45:50'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:45:50'!
PASSED!

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:46:03'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: 'localLine1 localLine2 nationalLine internationalLine callDuration arbirtraryTimeOfDay'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:46:03' prior: 50548493 overrides: 50365032!
setUp
	localLine1 :=  TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	callDuration := 2 * minute.
	arbirtraryTimeOfDay := TimeOfDay now.! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:46:03' prior: 50548589!
test04WeekendLocalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekendFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:46:03' prior: 50548528!
test07BillIsCorrectlyGenerated
	
	| bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: callDuration.
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: callDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: callDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(callDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (localLine1 weekDayWorkHoursFee  * callDuration) + (localLine1 weekDayNonWorkHoursFee * callDuration) + (localLine1 weekendFee * callDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * callDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * callDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:46:03' prior: 50548603!
test06InternationalCallIsBilledCorrectly
	
	|   bill |
	
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 internationalFee) * callDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:46:03' prior: 50548514!
test05NationalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: callDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 nationalFee) * callDuration).! !

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:46:12'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: 'localLine1 localLine2 nationalLine internationalLine arbitraryCallDuration arbirtraryTimeOfDay'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:46:12' prior: 50548647!
test04WeekendLocalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekendFee) * arbitraryCallDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:46:12' prior: 50548337!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| bill|
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekDayWorkHoursFee) * arbitraryCallDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:46:12' prior: 50548724!
test06InternationalCallIsBilledCorrectly
	
	|   bill |
	
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 internationalFee) * arbitraryCallDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:46:12' prior: 50548662!
test07BillIsCorrectlyGenerated
	
	| bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(arbitraryCallDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (localLine1 weekDayWorkHoursFee  * arbitraryCallDuration) + (localLine1 weekDayNonWorkHoursFee * arbitraryCallDuration) + (localLine1 weekendFee * arbitraryCallDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * arbitraryCallDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * arbitraryCallDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:46:12' prior: 50548629 overrides: 50365032!
setUp
	localLine1 :=  TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	arbitraryCallDuration := 2 * minute.
	arbirtraryTimeOfDay := TimeOfDay now.! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:46:12' prior: 50548739!
test05NationalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 nationalFee) * arbitraryCallDuration).! !
!TelephoneBillingTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 22:46:12' prior: 50548463!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	|  bill |
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + ((localLine1 weekDayNonWorkHoursFee) * arbitraryCallDuration).! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:46:14'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:46:14'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:46:14'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:46:14'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:46:14'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:46:14'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:46:14'!
PASSED!
!TelephoneBillingTest methodsFor: 'setUp/tearDown' stamp: 'AS 3/30/2025 22:46:25' prior: 50548878 overrides: 50365032!
setUp
	localLine1 :=  TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	arbitraryCallDuration := 2 * minute.
	arbirtraryTimeOfDay := TimeOfDay now.! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:48:11'!
weekDayWorkHoursCost

	^ localLine1 weekDayWorkHoursFee  * arbitraryCallDuration! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:48:11' prior: 50548812!
test07BillIsCorrectlyGenerated
	
	| bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(arbitraryCallDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (self weekDayWorkHoursCost) + (localLine1 weekDayNonWorkHoursFee * arbitraryCallDuration) + (localLine1 weekendFee * arbitraryCallDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * arbitraryCallDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * arbitraryCallDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:49:12' prior: 50548780!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| bill|
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + self weekDayWorkHoursCost .! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:12'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:49:12'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:12'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:12'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:12'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:12'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:12'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:49:12'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:49:34' prior: 50548912!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	|  bill |
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + (localLine1 weekDayNonWorkHoursFee * arbitraryCallDuration).! !

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:34'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:49:34'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:34'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:34'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:34'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:34'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:34'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:49:34'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:49:38' prior: 50549031!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	|  bill |
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + localLine1 weekDayNonWorkHoursFee * arbitraryCallDuration.! !

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:38'!
FAILURE!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:49:42' prior: 50549047!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	|  bill |
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + (localLine1 weekDayNonWorkHoursFee * arbitraryCallDuration).! !

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:42'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:49:42'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:42'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:42'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:42'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:42'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:49:42'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:49:42'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:51:01'!
weekDayNonWorkHoursCost

	^ localLine1 weekDayNonWorkHoursFee * arbitraryCallDuration! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:51:01' prior: 50549063!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	|  bill |
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + (self weekDayNonWorkHoursCost).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:51:01' prior: 50548953!
test07BillIsCorrectlyGenerated
	
	| bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(arbitraryCallDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (self weekDayWorkHoursCost) + (self weekDayNonWorkHoursCost) + (localLine1 weekendFee * arbitraryCallDuration).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * arbitraryCallDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * arbitraryCallDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:51:03'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:51:03'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:51:03'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:51:03'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:51:03'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:51:03'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:51:03'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:51:03'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:51:15'!
weekendCost

	^ localLine1 weekendFee * arbitraryCallDuration! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:51:15' prior: 50549099!
test07BillIsCorrectlyGenerated
	
	| bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(arbitraryCallDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (self weekDayWorkHoursCost) + (self weekDayNonWorkHoursCost) + (self weekendCost).
	self assert: bill nationalUsage equals: (localLine1 nationalFee) * arbitraryCallDuration.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * arbitraryCallDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:51:29' prior: 50548765!
test04WeekendLocalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + self weekendCost.! !

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:51:29'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:51:29'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:51:29'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:51:29'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:51:29'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:51:29'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:51:29'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:51:29'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:52:19'!
nationalCost

	^ (localLine1 nationalFee) * arbitraryCallDuration! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:52:19' prior: 50548897!
test05NationalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + (self nationalCost).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:52:19' prior: 50549166!
test07BillIsCorrectlyGenerated
	
	| bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(arbitraryCallDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (self weekDayWorkHoursCost) + (self weekDayNonWorkHoursCost) + (self weekendCost).
	self assert: bill nationalUsage equals: self nationalCost.
	self assert: bill internationalUsage equals: (localLine1 internationalFee) * arbitraryCallDuration.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:52:30'!
internationalCost

	^ (localLine1 internationalFee) * arbitraryCallDuration! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:52:30' prior: 50549260!
test07BillIsCorrectlyGenerated
	
	| bill|
	
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(arbitraryCallDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (self weekDayWorkHoursCost) + (self weekDayNonWorkHoursCost) + (self weekendCost).
	self assert: bill nationalUsage equals: self nationalCost.
	self assert: bill internationalUsage equals: self internationalCost.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:52:30' prior: 50548796!
test06InternationalCallIsBilledCorrectly
	
	|   bill |
	
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + (self internationalCost).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:52:32'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:52:32'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:52:32'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:52:32'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:52:32'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:52:32'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:52:32'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:52:32'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:52:41' prior: 50549326!
test07BillIsCorrectlyGenerated
	
	| bill|
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(arbitraryCallDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (self weekDayWorkHoursCost) + (self weekDayNonWorkHoursCost) + (self weekendCost).
	self assert: bill nationalUsage equals: self nationalCost.
	self assert: bill internationalUsage equals: self internationalCost.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:52:41'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:52:41'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:52:41'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:52:41'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:52:41'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:52:41'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:52:41'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:52:41'!
PASSED!

!classDefinition: #TelephoneBillingTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 22:53:59'!
TestCase subclass: #TelephoneBillingTest
	instanceVariableNames: 'localLine1 localLine2 nationalLine internationalLine arbitraryCallDuration arbirtraryTimeOfDay billl'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneBillingTest methodsFor: 'setUp/tearDown' stamp: 'AS 3/30/2025 22:53:51' prior: 50548929 overrides: 50365032!
setUp
	localLine1 :=  TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	arbitraryCallDuration := 2 * minute.
	arbirtraryTimeOfDay := TimeOfDay now.
	billl := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:54:09' prior: 50547199!
test01UnusedLineIsBilledBasicFee
	
	| bill line |
	line := self localLine1.
	bill := TelephoneLineBill for: line duringMonth: self firstDayOfTodaysMonth.
	
	self assert: billl totalDue equals: line basicMonthlyFee.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:54:11'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:54:11'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:54:11'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:54:11'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:54:11'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:54:11'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:54:11'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:54:11'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:54:26' prior: 50549491!
test01UnusedLineIsBilledBasicFee
	
	self assert: billl totalDue equals: localLine1 basicMonthlyFee.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:54:26'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:54:26'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:54:35' prior: 50549017!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.

	self assert: billl totalDue equals: (localLine1 basicMonthlyFee ) + self weekDayWorkHoursCost .! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:54:35'!
FAILURE!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:54:49'!
FAILURE!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:55:13' prior: 50549508!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| bill|
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: billl totalDue equals: (localLine1 basicMonthlyFee ) + self weekDayWorkHoursCost .! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:55:14'!
FAILURE!

billl totalDue!
!TelephoneBillingTest methodsFor: 'setUp/tearDown' stamp: 'AS 3/30/2025 22:56:42' prior: 50549470 overrides: 50365032!
setUp
	localLine1 :=  TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'.
	localLine2 := TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541145555555'.
	nationalLine := TelephoneLine fromRegion: 'Rosario' in: 'Argentina' number: '+543411234567'.
	internationalLine := TelephoneLine fromRegion: 'Montevideo' in: 'Uruguay' number: '+598 2 123 4567'.
	arbitraryCallDuration := 2 * minute.
	arbirtraryTimeOfDay := TimeOfDay now.! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:56:55' prior: 50549519!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| bill|
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + self weekDayWorkHoursCost .! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:56:55'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:56:55'!
ERROR!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:56:55'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:56:55'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:56:55'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:56:55'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:56:55'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:56:55'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:56:55'!
ERROR!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:57:04'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:57:04'!
ERROR!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:57:04'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:57:04'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:57:04'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:57:04'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:57:04'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:57:04'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:57:04'!
ERROR!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:54:09' prior: 50549501!
test01UnusedLineIsBilledBasicFee
	
	| bill line |
	line := self localLine1.
	bill := TelephoneLineBill for: line duringMonth: self firstDayOfTodaysMonth.
	
	self assert: billl totalDue equals: line basicMonthlyFee.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:57:23'!
ERROR!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:57:29' prior: 50549567!
test01UnusedLineIsBilledBasicFee
	
	| bill line |
	line := self localLine1.
	bill := TelephoneLineBill for: line duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: line basicMonthlyFee.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:57:29'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:57:29'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:57:29'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:57:29'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:57:29'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:57:29'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:57:29'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:57:29'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:57:46' prior: 50549577!
test01UnusedLineIsBilledBasicFee
	
	| bill  |
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth.
	
	self assert: bill totalDue equals: localLine1 basicMonthlyFee.! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:58:21'!
bill

	^ TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:58:21' prior: 50549553!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	| bill|
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	bill := self bill.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + self weekDayWorkHoursCost .! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:58:21' prior: 50549084!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	|  bill |
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	bill := self bill.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + (self weekDayNonWorkHoursCost).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:58:21' prior: 50549587!
test01UnusedLineIsBilledBasicFee
	
	| bill  |
	bill := self bill.
	
	self assert: bill totalDue equals: localLine1 basicMonthlyFee.! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:58:21' prior: 50549246!
test05NationalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := self bill.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + (self nationalCost).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:58:21' prior: 50549228!
test04WeekendLocalCallIsBilledCorrectly
	
	| bill |
	
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := self bill.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + self weekendCost.! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:58:21' prior: 50549386!
test06InternationalCallIsBilledCorrectly
	
	|   bill |
	
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := self bill.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee ) + (self internationalCost).! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:58:22'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:58:22'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:58:22'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:58:22'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:58:22'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:58:22'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:58:22'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:58:22'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:58:50' prior: 50549627!
test01UnusedLineIsBilledBasicFee
	
	self assert: self bill totalDue equals: localLine1 basicMonthlyFee.! !

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:58:52'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:58:52'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:58:52'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:58:52'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:58:52'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:58:52'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:58:52'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:58:52'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:59:02' prior: 50549602!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	self assert: self bill totalDue equals: (localLine1 basicMonthlyFee ) + self weekDayWorkHoursCost .! !

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:03'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:59:03'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:03'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:03'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:03'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:03'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:03'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:59:03'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:59:07' prior: 50549614!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	self assert: self bill totalDue equals: (localLine1 basicMonthlyFee ) + (self weekDayNonWorkHoursCost).! !

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:09'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:59:09'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:09'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:09'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:09'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:09'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:09'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:59:09'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:59:12' prior: 50549647!
test04WeekendLocalCallIsBilledCorrectly
	
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	self assert: self bill totalDue equals: (localLine1 basicMonthlyFee ) + self weekendCost.! !

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:14'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:59:14'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:14'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:14'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:14'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:14'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:14'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:59:14'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:59:17' prior: 50549703!
test04WeekendLocalCallIsBilledCorrectly
	
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	
	self assert: self bill totalDue equals: (localLine1 basicMonthlyFee ) + self weekendCost.! !

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:17'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:59:17'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:17'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:17'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:17'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:17'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:17'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:59:17'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:59:20' prior: 50549691!
test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	
	self assert: self bill totalDue equals: (localLine1 basicMonthlyFee ) + (self weekDayNonWorkHoursCost).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:59:22' prior: 50549679!
test02WeekDayWorkHoursLocalCallIsBilledCorrectly
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	
	self assert: self bill totalDue equals: (localLine1 basicMonthlyFee ) + self weekDayWorkHoursCost .! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:59:38' prior: 50549635!
test05NationalCallIsBilledCorrectly
	
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	self assert: self bill totalDue equals: (localLine1 basicMonthlyFee ) + (self nationalCost).! !

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:39'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:59:39'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:39'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:39'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:39'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:39'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:39'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:59:39'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:59:41' prior: 50549749!
test05NationalCallIsBilledCorrectly
	
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	
	self assert: self bill totalDue equals: (localLine1 basicMonthlyFee ) + (self nationalCost).! !

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:41'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:59:41'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:41'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:41'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:41'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:41'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:41'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:59:41'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:59:56' prior: 50549659!
test06InternationalCallIsBilledCorrectly
	
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	self assert: self bill totalDue equals: (localLine1 basicMonthlyFee ) + (self internationalCost).! !
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:59:59' prior: 50549771!
test06InternationalCallIsBilledCorrectly
	
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	
	self assert: self bill totalDue equals: (localLine1 basicMonthlyFee ) + (self internationalCost).! !

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:59'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 22:59:59'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:59'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:59'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:59'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:59'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 22:59:59'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 22:59:59'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 23:00:03' prior: 50549401!
test07BillIsCorrectlyGenerated
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	self assert: (TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month) totalDue equals: (localLine1 basicMonthlyFee + 
	(arbitraryCallDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: (TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month) basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: (TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month) localUsage equals: (self weekDayWorkHoursCost) + (self weekDayNonWorkHoursCost) + (self weekendCost).
	self assert: (TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month) nationalUsage equals: self nationalCost.
	self assert: (TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month) internationalUsage equals: self internationalCost.
	self assert: (TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month) show equals: (OrderedCollection with: 'Bill for line number ', (TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month) line number , ' during period ', (TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month) month asString
											           with: '		Monthly fee: ', (TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month) basicMonthlyFee asString
												    with: 'Local usage: ', (TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month) localUsage asString
												    with: 'National and international usage: ', (TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month) nationalAndInternationalUsage asString
												    with: 'Total due: ' , (TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month) totalDue asString).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:00:17'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:00:17'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:17'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:17'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:17'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:17'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:17'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:00:17'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 22:52:41' prior: 50549795!
test07BillIsCorrectlyGenerated
	
	| bill|
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(arbitraryCallDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (self weekDayWorkHoursCost) + (self weekDayNonWorkHoursCost) + (self weekendCost).
	self assert: bill nationalUsage equals: self nationalCost.
	self assert: bill internationalUsage equals: self internationalCost.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:00:33'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:00:33'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:33'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:33'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:33'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:33'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:33'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:00:33'!
PASSED!
!TelephoneBillingTest methodsFor: 'tests' stamp: 'AS 3/30/2025 23:00:43' prior: 50549878!
test07BillIsCorrectlyGenerated
	
	| bill|
	
	localLine1 calls: localLine2 on: self weekDay at: self weekDayWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekDay at: self weekDayNonWorkingHoursTime for: arbitraryCallDuration.
	localLine1 calls: localLine2 on: self weekendDay at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: nationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	localLine1 calls: internationalLine on: self firstDayOfTodaysMonth at:  arbirtraryTimeOfDay for: arbitraryCallDuration.
	bill := self bill.
	
	self assert: bill totalDue equals: (localLine1 basicMonthlyFee + 
	(arbitraryCallDuration  * (localLine1 weekDayWorkHoursFee  + localLine1 weekDayNonWorkHoursFee + localLine1 weekendFee + localLine1 nationalFee + localLine1 internationalFee))).
	self assert: bill basicMonthlyFee equals: localLine1 basicMonthlyFee.
	self assert: bill localUsage equals: (self weekDayWorkHoursCost) + (self weekDayNonWorkHoursCost) + (self weekendCost).
	self assert: bill nationalUsage equals: self nationalCost.
	self assert: bill internationalUsage equals: self internationalCost.
	self assert: bill show equals: (OrderedCollection with: 'Bill for line number ', bill line number , ' during period ', bill month asString
											           with: '		Monthly fee: ', bill basicMonthlyFee asString
												    with: 'Local usage: ', bill localUsage asString
												    with: 'National and international usage: ', bill nationalAndInternationalUsage asString
												    with: 'Total due: ' , bill totalDue asString).! !

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:00:43'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:00:43'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:43'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:43'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:43'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:43'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:00:43'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:00:43'!
PASSED!

!testRun: #TelephoneBillingTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:01:06'!
PASSED!

!testRun: #TelephoneBillingTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:01:06'!
PASSED!

!testRun: #TelephoneBillingTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:01:06'!
PASSED!

!testRun: #TelephoneBillingTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:01:06'!
PASSED!

!testRun: #TelephoneBillingTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:01:06'!
PASSED!

!testRun: #TelephoneBillingTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:01:06'!
PASSED!

!testRun: #TelephoneBillingTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:01:06'!
PASSED!

!classRenamed: #TelephoneBillingTest as: #TelephoneBillTest stamp: 'AS 3/30/2025 23:03:45'!
Smalltalk renameClassNamed: #TelephoneBillingTest as: #TelephoneBillTest!

!classRenamed: #TelephoneBillTest as: #TelephoneLineBillTest stamp: 'AS 3/30/2025 23:03:52'!
Smalltalk renameClassNamed: #TelephoneBillTest as: #TelephoneLineBillTest!

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:03:56'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:03:56'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:03:56'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:03:56'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:03:56'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:03:56'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:03:56'!
PASSED!

!classDefinition: #CallBiller category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 23:06:07'!
Object subclass: #CallBiller
	instanceVariableNames: 'call bill'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!

!classDefinition: #TelephoneLineBillTest category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 23:06:27'!
TestCase subclass: #TelephoneLineBillTest
	instanceVariableNames: 'localLine1 localLine2 nationalLine internationalLine arbitraryCallDuration arbirtraryTimeOfDay'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine class methodsFor: 'fees' stamp: 'AS 3/30/2025 23:07:52' prior: 50544959!
weekendFee
	^0.1 * dollar / minute! !

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:07:52'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:07:52'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:07:52'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:07:52'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:07:52'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:07:52'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:07:52'!
PASSED!

----SNAPSHOT----(30 March 2025 23:08:13) CuisUniversity-6350.image priorSource: 6878262!
!Behavior method!
nationalFee
	#_coverageTracker18544331_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544331_
		coverAll:
			{15 to: 18}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18544331_
		coverAll:
			{20 to: 24}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18544331_
		coverAll:
			{26 to: 36}
		evaluating: [ receiver2 nationalFee ]
		thatSends: #nationalFee
		to: receiver2 ] value.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18544337_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18544337_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18544337_
		coverAll:
			{38 to: 52}
		evaluating: [ receiver1 isInternational ]
		thatSends: #isInternational
		to: receiver1 ] value.! !
!Behavior method!
for: aCallToBill
	#_coverageTracker18544341_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 := [ | receiver4 |
	receiver4 := [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18544341_
		coverAll:
			{21 to: 24}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18544341_
		coverAll:
			{26 to: 38}
		evaluating: [ receiver1 allSubclasses ]
		thatSends: #allSubclasses
		to: receiver1 ] value.
	#_coverageTracker18544341_
		coverAll:
			{40 to: 46}
		evaluating: [
			receiver3 detect: [ :aSubclass |
				[ | receiver2 |
				receiver2 := #_coverageTracker18544341_
					cover: (62 to: 70)
					declaredAt: (50 to: 58)
					by: aSubclass.
				#_coverageTracker18544341_
					coverAll:
						{72 to: 81}
					evaluating: [
						receiver2 canHandle:
							(#_coverageTracker18544341_
								cover: (83 to: 93)
								declaredAt: (6 to: 16)
								by: aCallToBill) ]
					thatSends: #canHandle:
					to: receiver2 ] value ]]
		thatSends: #detect:
		to: receiver3 ] value.
	#_coverageTracker18544341_
		coverAll:
			{97 to: 99}
		evaluating: [ receiver4 new ]
		thatSends: #new
		to: receiver4 ] value.
	#_coverageTracker18544341_
		coverAll:
			{101 to: 114}
		evaluating: [
			receiver5 initializeFor:
				(#_coverageTracker18544341_
					cover: (116 to: 126)
					declaredAt: (6 to: 16)
					by: aCallToBill) ]
		thatSends: #initializeFor:
		to: receiver5 ] value.! !
!Behavior method!
initializeFromRegion: aCallingRegion in: aCallingCountry number: aLineNumber
	#_coverageTracker18544349_ markAsExecuted.
	#_coverageTracker18544349_
		cover: (82 to: 87)
		declaredAt: (82 to: 87)
		by:
			(region := #_coverageTracker18544349_
				cover: (92 to: 105)
				declaredAt: (23 to: 36)
				by: aCallingRegion).
	#_coverageTracker18544349_
		cover: (109 to: 115)
		declaredAt: (109 to: 115)
		by:
			(country := #_coverageTracker18544349_
				cover: (120 to: 134)
				declaredAt: (42 to: 56)
				by: aCallingCountry).
	#_coverageTracker18544349_
		cover: (138 to: 143)
		declaredAt: (138 to: 143)
		by:
			(number := #_coverageTracker18544349_
				cover: (148 to: 158)
				declaredAt: (66 to: 76)
				by: aLineNumber).! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18544356_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 := [ | receiver1 |
	receiver1 := #_coverageTracker18544356_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18544356_
		coverAll:
			{38 to: 44}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker18544356_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver5 and: [
				[ | receiver4 |
				receiver4 := [ | receiver2 |
				receiver2 := #_coverageTracker18544356_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18544356_
					coverAll:
						{58 to: 74}
					evaluating: [
						receiver2 isCallOnAWeekDay:
							(#_coverageTracker18544356_
								cover: (76 to: 86)
								declaredAt: (12 to: 22)
								by: aCallToBill) ]
					thatSends: #isCallOnAWeekDay:
					to: receiver2 ] value.
				#_coverageTracker18544356_
					coverAll:
						{89 to: 92}
					evaluating: [
						receiver4 and: [
							[ | receiver3 |
							receiver3 := #_coverageTracker18544356_
								coverAll:
									{95 to: 98}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker18544356_
								coverAll:
									{100 to: 124}
								evaluating: [
									receiver3 isCallDuringWorkingHours:
										(#_coverageTracker18544356_
											cover: (126 to: 136)
											declaredAt: (12 to: 22)
											by: aCallToBill) ]
								thatSends: #isCallDuringWorkingHours:
								to: receiver3 ] value ]]
					thatSends: #and:
					to: receiver4 ] value ]]
		thatSends: #and:
		to: receiver5 ] value.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18544364_ markAsExecuted.
	^ #_coverageTracker18544364_
		coverAll:
			{26 to: 30}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
region
	#_coverageTracker18544364_ markAsExecuted.
	^ #_coverageTracker18544364_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: region.! !
!Behavior method!
localUsage
	#_coverageTracker18544366_ markAsExecuted.
	^ #_coverageTracker18544366_
		cover: (14 to: 23)
		declaredAt: (14 to: 23)
		by: localUsage.! !
!Behavior method!
initializeFor: aCallToBill
	#_coverageTracker18544368_ markAsExecuted.
	#_coverageTracker18544368_
		cover: (30 to: 33)
		declaredAt: (30 to: 33)
		by:
			(call := #_coverageTracker18544368_
				cover: (38 to: 48)
				declaredAt: (16 to: 26)
				by: aCallToBill).! !
!Behavior method!
nationalUsage
	#_coverageTracker18544370_ markAsExecuted.
	^ #_coverageTracker18544370_
		cover: (17 to: 29)
		declaredAt: (17 to: 29)
		by: nationalUsage.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18544372_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18544372_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18544372_
		coverAll:
			{38 to: 47}
		evaluating: [ receiver1 isNational ]
		thatSends: #isNational
		to: receiver1 ] value.! !
!Behavior method!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDate at: aTimeOfDay for: aCallDuration
	#_coverageTracker18544374_ markAsExecuted.
	#_coverageTracker18544374_
		cover: (98 to: 103)
		declaredAt: (98 to: 103)
		by:
			(caller := #_coverageTracker18544374_
				cover: (108 to: 119)
				declaredAt: (17 to: 28)
				by: aCallingLine).
	#_coverageTracker18544374_
		cover: (123 to: 128)
		declaredAt: (123 to: 128)
		by:
			(callee := #_coverageTracker18544374_
				cover: (133 to: 149)
				declaredAt: (34 to: 50)
				by: aLineThatIsCalled).
	#_coverageTracker18544374_
		cover: (153 to: 156)
		declaredAt: (153 to: 156)
		by:
			(date := #_coverageTracker18544374_
				cover: (161 to: 165)
				declaredAt: (56 to: 60)
				by: aDate).
	#_coverageTracker18544374_
		cover: (169 to: 177)
		declaredAt: (169 to: 177)
		by:
			(timeOfDay := #_coverageTracker18544374_
				cover: (182 to: 191)
				declaredAt: (66 to: 75)
				by: aTimeOfDay).
	#_coverageTracker18544374_
		cover: (195 to: 202)
		declaredAt: (195 to: 202)
		by:
			(duration := #_coverageTracker18544374_
				cover: (207 to: 219)
				declaredAt: (82 to: 94)
				by: aCallDuration).! !
!Behavior method!
caller
	#_coverageTracker18544378_ markAsExecuted.
	^ #_coverageTracker18544378_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: caller.! !
!Behavior method!
add: aCallCostToAdd
	#_coverageTracker18544380_ markAsExecuted.
	#_coverageTracker18544380_
		cover: (32 to: 36)
		declaredAt: (23 to: 27)
		by:
			(total := [ | receiver1 |
			receiver1 := #_coverageTracker18544380_
				cover: (23 to: 27)
				declaredAt: (23 to: 27)
				by: total.
			#_coverageTracker18544380_
				coverAll:
					{38 to: 38}
				evaluating: [
					receiver1 +
						(#_coverageTracker18544380_
							cover: (40 to: 53)
							declaredAt: (6 to: 19)
							by: aCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
addToBill
	#_coverageTracker18544384_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18544384_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by: bill.
	#_coverageTracker18544384_
		coverAll:
			{19 to: 29}
		evaluating: [
			receiver2 addAsLocal:
				[ | receiver1 |
				receiver1 := #_coverageTracker18544384_
					coverAll:
						{31 to: 34}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18544384_
					coverAll:
						{36 to: 39}
					evaluating: [ receiver1 cost ]
					thatSends: #cost
					to: receiver1 ] value ]
		thatSends: #addAsLocal:
		to: receiver2 ] value.! !
!Behavior method!
addAsInternational: anInternationalCallCostToAdd
	#_coverageTracker18544387_ markAsExecuted.
	#_coverageTracker18544387_
		cover: (74 to: 91)
		declaredAt: (52 to: 69)
		by:
			(internationalUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18544387_
				cover: (52 to: 69)
				declaredAt: (52 to: 69)
				by: internationalUsage.
			#_coverageTracker18544387_
				coverAll:
					{93 to: 93}
				evaluating: [
					receiver1 +
						(#_coverageTracker18544387_
							cover: (95 to: 122)
							declaredAt: (21 to: 48)
							by: anInternationalCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
addAsLocal: aLocalCallCostToAdd
	#_coverageTracker18544391_ markAsExecuted.
	#_coverageTracker18544391_
		cover: (49 to: 58)
		declaredAt: (35 to: 44)
		by:
			(localUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18544391_
				cover: (35 to: 44)
				declaredAt: (35 to: 44)
				by: localUsage.
			#_coverageTracker18544391_
				coverAll:
					{60 to: 60}
				evaluating: [
					receiver1 +
						(#_coverageTracker18544391_
							cover: (62 to: 80)
							declaredAt: (13 to: 31)
							by: aLocalCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
calculateTotalCost
	"Se podria argumentar que si agrego un tipo de llamada debo modificar este metodo, y que por lo tanto seria mejor sumar los costos
	de manera indistinta, pero creo que el hecho de que haya distintos tipos de llamada es esencial a la factura (por el enunciado), ya
	que entiendo que pide que se discriminen los costos, lo cual no se podria hacer si no se diferenciaran los tipos de estos.
	Por lo tanto tiene sentido tener que ademas modificar la factura si se agrega un nuevo tipo."
	#_coverageTracker18544397_ markAsExecuted.
	#_coverageTracker18544397_
		cover: (509 to: 518)
		declaredAt: (509 to: 518)
		by:
			(localUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18544397_
				coverAll:
					{523 to: 523}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker18544397_
				coverAll:
					{524 to: 524}
				evaluating: [
					receiver1 *
						(#_coverageTracker18544397_
							coverAll:
								{525 to: 530}
							by: dollar) ]
				thatSends: #*
				to: receiver1 ] value).
	#_coverageTracker18544397_
		cover: (534 to: 546)
		declaredAt: (534 to: 546)
		by:
			(nationalUsage := [ | receiver2 |
			receiver2 := #_coverageTracker18544397_
				coverAll:
					{551 to: 551}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker18544397_
				coverAll:
					{552 to: 552}
				evaluating: [
					receiver2 *
						(#_coverageTracker18544397_
							coverAll:
								{553 to: 558}
							by: dollar) ]
				thatSends: #*
				to: receiver2 ] value).
	#_coverageTracker18544397_
		cover: (562 to: 579)
		declaredAt: (562 to: 579)
		by:
			(internationalUsage := [ | receiver3 |
			receiver3 := #_coverageTracker18544397_
				coverAll:
					{584 to: 584}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker18544397_
				coverAll:
					{585 to: 585}
				evaluating: [
					receiver3 *
						(#_coverageTracker18544397_
							coverAll:
								{586 to: 591}
							by: dollar) ]
				thatSends: #*
				to: receiver3 ] value).
	[ | receiver7 |
	receiver7 := [ | receiver4 |
	receiver4 := #_coverageTracker18544397_
		cover: (595 to: 598)
		declaredAt: (595 to: 598)
		by: line.
	#_coverageTracker18544397_
		coverAll:
			{600 to: 612}
		evaluating: [ receiver4 outgoingCalls ]
		thatSends: #outgoingCalls
		to: receiver4 ] value.
	#_coverageTracker18544397_
		coverAll:
			{614 to: 616}
		evaluating: [
			receiver7 do: [ :aCall |
				[ | receiver6 |
				receiver6 := [ | receiver5 |
				receiver5 := #_coverageTracker18544397_
					coverAll:
						{630 to: 639}
					by: CallBiller.
				#_coverageTracker18544397_
					coverAll:
						{641 to: 644. 652 to: 654}
					evaluating: [
						receiver5
							for:
								(#_coverageTracker18544397_
									cover: (646 to: 650)
									declaredAt: (621 to: 625)
									by: aCall)
							in:
								(#_coverageTracker18544397_
									coverAll:
										{656 to: 659}
									byLiteralOrPseudoVariable: self) ]
					thatSends: #for:in:
					to: receiver5 ] value.
				#_coverageTracker18544397_
					coverAll:
						{662 to: 670}
					evaluating: [ receiver6 addToBill ]
					thatSends: #addToBill
					to: receiver6 ] value ]]
		thatSends: #do:
		to: receiver7 ] value.
	#_coverageTracker18544397_
		cover: (677 to: 681)
		declaredAt: (677 to: 681)
		by:
			(total := [ | receiver11 |
			receiver11 := [ | receiver10 |
			receiver10 := [ | receiver9 |
			receiver9 := [ | receiver8 |
			receiver8 := #_coverageTracker18544397_
				cover: (686 to: 689)
				declaredAt: (595 to: 598)
				by: line.
			#_coverageTracker18544397_
				coverAll:
					{691 to: 705}
				evaluating: [ receiver8 basicMonthlyFee ]
				thatSends: #basicMonthlyFee
				to: receiver8 ] value.
			#_coverageTracker18544397_
				coverAll:
					{707 to: 707}
				evaluating: [
					receiver9 +
						(#_coverageTracker18544397_
							cover: (709 to: 718)
							declaredAt: (509 to: 518)
							by: localUsage) ]
				thatSends: #+
				to: receiver9 ] value.
			#_coverageTracker18544397_
				coverAll:
					{720 to: 720}
				evaluating: [
					receiver10 +
						(#_coverageTracker18544397_
							cover: (722 to: 734)
							declaredAt: (534 to: 546)
							by: nationalUsage) ]
				thatSends: #+
				to: receiver10 ] value.
			#_coverageTracker18544397_
				coverAll:
					{736 to: 736}
				evaluating: [
					receiver11 +
						(#_coverageTracker18544397_
							cover: (738 to: 755)
							declaredAt: (562 to: 579)
							by: internationalUsage) ]
				thatSends: #+
				to: receiver11 ] value).! !
!Behavior method!
weekendFee
	#_coverageTracker18544417_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544417_
		coverAll:
			{14 to: 16}
		byLiteralOrPseudoVariable: 0.1.
	#_coverageTracker18544417_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver1 *
				(#_coverageTracker18544417_
					coverAll:
						{20 to: 25}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18544417_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver2 /
				(#_coverageTracker18544417_
					coverAll:
						{29 to: 34}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
show
	#_coverageTracker18544424_ markAsExecuted.
	^ [ | receiver15 |
	receiver15 := #_coverageTracker18544424_
		coverAll:
			{9 to: 25}
		by: OrderedCollection.
	#_coverageTracker18544424_
		coverAll:
			{27 to: 31. 137 to: 141. 203 to: 207. 262 to: 266. 366 to: 370}
		evaluating: [
			receiver15
				with:
					[ | receiver5 |
					receiver5 := [ | receiver3 |
					receiver3 := [ | receiver2 |
					receiver2 := #_coverageTracker18544424_
						coverAll:
							{33 to: 55}
						byLiteralOrPseudoVariable: 'Bill for line number '.
					#_coverageTracker18544424_
						coverAll:
							{56 to: 56}
						evaluating: [
							receiver2 ,
								[ | receiver1 |
								receiver1 := #_coverageTracker18544424_
									cover: (58 to: 61)
									declaredAt: (58 to: 61)
									by: line.
								#_coverageTracker18544424_
									coverAll:
										{63 to: 68}
									evaluating: [ receiver1 number ]
									thatSends: #number
									to: receiver1 ] value ]
						thatSends: #,
						to: receiver2 ] value.
					#_coverageTracker18544424_
						coverAll:
							{70 to: 70}
						evaluating: [
							receiver3 ,
								(#_coverageTracker18544424_
									coverAll:
										{72 to: 88}
									byLiteralOrPseudoVariable: ' during period ') ]
						thatSends: #,
						to: receiver3 ] value.
					#_coverageTracker18544424_
						coverAll:
							{89 to: 89}
						evaluating: [
							receiver5 ,
								[ | receiver4 |
								receiver4 := #_coverageTracker18544424_
									cover: (91 to: 104)
									declaredAt: (91 to: 104)
									by: monthOfBilling.
								#_coverageTracker18544424_
									coverAll:
										{106 to: 113}
									evaluating: [ receiver4 asString ]
									thatSends: #asString
									to: receiver4 ] value ]
						thatSends: #,
						to: receiver5 ] value
				with:
					[ | receiver7 |
					receiver7 := #_coverageTracker18544424_
						coverAll:
							{143 to: 159}
						byLiteralOrPseudoVariable: '		Monthly fee: '.
					#_coverageTracker18544424_
						coverAll:
							{160 to: 160}
						evaluating: [
							receiver7 ,
								[ | receiver6 |
								receiver6 := #_coverageTracker18544424_
									cover: (162 to: 176)
									declaredAt: (162 to: 176)
									by: basicMonthlyFee.
								#_coverageTracker18544424_
									coverAll:
										{178 to: 185}
									evaluating: [ receiver6 asString ]
									thatSends: #asString
									to: receiver6 ] value ]
						thatSends: #,
						to: receiver7 ] value
				with:
					[ | receiver9 |
					receiver9 := #_coverageTracker18544424_
						coverAll:
							{209 to: 223}
						byLiteralOrPseudoVariable: 'Local usage: '.
					#_coverageTracker18544424_
						coverAll:
							{224 to: 224}
						evaluating: [
							receiver9 ,
								[ | receiver8 |
								receiver8 := #_coverageTracker18544424_
									cover: (226 to: 235)
									declaredAt: (226 to: 235)
									by: localUsage.
								#_coverageTracker18544424_
									coverAll:
										{237 to: 244}
									evaluating: [ receiver8 asString ]
									thatSends: #asString
									to: receiver8 ] value ]
						thatSends: #,
						to: receiver9 ] value
				with:
					[ | receiver12 |
					receiver12 := #_coverageTracker18544424_
						coverAll:
							{268 to: 303}
						byLiteralOrPseudoVariable: 'National and international usage: '.
					#_coverageTracker18544424_
						coverAll:
							{304 to: 304}
						evaluating: [
							receiver12 ,
								[ | receiver11 |
								receiver11 := [ | receiver10 |
								receiver10 := #_coverageTracker18544424_
									coverAll:
										{306 to: 309}
									byLiteralOrPseudoVariable: self.
								#_coverageTracker18544424_
									coverAll:
										{311 to: 339}
									evaluating: [ receiver10 nationalAndInternationalUsage ]
									thatSends: #nationalAndInternationalUsage
									to: receiver10 ] value.
								#_coverageTracker18544424_
									coverAll:
										{341 to: 348}
									evaluating: [ receiver11 asString ]
									thatSends: #asString
									to: receiver11 ] value ]
						thatSends: #,
						to: receiver12 ] value
				with:
					[ | receiver14 |
					receiver14 := #_coverageTracker18544424_
						coverAll:
							{372 to: 384}
						byLiteralOrPseudoVariable: 'Total due: '.
					#_coverageTracker18544424_
						coverAll:
							{386 to: 386}
						evaluating: [
							receiver14 ,
								[ | receiver13 |
								receiver13 := #_coverageTracker18544424_
									cover: (388 to: 392)
									declaredAt: (388 to: 392)
									by: total.
								#_coverageTracker18544424_
									coverAll:
										{394 to: 401}
									evaluating: [ receiver13 asString ]
									thatSends: #asString
									to: receiver13 ] value ]
						thatSends: #,
						to: receiver14 ] value ]
		thatSends: #with:with:with:with:with:
		to: receiver15 ] value.! !
!Behavior method!
calls: aLineThatWasCalled on: aDate at: aTimeOfDay for: aCallDuration
	#_coverageTracker18544444_ markAsExecuted.
	[ | receiver2 |
	receiver2 := #_coverageTracker18544444_
		cover: (72 to: 84)
		declaredAt: (72 to: 84)
		by: outgoingCalls.
	#_coverageTracker18544444_
		coverAll:
			{86 to: 89}
		evaluating: [
			receiver2 add:
				[ | receiver1 |
				receiver1 := #_coverageTracker18544444_
					coverAll:
						{92 to: 95}
					by: Call.
				#_coverageTracker18544444_
					coverAll:
						{97 to: 101. 108 to: 110. 131 to: 133. 141 to: 143. 156 to: 159}
					evaluating: [
						receiver1
							from:
								(#_coverageTracker18544444_
									coverAll:
										{103 to: 106}
									byLiteralOrPseudoVariable: self)
							to:
								(#_coverageTracker18544444_
									cover: (112 to: 129)
									declaredAt: (8 to: 25)
									by: aLineThatWasCalled)
							on:
								(#_coverageTracker18544444_
									cover: (135 to: 139)
									declaredAt: (31 to: 35)
									by: aDate)
							at:
								(#_coverageTracker18544444_
									cover: (145 to: 154)
									declaredAt: (41 to: 50)
									by: aTimeOfDay)
							for:
								(#_coverageTracker18544444_
									cover: (161 to: 173)
									declaredAt: (57 to: 69)
									by: aCallDuration) ]
					thatSends: #from:to:on:at:for:
					to: receiver1 ] value ]
		thatSends: #add:
		to: receiver2 ] value.! !
!Behavior method!
country
	#_coverageTracker18544450_ markAsExecuted.
	^ #_coverageTracker18544450_
		cover: (11 to: 17)
		declaredAt: (11 to: 17)
		by: country.! !
!Behavior method!
from: aCallingLine to: aLineThatIsCalled on: aDate at: aTimeOfDay for: aCallDuration
	#_coverageTracker18544453_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544453_
		coverAll:
			{88 to: 91}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18544453_
		coverAll:
			{93 to: 95}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker18544453_
		coverAll:
			{97 to: 111. 126 to: 128. 148 to: 150. 158 to: 160. 173 to: 176}
		evaluating: [
			receiver2
				initializeFrom:
					(#_coverageTracker18544453_
						cover: (113 to: 124)
						declaredAt: (7 to: 18)
						by: aCallingLine)
				to:
					(#_coverageTracker18544453_
						cover: (130 to: 146)
						declaredAt: (24 to: 40)
						by: aLineThatIsCalled)
				on:
					(#_coverageTracker18544453_
						cover: (152 to: 156)
						declaredAt: (46 to: 50)
						by: aDate)
				at:
					(#_coverageTracker18544453_
						cover: (162 to: 171)
						declaredAt: (56 to: 65)
						by: aTimeOfDay)
				for:
					(#_coverageTracker18544453_
						cover: (178 to: 190)
						declaredAt: (72 to: 84)
						by: aCallDuration) ]
		thatSends: #initializeFrom:to:on:at:for:
		to: receiver2 ] value.! !
!Behavior method!
nationalAndInternationalUsage
	#_coverageTracker18544459_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18544459_
		cover: (33 to: 45)
		declaredAt: (33 to: 45)
		by: nationalUsage.
	#_coverageTracker18544459_
		coverAll:
			{47 to: 47}
		evaluating: [
			receiver1 +
				(#_coverageTracker18544459_
					cover: (49 to: 66)
					declaredAt: (49 to: 66)
					by: internationalUsage) ]
		thatSends: #+
		to: receiver1 ] value.! !
!Behavior method!
fee
	#_coverageTracker18544461_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544461_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18544461_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18544461_
		coverAll:
			{21 to: 39}
		evaluating: [ receiver2 weekDayWorkHoursFee ]
		thatSends: #weekDayWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
nationalFee
	#_coverageTracker18544465_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544465_
		coverAll:
			{15 to: 16}
		byLiteralOrPseudoVariable: 14.
	#_coverageTracker18544465_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver1 *
				(#_coverageTracker18544465_
					coverAll:
						{20 to: 25}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18544465_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver2 /
				(#_coverageTracker18544465_
					coverAll:
						{29 to: 34}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker18544469_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18544469_
		coverAll:
			{19 to: 20}
		byLiteralOrPseudoVariable: 10.
	#_coverageTracker18544469_
		coverAll:
			{22 to: 22}
		evaluating: [
			receiver1 *
				(#_coverageTracker18544469_
					coverAll:
						{24 to: 29}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.! !
!Behavior method!
for: aCallToBill in: aRequestingBill
	#_coverageTracker18544471_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 := [ | receiver4 |
	receiver4 := [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18544471_
		coverAll:
			{42 to: 45}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18544471_
		coverAll:
			{47 to: 59}
		evaluating: [ receiver1 allSubclasses ]
		thatSends: #allSubclasses
		to: receiver1 ] value.
	#_coverageTracker18544471_
		coverAll:
			{61 to: 67}
		evaluating: [
			receiver3 detect: [ :aSubclass |
				[ | receiver2 |
				receiver2 := #_coverageTracker18544471_
					cover: (83 to: 91)
					declaredAt: (71 to: 79)
					by: aSubclass.
				#_coverageTracker18544471_
					coverAll:
						{93 to: 102}
					evaluating: [
						receiver2 canHandle:
							(#_coverageTracker18544471_
								cover: (104 to: 114)
								declaredAt: (6 to: 16)
								by: aCallToBill) ]
					thatSends: #canHandle:
					to: receiver2 ] value ]]
		thatSends: #detect:
		to: receiver3 ] value.
	#_coverageTracker18544471_
		coverAll:
			{118 to: 120}
		evaluating: [ receiver4 new ]
		thatSends: #new
		to: receiver4 ] value.
	#_coverageTracker18544471_
		coverAll:
			{122 to: 135. 149 to: 151}
		evaluating: [
			receiver5
				initializeFor:
					(#_coverageTracker18544471_
						cover: (137 to: 147)
						declaredAt: (6 to: 16)
						by: aCallToBill)
				in:
					(#_coverageTracker18544471_
						cover: (153 to: 167)
						declaredAt: (22 to: 36)
						by: aRequestingBill) ]
		thatSends: #initializeFor:in:
		to: receiver5 ] value.! !
!Behavior method!
workingHoursEnd
	#_coverageTracker18544477_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18544477_
		coverAll:
			{21 to: 22}
		byLiteralOrPseudoVariable: 20.
	#_coverageTracker18544477_
		coverAll:
			{23 to: 23}
		evaluating: [
			receiver1 :
				(#_coverageTracker18544477_
					coverAll:
						{24 to: 25}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #:
		to: receiver1 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker18544479_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544479_
		coverAll:
			{19 to: 22}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18544479_
		coverAll:
			{24 to: 28}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18544479_
		coverAll:
			{30 to: 44}
		evaluating: [ receiver2 basicMonthlyFee ]
		thatSends: #basicMonthlyFee
		to: receiver2 ] value.! !
!Behavior method!
month
	#_coverageTracker18544481_ markAsExecuted.
	^ #_coverageTracker18544481_
		cover: (9 to: 22)
		declaredAt: (9 to: 22)
		by: monthOfBilling.! !
!Behavior method!
weekDayWorkHoursFee
	#_coverageTracker18544483_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544483_
		coverAll:
			{23 to: 26}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18544483_
		coverAll:
			{28 to: 32}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18544483_
		coverAll:
			{34 to: 52}
		evaluating: [ receiver2 weekDayWorkHoursFee ]
		thatSends: #weekDayWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
addToBill
	#_coverageTracker18544486_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18544486_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by: bill.
	#_coverageTracker18544486_
		coverAll:
			{19 to: 32}
		evaluating: [
			receiver2 addAsNational:
				[ | receiver1 |
				receiver1 := #_coverageTracker18544486_
					coverAll:
						{34 to: 37}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18544486_
					coverAll:
						{39 to: 42}
					evaluating: [ receiver1 cost ]
					thatSends: #cost
					to: receiver1 ] value ]
		thatSends: #addAsNational:
		to: receiver2 ] value.! !
!Behavior method!
internationalUsage
	#_coverageTracker18544490_ markAsExecuted.
	^ #_coverageTracker18544490_
		cover: (22 to: 39)
		declaredAt: (22 to: 39)
		by: internationalUsage.! !
!Behavior method!
isCallDuringWorkingHours: aCallToBill
	#_coverageTracker18544492_ markAsExecuted.
	^ [ | receiver7 |
	receiver7 := [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18544492_
		coverAll:
			{44 to: 47}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18544492_
		coverAll:
			{49 to: 65}
		evaluating: [ receiver1 workingHoursStart ]
		thatSends: #workingHoursStart
		to: receiver1 ] value.
	#_coverageTracker18544492_
		coverAll:
			{67 to: 68}
		evaluating: [
			receiver3 <=
				[ | receiver2 |
				receiver2 := #_coverageTracker18544492_
					cover: (70 to: 80)
					declaredAt: (27 to: 37)
					by: aCallToBill.
				#_coverageTracker18544492_
					coverAll:
						{82 to: 90}
					evaluating: [ receiver2 timeOfDay ]
					thatSends: #timeOfDay
					to: receiver2 ] value ]
		thatSends: #<=
		to: receiver3 ] value.
	#_coverageTracker18544492_
		coverAll:
			{93 to: 96}
		evaluating: [
			receiver7 and: [
				[ | receiver6 |
				receiver6 := [ | receiver4 |
				receiver4 := #_coverageTracker18544492_
					cover: (99 to: 109)
					declaredAt: (27 to: 37)
					by: aCallToBill.
				#_coverageTracker18544492_
					coverAll:
						{111 to: 119}
					evaluating: [ receiver4 timeOfDay ]
					thatSends: #timeOfDay
					to: receiver4 ] value.
				#_coverageTracker18544492_
					coverAll:
						{121 to: 122}
					evaluating: [
						receiver6 <=
							[ | receiver5 |
							receiver5 := #_coverageTracker18544492_
								coverAll:
									{125 to: 128}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker18544492_
								coverAll:
									{130 to: 144}
								evaluating: [ receiver5 workingHoursEnd ]
								thatSends: #workingHoursEnd
								to: receiver5 ] value ]
					thatSends: #<=
					to: receiver6 ] value ]]
		thatSends: #and:
		to: receiver7 ] value.! !
!Behavior method!
initialize
	#_coverageTracker18544500_ markAsExecuted.
	#_coverageTracker18544500_
		cover: (13 to: 25)
		declaredAt: (13 to: 25)
		by:
			(outgoingCalls := [ | receiver1 |
			receiver1 := #_coverageTracker18544500_
				coverAll:
					{31 to: 47}
				by: OrderedCollection.
			#_coverageTracker18544500_
				coverAll:
					{49 to: 51}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18544502_ markAsExecuted.
	^ #_coverageTracker18544502_
		coverAll:
			{26 to: 30}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
initializeFor: aLineToBill duringMonth: aMonthOfBilling
	#_coverageTracker18544504_ markAsExecuted.
	#_coverageTracker18544504_
		cover: (59 to: 62)
		declaredAt: (59 to: 62)
		by:
			(line := #_coverageTracker18544504_
				cover: (67 to: 77)
				declaredAt: (16 to: 26)
				by: aLineToBill).
	#_coverageTracker18544504_
		cover: (81 to: 94)
		declaredAt: (81 to: 94)
		by:
			(monthOfBilling := #_coverageTracker18544504_
				cover: (99 to: 113)
				declaredAt: (41 to: 55)
				by: aMonthOfBilling).
	#_coverageTracker18544504_
		cover: (117 to: 131)
		declaredAt: (117 to: 131)
		by:
			(basicMonthlyFee := [ | receiver1 |
			receiver1 := #_coverageTracker18544504_
				cover: (136 to: 139)
				declaredAt: (59 to: 62)
				by: line.
			#_coverageTracker18544504_
				coverAll:
					{141 to: 155}
				evaluating: [ receiver1 basicMonthlyFee ]
				thatSends: #basicMonthlyFee
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 := #_coverageTracker18544504_
		coverAll:
			{261 to: 264}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18544504_
		coverAll:
			{266 to: 283}
		evaluating: [ receiver2 calculateTotalCost ]
		thatSends: #calculateTotalCost
		to: receiver2 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker18544510_ markAsExecuted.
	^ #_coverageTracker18544510_
		cover: (19 to: 33)
		declaredAt: (19 to: 33)
		by: basicMonthlyFee.! !
!Behavior method!
fee
	#_coverageTracker18544512_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544512_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18544512_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18544512_
		coverAll:
			{21 to: 31}
		evaluating: [ receiver2 nationalFee ]
		thatSends: #nationalFee
		to: receiver2 ] value.! !
!Behavior method!
isCallOnAWeekDay: aCallToBill
	#_coverageTracker18544514_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544514_
		cover: (34 to: 44)
		declaredAt: (19 to: 29)
		by: aCallToBill.
	#_coverageTracker18544514_
		coverAll:
			{46 to: 49}
		evaluating: [ receiver1 date ]
		thatSends: #date
		to: receiver1 ] value.
	#_coverageTracker18544514_
		coverAll:
			{51 to: 59}
		evaluating: [ receiver2 isWeekDay ]
		thatSends: #isWeekDay
		to: receiver2 ] value.! !
!Behavior method!
fee
	#_coverageTracker18544516_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544516_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18544516_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18544516_
		coverAll:
			{21 to: 42}
		evaluating: [ receiver2 weekDayNonWorkHoursFee ]
		thatSends: #weekDayNonWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
line
	#_coverageTracker18544521_ markAsExecuted.
	^ #_coverageTracker18544521_
		cover: (8 to: 11)
		declaredAt: (8 to: 11)
		by: line.! !
!Behavior method!
internationalFee
	#_coverageTracker18544523_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544523_
		coverAll:
			{20 to: 21}
		byLiteralOrPseudoVariable: 25.
	#_coverageTracker18544523_
		coverAll:
			{23 to: 23}
		evaluating: [
			receiver1 *
				(#_coverageTracker18544523_
					coverAll:
						{25 to: 30}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18544523_
		coverAll:
			{32 to: 32}
		evaluating: [
			receiver2 /
				(#_coverageTracker18544523_
					coverAll:
						{34 to: 39}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
weekDayNonWorkHoursFee
	#_coverageTracker18544527_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544527_
		coverAll:
			{26 to: 28}
		byLiteralOrPseudoVariable: 0.1.
	#_coverageTracker18544527_
		coverAll:
			{30 to: 30}
		evaluating: [
			receiver1 *
				(#_coverageTracker18544527_
					coverAll:
						{32 to: 37}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18544527_
		coverAll:
			{39 to: 39}
		evaluating: [
			receiver2 /
				(#_coverageTracker18544527_
					coverAll:
						{41 to: 46}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
workingHoursStart
	#_coverageTracker18544531_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18544531_
		coverAll:
			{23 to: 23}
		byLiteralOrPseudoVariable: 8.
	#_coverageTracker18544531_
		coverAll:
			{24 to: 24}
		evaluating: [
			receiver1 :
				(#_coverageTracker18544531_
					coverAll:
						{25 to: 26}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #:
		to: receiver1 ] value.! !
!Behavior method!
date
	#_coverageTracker18544533_ markAsExecuted.
	^ #_coverageTracker18544533_
		cover: (8 to: 11)
		declaredAt: (8 to: 11)
		by: date.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18544535_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 := [ | receiver1 |
	receiver1 := #_coverageTracker18544535_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18544535_
		coverAll:
			{38 to: 44}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker18544535_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver6 and: [
				[ | receiver5 |
				receiver5 := [ | receiver2 |
				receiver2 := #_coverageTracker18544535_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18544535_
					coverAll:
						{58 to: 74}
					evaluating: [
						receiver2 isCallOnAWeekDay:
							(#_coverageTracker18544535_
								cover: (76 to: 86)
								declaredAt: (12 to: 22)
								by: aCallToBill) ]
					thatSends: #isCallOnAWeekDay:
					to: receiver2 ] value.
				#_coverageTracker18544535_
					coverAll:
						{89 to: 92}
					evaluating: [
						receiver5 and: [
							[ | receiver4 |
							receiver4 := [ | receiver3 |
							receiver3 := #_coverageTracker18544535_
								coverAll:
									{96 to: 99}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker18544535_
								coverAll:
									{101 to: 125}
								evaluating: [
									receiver3 isCallDuringWorkingHours:
										(#_coverageTracker18544535_
											cover: (127 to: 137)
											declaredAt: (12 to: 22)
											by: aCallToBill) ]
								thatSends: #isCallDuringWorkingHours:
								to: receiver3 ] value.
							#_coverageTracker18544535_
								coverAll:
									{140 to: 142}
								evaluating: [ receiver4 not ]
								thatSends: #not
								to: receiver4 ] value ]]
					thatSends: #and:
					to: receiver5 ] value ]]
		thatSends: #and:
		to: receiver6 ] value.! !
!Behavior method!
weekendFee
	#_coverageTracker18544543_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544543_
		coverAll:
			{14 to: 17}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18544543_
		coverAll:
			{19 to: 23}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18544543_
		coverAll:
			{25 to: 34}
		evaluating: [ receiver2 weekendFee ]
		thatSends: #weekendFee
		to: receiver2 ] value.! !
!Behavior method!
duration
	#_coverageTracker18544545_ markAsExecuted.
	^ #_coverageTracker18544545_
		cover: (12 to: 19)
		declaredAt: (12 to: 19)
		by: duration.! !
!Behavior method!
addToBill
	#_coverageTracker18544547_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18544547_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by: bill.
	#_coverageTracker18544547_
		coverAll:
			{19 to: 37}
		evaluating: [
			receiver2 addAsInternational:
				[ | receiver1 |
				receiver1 := #_coverageTracker18544547_
					coverAll:
						{39 to: 42}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18544547_
					coverAll:
						{44 to: 47}
					evaluating: [ receiver1 cost ]
					thatSends: #cost
					to: receiver1 ] value ]
		thatSends: #addAsInternational:
		to: receiver2 ] value.! !
!Behavior method!
addAsNational: aNationalCallCostToAdd
	#_coverageTracker18544552_ markAsExecuted.
	#_coverageTracker18544552_
		cover: (58 to: 70)
		declaredAt: (41 to: 53)
		by:
			(nationalUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18544552_
				cover: (41 to: 53)
				declaredAt: (41 to: 53)
				by: nationalUsage.
			#_coverageTracker18544552_
				coverAll:
					{72 to: 72}
				evaluating: [
					receiver1 +
						(#_coverageTracker18544552_
							cover: (74 to: 95)
							declaredAt: (16 to: 37)
							by: aNationalCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
fromRegion: aCallingRegion in: aCallingCountry number: aLineNumber
	#_coverageTracker18544554_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544554_
		coverAll:
			{73 to: 76}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18544554_
		coverAll:
			{78 to: 80}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker18544554_
		coverAll:
			{82 to: 102. 119 to: 121. 139 to: 145}
		evaluating: [
			receiver2
				initializeFromRegion:
					(#_coverageTracker18544554_
						cover: (104 to: 117)
						declaredAt: (13 to: 26)
						by: aCallingRegion)
				in:
					(#_coverageTracker18544554_
						cover: (123 to: 137)
						declaredAt: (32 to: 46)
						by: aCallingCountry)
				number:
					(#_coverageTracker18544554_
						cover: (147 to: 157)
						declaredAt: (56 to: 66)
						by: aLineNumber) ]
		thatSends: #initializeFromRegion:in:number:
		to: receiver2 ] value.! !
!Behavior method!
outgoingCalls
	"Podria argumentarse que rompe encapsulamiento, pero lo hago en pos de no agregarle logica de calculo de costos a la linea ya no que no tiene que ver con la esencia de este objeto."
	#_coverageTracker18544560_ markAsExecuted.
	^ #_coverageTracker18544560_
		cover: (200 to: 212)
		declaredAt: (200 to: 212)
		by: outgoingCalls.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18544562_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 := [ | receiver1 |
	receiver1 := #_coverageTracker18544562_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18544562_
		coverAll:
			{38 to: 44}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker18544562_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver4 and: [
				[ | receiver3 |
				receiver3 := [ | receiver2 |
				receiver2 := #_coverageTracker18544562_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18544562_
					coverAll:
						{58 to: 74}
					evaluating: [
						receiver2 isCallOnAWeekDay:
							(#_coverageTracker18544562_
								cover: (76 to: 86)
								declaredAt: (12 to: 22)
								by: aCallToBill) ]
					thatSends: #isCallOnAWeekDay:
					to: receiver2 ] value.
				#_coverageTracker18544562_
					coverAll:
						{89 to: 91}
					evaluating: [ receiver3 not ]
					thatSends: #not
					to: receiver3 ] value ]]
		thatSends: #and:
		to: receiver4 ] value.! !
!Behavior method!
isNational
	#_coverageTracker18544568_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 := [ | receiver1 |
	receiver1 := #_coverageTracker18544568_
		cover: (17 to: 22)
		declaredAt: (17 to: 22)
		by: callee.
	#_coverageTracker18544568_
		coverAll:
			{24 to: 43}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker18544568_
					cover: (45 to: 50)
					declaredAt: (45 to: 50)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker18544568_
		coverAll:
			{53 to: 56}
		evaluating: [
			receiver4 and: [
				[ | receiver3 |
				receiver3 := [ | receiver2 |
				receiver2 := #_coverageTracker18544568_
					cover: (60 to: 65)
					declaredAt: (17 to: 22)
					by: callee.
				#_coverageTracker18544568_
					coverAll:
						{67 to: 85}
					evaluating: [
						receiver2 isFromSameRegionAs:
							(#_coverageTracker18544568_
								cover: (87 to: 92)
								declaredAt: (45 to: 50)
								by: caller) ]
					thatSends: #isFromSameRegionAs:
					to: receiver2 ] value.
				#_coverageTracker18544568_
					coverAll:
						{95 to: 97}
					evaluating: [ receiver3 not ]
					thatSends: #not
					to: receiver3 ] value ]]
		thatSends: #and:
		to: receiver4 ] value.! !
!Behavior method!
weekDayWorkHoursFee
	#_coverageTracker18544572_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544572_
		coverAll:
			{23 to: 25}
		byLiteralOrPseudoVariable: 0.2.
	#_coverageTracker18544572_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver1 *
				(#_coverageTracker18544572_
					coverAll:
						{29 to: 34}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18544572_
		coverAll:
			{36 to: 36}
		evaluating: [
			receiver2 /
				(#_coverageTracker18544572_
					coverAll:
						{38 to: 43}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
timeOfDay
	#_coverageTracker18544580_ markAsExecuted.
	^ #_coverageTracker18544580_
		cover: (13 to: 21)
		declaredAt: (13 to: 21)
		by: timeOfDay.! !
!Behavior method!
internationalFee
	#_coverageTracker18544583_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544583_
		coverAll:
			{20 to: 23}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18544583_
		coverAll:
			{25 to: 29}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18544583_
		coverAll:
			{31 to: 46}
		evaluating: [ receiver2 internationalFee ]
		thatSends: #internationalFee
		to: receiver2 ] value.! !
!Behavior method!
isFromSameCountryAs: aTelephoneLine
	#_coverageTracker18544585_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18544585_
		cover: (40 to: 46)
		declaredAt: (40 to: 46)
		by: country.
	#_coverageTracker18544585_
		coverAll:
			{48 to: 48}
		evaluating: [
			receiver2 =
				[ | receiver1 |
				receiver1 := #_coverageTracker18544585_
					cover: (50 to: 63)
					declaredAt: (22 to: 35)
					by: aTelephoneLine.
				#_coverageTracker18544585_
					coverAll:
						{65 to: 71}
					evaluating: [ receiver1 country ]
					thatSends: #country
					to: receiver1 ] value ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
totalDue
	#_coverageTracker18544589_ markAsExecuted.
	^ #_coverageTracker18544589_
		cover: (12 to: 16)
		declaredAt: (12 to: 16)
		by: total.! !
!Behavior method!
fee
	#_coverageTracker18544591_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544591_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18544591_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18544591_
		coverAll:
			{21 to: 36}
		evaluating: [ receiver2 internationalFee ]
		thatSends: #internationalFee
		to: receiver2 ] value.! !
!Behavior method!
number
	#_coverageTracker18544593_ markAsExecuted.
	^ #_coverageTracker18544593_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: number.! !
!Behavior method!
isFromSameRegionAs: aTelephoneLine
	#_coverageTracker18544595_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18544595_
		cover: (39 to: 44)
		declaredAt: (39 to: 44)
		by: region.
	#_coverageTracker18544595_
		coverAll:
			{46 to: 46}
		evaluating: [
			receiver2 =
				[ | receiver1 |
				receiver1 := #_coverageTracker18544595_
					cover: (48 to: 61)
					declaredAt: (21 to: 34)
					by: aTelephoneLine.
				#_coverageTracker18544595_
					coverAll:
						{63 to: 68}
					evaluating: [ receiver1 region ]
					thatSends: #region
					to: receiver1 ] value ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
initializeFor: aCallToBill in: aRequestingBill
	#_coverageTracker18544601_ markAsExecuted.
	#_coverageTracker18544601_
		cover: (50 to: 53)
		declaredAt: (50 to: 53)
		by:
			(call := #_coverageTracker18544601_
				cover: (58 to: 68)
				declaredAt: (16 to: 26)
				by: aCallToBill).
	#_coverageTracker18544601_
		cover: (72 to: 75)
		declaredAt: (72 to: 75)
		by:
			(bill := #_coverageTracker18544601_
				cover: (80 to: 94)
				declaredAt: (32 to: 46)
				by: aRequestingBill).! !
!Behavior method!
weekDayNonWorkHoursFee
	#_coverageTracker18544603_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544603_
		coverAll:
			{26 to: 29}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18544603_
		coverAll:
			{31 to: 35}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18544603_
		coverAll:
			{37 to: 58}
		evaluating: [ receiver2 weekDayNonWorkHoursFee ]
		thatSends: #weekDayNonWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
for: aLineToBill duringMonth: aMonthOfBilling
	#_coverageTracker18544605_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544605_
		coverAll:
			{50 to: 53}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18544605_
		coverAll:
			{55 to: 57}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker18544605_
		coverAll:
			{59 to: 72. 86 to: 97}
		evaluating: [
			receiver2
				initializeFor:
					(#_coverageTracker18544605_
						cover: (74 to: 84)
						declaredAt: (6 to: 16)
						by: aLineToBill)
				duringMonth:
					(#_coverageTracker18544605_
						cover: (99 to: 113)
						declaredAt: (31 to: 45)
						by: aMonthOfBilling) ]
		thatSends: #initializeFor:duringMonth:
		to: receiver2 ] value.! !
!Behavior method!
isInternational
	#_coverageTracker18544609_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544609_
		cover: (22 to: 27)
		declaredAt: (22 to: 27)
		by: callee.
	#_coverageTracker18544609_
		coverAll:
			{29 to: 48}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker18544609_
					cover: (50 to: 55)
					declaredAt: (50 to: 55)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker18544609_
		coverAll:
			{58 to: 60}
		evaluating: [ receiver2 not ]
		thatSends: #not
		to: receiver2 ] value.! !
!Behavior method!
cost
	#_coverageTracker18544613_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18544613_
		cover: (10 to: 13)
		declaredAt: (10 to: 13)
		by: call.
	#_coverageTracker18544613_
		coverAll:
			{15 to: 22}
		evaluating: [ receiver1 duration ]
		thatSends: #duration
		to: receiver1 ] value.
	#_coverageTracker18544613_
		coverAll:
			{24 to: 24}
		evaluating: [
			receiver3 *
				[ | receiver2 |
				receiver2 := #_coverageTracker18544613_
					coverAll:
						{26 to: 29}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18544613_
					coverAll:
						{31 to: 33}
					evaluating: [ receiver2 fee ]
					thatSends: #fee
					to: receiver2 ] value ]
		thatSends: #*
		to: receiver3 ] value.! !
!Behavior method!
fee
	#_coverageTracker18544618_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18544618_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18544618_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18544618_
		coverAll:
			{21 to: 30}
		evaluating: [ receiver2 weekendFee ]
		thatSends: #weekendFee
		to: receiver2 ] value.! !
!Behavior method!
isLocal
	#_coverageTracker18544620_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18544620_
		cover: (14 to: 19)
		declaredAt: (14 to: 19)
		by: callee.
	#_coverageTracker18544620_
		coverAll:
			{21 to: 40}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker18544620_
					cover: (42 to: 47)
					declaredAt: (42 to: 47)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker18544620_
		coverAll:
			{50 to: 53}
		evaluating: [
			receiver3 and: [
				[ | receiver2 |
				receiver2 := #_coverageTracker18544620_
					cover: (57 to: 62)
					declaredAt: (14 to: 19)
					by: callee.
				#_coverageTracker18544620_
					coverAll:
						{64 to: 82}
					evaluating: [
						receiver2 isFromSameRegionAs:
							(#_coverageTracker18544620_
								cover: (84 to: 89)
								declaredAt: (42 to: 47)
								by: caller) ]
					thatSends: #isFromSameRegionAs:
					to: receiver2 ] value ]]
		thatSends: #and:
		to: receiver3 ] value.! !

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:08:17'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:08:17'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:08:17'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:08:17'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:08:17'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:08:17'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:08:17'!
PASSED!

!methodRemoval: CallBiller class #for: stamp: 'AS 3/30/2025 23:09:50'!
for: aCallToBill
	^(self allSubclasses detect: [:aSubclass | aSubclass canHandle: aCallToBill]) new initializeFor: aCallToBill.!
!Behavior method!
nationalFee
	#_coverageTracker18661086_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661086_
		coverAll:
			{15 to: 18}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18661086_
		coverAll:
			{20 to: 24}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18661086_
		coverAll:
			{26 to: 36}
		evaluating: [ receiver2 nationalFee ]
		thatSends: #nationalFee
		to: receiver2 ] value.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18661094_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18661094_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18661094_
		coverAll:
			{38 to: 52}
		evaluating: [ receiver1 isInternational ]
		thatSends: #isInternational
		to: receiver1 ] value.! !
!Behavior method!
initializeFromRegion: aCallingRegion in: aCallingCountry number: aLineNumber
	#_coverageTracker18661098_ markAsExecuted.
	#_coverageTracker18661098_
		cover: (82 to: 87)
		declaredAt: (82 to: 87)
		by:
			(region := #_coverageTracker18661098_
				cover: (92 to: 105)
				declaredAt: (23 to: 36)
				by: aCallingRegion).
	#_coverageTracker18661098_
		cover: (109 to: 115)
		declaredAt: (109 to: 115)
		by:
			(country := #_coverageTracker18661098_
				cover: (120 to: 134)
				declaredAt: (42 to: 56)
				by: aCallingCountry).
	#_coverageTracker18661098_
		cover: (138 to: 143)
		declaredAt: (138 to: 143)
		by:
			(number := #_coverageTracker18661098_
				cover: (148 to: 158)
				declaredAt: (66 to: 76)
				by: aLineNumber).! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18661103_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 := [ | receiver1 |
	receiver1 := #_coverageTracker18661103_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18661103_
		coverAll:
			{38 to: 44}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker18661103_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver5 and: [
				[ | receiver4 |
				receiver4 := [ | receiver2 |
				receiver2 := #_coverageTracker18661103_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18661103_
					coverAll:
						{58 to: 74}
					evaluating: [
						receiver2 isCallOnAWeekDay:
							(#_coverageTracker18661103_
								cover: (76 to: 86)
								declaredAt: (12 to: 22)
								by: aCallToBill) ]
					thatSends: #isCallOnAWeekDay:
					to: receiver2 ] value.
				#_coverageTracker18661103_
					coverAll:
						{89 to: 92}
					evaluating: [
						receiver4 and: [
							[ | receiver3 |
							receiver3 := #_coverageTracker18661103_
								coverAll:
									{95 to: 98}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker18661103_
								coverAll:
									{100 to: 124}
								evaluating: [
									receiver3 isCallDuringWorkingHours:
										(#_coverageTracker18661103_
											cover: (126 to: 136)
											declaredAt: (12 to: 22)
											by: aCallToBill) ]
								thatSends: #isCallDuringWorkingHours:
								to: receiver3 ] value ]]
					thatSends: #and:
					to: receiver4 ] value ]]
		thatSends: #and:
		to: receiver5 ] value.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18661113_ markAsExecuted.
	^ #_coverageTracker18661113_
		coverAll:
			{26 to: 30}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
region
	#_coverageTracker18661113_ markAsExecuted.
	^ #_coverageTracker18661113_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: region.! !
!Behavior method!
localUsage
	#_coverageTracker18661115_ markAsExecuted.
	^ #_coverageTracker18661115_
		cover: (14 to: 23)
		declaredAt: (14 to: 23)
		by: localUsage.! !
!Behavior method!
initializeFor: aCallToBill
	#_coverageTracker18661117_ markAsExecuted.
	#_coverageTracker18661117_
		cover: (30 to: 33)
		declaredAt: (30 to: 33)
		by:
			(call := #_coverageTracker18661117_
				cover: (38 to: 48)
				declaredAt: (16 to: 26)
				by: aCallToBill).! !
!Behavior method!
nationalUsage
	#_coverageTracker18661119_ markAsExecuted.
	^ #_coverageTracker18661119_
		cover: (17 to: 29)
		declaredAt: (17 to: 29)
		by: nationalUsage.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18661119_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18661119_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18661119_
		coverAll:
			{38 to: 47}
		evaluating: [ receiver1 isNational ]
		thatSends: #isNational
		to: receiver1 ] value.! !
!Behavior method!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDate at: aTimeOfDay for: aCallDuration
	#_coverageTracker18661123_ markAsExecuted.
	#_coverageTracker18661123_
		cover: (98 to: 103)
		declaredAt: (98 to: 103)
		by:
			(caller := #_coverageTracker18661123_
				cover: (108 to: 119)
				declaredAt: (17 to: 28)
				by: aCallingLine).
	#_coverageTracker18661123_
		cover: (123 to: 128)
		declaredAt: (123 to: 128)
		by:
			(callee := #_coverageTracker18661123_
				cover: (133 to: 149)
				declaredAt: (34 to: 50)
				by: aLineThatIsCalled).
	#_coverageTracker18661123_
		cover: (153 to: 156)
		declaredAt: (153 to: 156)
		by:
			(date := #_coverageTracker18661123_
				cover: (161 to: 165)
				declaredAt: (56 to: 60)
				by: aDate).
	#_coverageTracker18661123_
		cover: (169 to: 177)
		declaredAt: (169 to: 177)
		by:
			(timeOfDay := #_coverageTracker18661123_
				cover: (182 to: 191)
				declaredAt: (66 to: 75)
				by: aTimeOfDay).
	#_coverageTracker18661123_
		cover: (195 to: 202)
		declaredAt: (195 to: 202)
		by:
			(duration := #_coverageTracker18661123_
				cover: (207 to: 219)
				declaredAt: (82 to: 94)
				by: aCallDuration).! !
!Behavior method!
caller
	#_coverageTracker18661128_ markAsExecuted.
	^ #_coverageTracker18661128_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: caller.! !
!Behavior method!
add: aCallCostToAdd
	#_coverageTracker18661130_ markAsExecuted.
	#_coverageTracker18661130_
		cover: (32 to: 36)
		declaredAt: (23 to: 27)
		by:
			(total := [ | receiver1 |
			receiver1 := #_coverageTracker18661130_
				cover: (23 to: 27)
				declaredAt: (23 to: 27)
				by: total.
			#_coverageTracker18661130_
				coverAll:
					{38 to: 38}
				evaluating: [
					receiver1 +
						(#_coverageTracker18661130_
							cover: (40 to: 53)
							declaredAt: (6 to: 19)
							by: aCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
addToBill
	#_coverageTracker18661134_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18661134_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by: bill.
	#_coverageTracker18661134_
		coverAll:
			{19 to: 29}
		evaluating: [
			receiver2 addAsLocal:
				[ | receiver1 |
				receiver1 := #_coverageTracker18661134_
					coverAll:
						{31 to: 34}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18661134_
					coverAll:
						{36 to: 39}
					evaluating: [ receiver1 cost ]
					thatSends: #cost
					to: receiver1 ] value ]
		thatSends: #addAsLocal:
		to: receiver2 ] value.! !
!Behavior method!
addAsInternational: anInternationalCallCostToAdd
	#_coverageTracker18661136_ markAsExecuted.
	#_coverageTracker18661136_
		cover: (74 to: 91)
		declaredAt: (52 to: 69)
		by:
			(internationalUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18661136_
				cover: (52 to: 69)
				declaredAt: (52 to: 69)
				by: internationalUsage.
			#_coverageTracker18661136_
				coverAll:
					{93 to: 93}
				evaluating: [
					receiver1 +
						(#_coverageTracker18661136_
							cover: (95 to: 122)
							declaredAt: (21 to: 48)
							by: anInternationalCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
addAsLocal: aLocalCallCostToAdd
	#_coverageTracker18661140_ markAsExecuted.
	#_coverageTracker18661140_
		cover: (49 to: 58)
		declaredAt: (35 to: 44)
		by:
			(localUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18661140_
				cover: (35 to: 44)
				declaredAt: (35 to: 44)
				by: localUsage.
			#_coverageTracker18661140_
				coverAll:
					{60 to: 60}
				evaluating: [
					receiver1 +
						(#_coverageTracker18661140_
							cover: (62 to: 80)
							declaredAt: (13 to: 31)
							by: aLocalCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
calculateTotalCost
	"Se podria argumentar que si agrego un tipo de llamada debo modificar este metodo, y que por lo tanto seria mejor sumar los costos
	de manera indistinta, pero creo que el hecho de que haya distintos tipos de llamada es esencial a la factura (por el enunciado), ya
	que entiendo que pide que se discriminen los costos, lo cual no se podria hacer si no se diferenciaran los tipos de estos.
	Por lo tanto tiene sentido tener que ademas modificar la factura si se agrega un nuevo tipo."
	#_coverageTracker18661144_ markAsExecuted.
	#_coverageTracker18661144_
		cover: (509 to: 518)
		declaredAt: (509 to: 518)
		by:
			(localUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18661144_
				coverAll:
					{523 to: 523}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker18661144_
				coverAll:
					{524 to: 524}
				evaluating: [
					receiver1 *
						(#_coverageTracker18661144_
							coverAll:
								{525 to: 530}
							by: dollar) ]
				thatSends: #*
				to: receiver1 ] value).
	#_coverageTracker18661144_
		cover: (534 to: 546)
		declaredAt: (534 to: 546)
		by:
			(nationalUsage := [ | receiver2 |
			receiver2 := #_coverageTracker18661144_
				coverAll:
					{551 to: 551}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker18661144_
				coverAll:
					{552 to: 552}
				evaluating: [
					receiver2 *
						(#_coverageTracker18661144_
							coverAll:
								{553 to: 558}
							by: dollar) ]
				thatSends: #*
				to: receiver2 ] value).
	#_coverageTracker18661144_
		cover: (562 to: 579)
		declaredAt: (562 to: 579)
		by:
			(internationalUsage := [ | receiver3 |
			receiver3 := #_coverageTracker18661144_
				coverAll:
					{584 to: 584}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker18661144_
				coverAll:
					{585 to: 585}
				evaluating: [
					receiver3 *
						(#_coverageTracker18661144_
							coverAll:
								{586 to: 591}
							by: dollar) ]
				thatSends: #*
				to: receiver3 ] value).
	[ | receiver7 |
	receiver7 := [ | receiver4 |
	receiver4 := #_coverageTracker18661144_
		cover: (595 to: 598)
		declaredAt: (595 to: 598)
		by: line.
	#_coverageTracker18661144_
		coverAll:
			{600 to: 612}
		evaluating: [ receiver4 outgoingCalls ]
		thatSends: #outgoingCalls
		to: receiver4 ] value.
	#_coverageTracker18661144_
		coverAll:
			{614 to: 616}
		evaluating: [
			receiver7 do: [ :aCall |
				[ | receiver6 |
				receiver6 := [ | receiver5 |
				receiver5 := #_coverageTracker18661144_
					coverAll:
						{630 to: 639}
					by: CallBiller.
				#_coverageTracker18661144_
					coverAll:
						{641 to: 644. 652 to: 654}
					evaluating: [
						receiver5
							for:
								(#_coverageTracker18661144_
									cover: (646 to: 650)
									declaredAt: (621 to: 625)
									by: aCall)
							in:
								(#_coverageTracker18661144_
									coverAll:
										{656 to: 659}
									byLiteralOrPseudoVariable: self) ]
					thatSends: #for:in:
					to: receiver5 ] value.
				#_coverageTracker18661144_
					coverAll:
						{662 to: 670}
					evaluating: [ receiver6 addToBill ]
					thatSends: #addToBill
					to: receiver6 ] value ]]
		thatSends: #do:
		to: receiver7 ] value.
	#_coverageTracker18661144_
		cover: (677 to: 681)
		declaredAt: (677 to: 681)
		by:
			(total := [ | receiver11 |
			receiver11 := [ | receiver10 |
			receiver10 := [ | receiver9 |
			receiver9 := [ | receiver8 |
			receiver8 := #_coverageTracker18661144_
				cover: (686 to: 689)
				declaredAt: (595 to: 598)
				by: line.
			#_coverageTracker18661144_
				coverAll:
					{691 to: 705}
				evaluating: [ receiver8 basicMonthlyFee ]
				thatSends: #basicMonthlyFee
				to: receiver8 ] value.
			#_coverageTracker18661144_
				coverAll:
					{707 to: 707}
				evaluating: [
					receiver9 +
						(#_coverageTracker18661144_
							cover: (709 to: 718)
							declaredAt: (509 to: 518)
							by: localUsage) ]
				thatSends: #+
				to: receiver9 ] value.
			#_coverageTracker18661144_
				coverAll:
					{720 to: 720}
				evaluating: [
					receiver10 +
						(#_coverageTracker18661144_
							cover: (722 to: 734)
							declaredAt: (534 to: 546)
							by: nationalUsage) ]
				thatSends: #+
				to: receiver10 ] value.
			#_coverageTracker18661144_
				coverAll:
					{736 to: 736}
				evaluating: [
					receiver11 +
						(#_coverageTracker18661144_
							cover: (738 to: 755)
							declaredAt: (562 to: 579)
							by: internationalUsage) ]
				thatSends: #+
				to: receiver11 ] value).! !
!Behavior method!
weekendFee
	#_coverageTracker18661165_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661165_
		coverAll:
			{14 to: 16}
		byLiteralOrPseudoVariable: 0.1.
	#_coverageTracker18661165_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver1 *
				(#_coverageTracker18661165_
					coverAll:
						{20 to: 25}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18661165_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver2 /
				(#_coverageTracker18661165_
					coverAll:
						{29 to: 34}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
show
	#_coverageTracker18661169_ markAsExecuted.
	^ [ | receiver15 |
	receiver15 := #_coverageTracker18661169_
		coverAll:
			{9 to: 25}
		by: OrderedCollection.
	#_coverageTracker18661169_
		coverAll:
			{27 to: 31. 137 to: 141. 203 to: 207. 262 to: 266. 366 to: 370}
		evaluating: [
			receiver15
				with:
					[ | receiver5 |
					receiver5 := [ | receiver3 |
					receiver3 := [ | receiver2 |
					receiver2 := #_coverageTracker18661169_
						coverAll:
							{33 to: 55}
						byLiteralOrPseudoVariable: 'Bill for line number '.
					#_coverageTracker18661169_
						coverAll:
							{56 to: 56}
						evaluating: [
							receiver2 ,
								[ | receiver1 |
								receiver1 := #_coverageTracker18661169_
									cover: (58 to: 61)
									declaredAt: (58 to: 61)
									by: line.
								#_coverageTracker18661169_
									coverAll:
										{63 to: 68}
									evaluating: [ receiver1 number ]
									thatSends: #number
									to: receiver1 ] value ]
						thatSends: #,
						to: receiver2 ] value.
					#_coverageTracker18661169_
						coverAll:
							{70 to: 70}
						evaluating: [
							receiver3 ,
								(#_coverageTracker18661169_
									coverAll:
										{72 to: 88}
									byLiteralOrPseudoVariable: ' during period ') ]
						thatSends: #,
						to: receiver3 ] value.
					#_coverageTracker18661169_
						coverAll:
							{89 to: 89}
						evaluating: [
							receiver5 ,
								[ | receiver4 |
								receiver4 := #_coverageTracker18661169_
									cover: (91 to: 104)
									declaredAt: (91 to: 104)
									by: monthOfBilling.
								#_coverageTracker18661169_
									coverAll:
										{106 to: 113}
									evaluating: [ receiver4 asString ]
									thatSends: #asString
									to: receiver4 ] value ]
						thatSends: #,
						to: receiver5 ] value
				with:
					[ | receiver7 |
					receiver7 := #_coverageTracker18661169_
						coverAll:
							{143 to: 159}
						byLiteralOrPseudoVariable: '		Monthly fee: '.
					#_coverageTracker18661169_
						coverAll:
							{160 to: 160}
						evaluating: [
							receiver7 ,
								[ | receiver6 |
								receiver6 := #_coverageTracker18661169_
									cover: (162 to: 176)
									declaredAt: (162 to: 176)
									by: basicMonthlyFee.
								#_coverageTracker18661169_
									coverAll:
										{178 to: 185}
									evaluating: [ receiver6 asString ]
									thatSends: #asString
									to: receiver6 ] value ]
						thatSends: #,
						to: receiver7 ] value
				with:
					[ | receiver9 |
					receiver9 := #_coverageTracker18661169_
						coverAll:
							{209 to: 223}
						byLiteralOrPseudoVariable: 'Local usage: '.
					#_coverageTracker18661169_
						coverAll:
							{224 to: 224}
						evaluating: [
							receiver9 ,
								[ | receiver8 |
								receiver8 := #_coverageTracker18661169_
									cover: (226 to: 235)
									declaredAt: (226 to: 235)
									by: localUsage.
								#_coverageTracker18661169_
									coverAll:
										{237 to: 244}
									evaluating: [ receiver8 asString ]
									thatSends: #asString
									to: receiver8 ] value ]
						thatSends: #,
						to: receiver9 ] value
				with:
					[ | receiver12 |
					receiver12 := #_coverageTracker18661169_
						coverAll:
							{268 to: 303}
						byLiteralOrPseudoVariable: 'National and international usage: '.
					#_coverageTracker18661169_
						coverAll:
							{304 to: 304}
						evaluating: [
							receiver12 ,
								[ | receiver11 |
								receiver11 := [ | receiver10 |
								receiver10 := #_coverageTracker18661169_
									coverAll:
										{306 to: 309}
									byLiteralOrPseudoVariable: self.
								#_coverageTracker18661169_
									coverAll:
										{311 to: 339}
									evaluating: [ receiver10 nationalAndInternationalUsage ]
									thatSends: #nationalAndInternationalUsage
									to: receiver10 ] value.
								#_coverageTracker18661169_
									coverAll:
										{341 to: 348}
									evaluating: [ receiver11 asString ]
									thatSends: #asString
									to: receiver11 ] value ]
						thatSends: #,
						to: receiver12 ] value
				with:
					[ | receiver14 |
					receiver14 := #_coverageTracker18661169_
						coverAll:
							{372 to: 384}
						byLiteralOrPseudoVariable: 'Total due: '.
					#_coverageTracker18661169_
						coverAll:
							{386 to: 386}
						evaluating: [
							receiver14 ,
								[ | receiver13 |
								receiver13 := #_coverageTracker18661169_
									cover: (388 to: 392)
									declaredAt: (388 to: 392)
									by: total.
								#_coverageTracker18661169_
									coverAll:
										{394 to: 401}
									evaluating: [ receiver13 asString ]
									thatSends: #asString
									to: receiver13 ] value ]
						thatSends: #,
						to: receiver14 ] value ]
		thatSends: #with:with:with:with:with:
		to: receiver15 ] value.! !
!Behavior method!
calls: aLineThatWasCalled on: aDate at: aTimeOfDay for: aCallDuration
	#_coverageTracker18661192_ markAsExecuted.
	[ | receiver2 |
	receiver2 := #_coverageTracker18661192_
		cover: (72 to: 84)
		declaredAt: (72 to: 84)
		by: outgoingCalls.
	#_coverageTracker18661192_
		coverAll:
			{86 to: 89}
		evaluating: [
			receiver2 add:
				[ | receiver1 |
				receiver1 := #_coverageTracker18661192_
					coverAll:
						{92 to: 95}
					by: Call.
				#_coverageTracker18661192_
					coverAll:
						{97 to: 101. 108 to: 110. 131 to: 133. 141 to: 143. 156 to: 159}
					evaluating: [
						receiver1
							from:
								(#_coverageTracker18661192_
									coverAll:
										{103 to: 106}
									byLiteralOrPseudoVariable: self)
							to:
								(#_coverageTracker18661192_
									cover: (112 to: 129)
									declaredAt: (8 to: 25)
									by: aLineThatWasCalled)
							on:
								(#_coverageTracker18661192_
									cover: (135 to: 139)
									declaredAt: (31 to: 35)
									by: aDate)
							at:
								(#_coverageTracker18661192_
									cover: (145 to: 154)
									declaredAt: (41 to: 50)
									by: aTimeOfDay)
							for:
								(#_coverageTracker18661192_
									cover: (161 to: 173)
									declaredAt: (57 to: 69)
									by: aCallDuration) ]
					thatSends: #from:to:on:at:for:
					to: receiver1 ] value ]
		thatSends: #add:
		to: receiver2 ] value.! !
!Behavior method!
country
	#_coverageTracker18661199_ markAsExecuted.
	^ #_coverageTracker18661199_
		cover: (11 to: 17)
		declaredAt: (11 to: 17)
		by: country.! !
!Behavior method!
from: aCallingLine to: aLineThatIsCalled on: aDate at: aTimeOfDay for: aCallDuration
	#_coverageTracker18661201_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661201_
		coverAll:
			{88 to: 91}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18661201_
		coverAll:
			{93 to: 95}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker18661201_
		coverAll:
			{97 to: 111. 126 to: 128. 148 to: 150. 158 to: 160. 173 to: 176}
		evaluating: [
			receiver2
				initializeFrom:
					(#_coverageTracker18661201_
						cover: (113 to: 124)
						declaredAt: (7 to: 18)
						by: aCallingLine)
				to:
					(#_coverageTracker18661201_
						cover: (130 to: 146)
						declaredAt: (24 to: 40)
						by: aLineThatIsCalled)
				on:
					(#_coverageTracker18661201_
						cover: (152 to: 156)
						declaredAt: (46 to: 50)
						by: aDate)
				at:
					(#_coverageTracker18661201_
						cover: (162 to: 171)
						declaredAt: (56 to: 65)
						by: aTimeOfDay)
				for:
					(#_coverageTracker18661201_
						cover: (178 to: 190)
						declaredAt: (72 to: 84)
						by: aCallDuration) ]
		thatSends: #initializeFrom:to:on:at:for:
		to: receiver2 ] value.! !
!Behavior method!
nationalAndInternationalUsage
	#_coverageTracker18661207_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18661207_
		cover: (33 to: 45)
		declaredAt: (33 to: 45)
		by: nationalUsage.
	#_coverageTracker18661207_
		coverAll:
			{47 to: 47}
		evaluating: [
			receiver1 +
				(#_coverageTracker18661207_
					cover: (49 to: 66)
					declaredAt: (49 to: 66)
					by: internationalUsage) ]
		thatSends: #+
		to: receiver1 ] value.! !
!Behavior method!
fee
	#_coverageTracker18661209_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661209_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18661209_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18661209_
		coverAll:
			{21 to: 39}
		evaluating: [ receiver2 weekDayWorkHoursFee ]
		thatSends: #weekDayWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
nationalFee
	#_coverageTracker18661213_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661213_
		coverAll:
			{15 to: 16}
		byLiteralOrPseudoVariable: 14.
	#_coverageTracker18661213_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver1 *
				(#_coverageTracker18661213_
					coverAll:
						{20 to: 25}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18661213_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver2 /
				(#_coverageTracker18661213_
					coverAll:
						{29 to: 34}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker18661215_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18661215_
		coverAll:
			{19 to: 20}
		byLiteralOrPseudoVariable: 10.
	#_coverageTracker18661215_
		coverAll:
			{22 to: 22}
		evaluating: [
			receiver1 *
				(#_coverageTracker18661215_
					coverAll:
						{24 to: 29}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.! !
!Behavior method!
for: aCallToBill in: aRequestingBill
	#_coverageTracker18661219_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 := [ | receiver4 |
	receiver4 := [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18661219_
		coverAll:
			{42 to: 45}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18661219_
		coverAll:
			{47 to: 59}
		evaluating: [ receiver1 allSubclasses ]
		thatSends: #allSubclasses
		to: receiver1 ] value.
	#_coverageTracker18661219_
		coverAll:
			{61 to: 67}
		evaluating: [
			receiver3 detect: [ :aSubclass |
				[ | receiver2 |
				receiver2 := #_coverageTracker18661219_
					cover: (83 to: 91)
					declaredAt: (71 to: 79)
					by: aSubclass.
				#_coverageTracker18661219_
					coverAll:
						{93 to: 102}
					evaluating: [
						receiver2 canHandle:
							(#_coverageTracker18661219_
								cover: (104 to: 114)
								declaredAt: (6 to: 16)
								by: aCallToBill) ]
					thatSends: #canHandle:
					to: receiver2 ] value ]]
		thatSends: #detect:
		to: receiver3 ] value.
	#_coverageTracker18661219_
		coverAll:
			{118 to: 120}
		evaluating: [ receiver4 new ]
		thatSends: #new
		to: receiver4 ] value.
	#_coverageTracker18661219_
		coverAll:
			{122 to: 135. 149 to: 151}
		evaluating: [
			receiver5
				initializeFor:
					(#_coverageTracker18661219_
						cover: (137 to: 147)
						declaredAt: (6 to: 16)
						by: aCallToBill)
				in:
					(#_coverageTracker18661219_
						cover: (153 to: 167)
						declaredAt: (22 to: 36)
						by: aRequestingBill) ]
		thatSends: #initializeFor:in:
		to: receiver5 ] value.! !
!Behavior method!
workingHoursEnd
	#_coverageTracker18661226_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18661226_
		coverAll:
			{21 to: 22}
		byLiteralOrPseudoVariable: 20.
	#_coverageTracker18661226_
		coverAll:
			{23 to: 23}
		evaluating: [
			receiver1 :
				(#_coverageTracker18661226_
					coverAll:
						{24 to: 25}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #:
		to: receiver1 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker18661228_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661228_
		coverAll:
			{19 to: 22}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18661228_
		coverAll:
			{24 to: 28}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18661228_
		coverAll:
			{30 to: 44}
		evaluating: [ receiver2 basicMonthlyFee ]
		thatSends: #basicMonthlyFee
		to: receiver2 ] value.! !
!Behavior method!
month
	#_coverageTracker18661230_ markAsExecuted.
	^ #_coverageTracker18661230_
		cover: (9 to: 22)
		declaredAt: (9 to: 22)
		by: monthOfBilling.! !
!Behavior method!
weekDayWorkHoursFee
	#_coverageTracker18661230_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661230_
		coverAll:
			{23 to: 26}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18661230_
		coverAll:
			{28 to: 32}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18661230_
		coverAll:
			{34 to: 52}
		evaluating: [ receiver2 weekDayWorkHoursFee ]
		thatSends: #weekDayWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
addToBill
	#_coverageTracker18661234_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18661234_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by: bill.
	#_coverageTracker18661234_
		coverAll:
			{19 to: 32}
		evaluating: [
			receiver2 addAsNational:
				[ | receiver1 |
				receiver1 := #_coverageTracker18661234_
					coverAll:
						{34 to: 37}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18661234_
					coverAll:
						{39 to: 42}
					evaluating: [ receiver1 cost ]
					thatSends: #cost
					to: receiver1 ] value ]
		thatSends: #addAsNational:
		to: receiver2 ] value.! !
!Behavior method!
internationalUsage
	#_coverageTracker18661238_ markAsExecuted.
	^ #_coverageTracker18661238_
		cover: (22 to: 39)
		declaredAt: (22 to: 39)
		by: internationalUsage.! !
!Behavior method!
isCallDuringWorkingHours: aCallToBill
	#_coverageTracker18661238_ markAsExecuted.
	^ [ | receiver7 |
	receiver7 := [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18661238_
		coverAll:
			{44 to: 47}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18661238_
		coverAll:
			{49 to: 65}
		evaluating: [ receiver1 workingHoursStart ]
		thatSends: #workingHoursStart
		to: receiver1 ] value.
	#_coverageTracker18661238_
		coverAll:
			{67 to: 68}
		evaluating: [
			receiver3 <=
				[ | receiver2 |
				receiver2 := #_coverageTracker18661238_
					cover: (70 to: 80)
					declaredAt: (27 to: 37)
					by: aCallToBill.
				#_coverageTracker18661238_
					coverAll:
						{82 to: 90}
					evaluating: [ receiver2 timeOfDay ]
					thatSends: #timeOfDay
					to: receiver2 ] value ]
		thatSends: #<=
		to: receiver3 ] value.
	#_coverageTracker18661238_
		coverAll:
			{93 to: 96}
		evaluating: [
			receiver7 and: [
				[ | receiver6 |
				receiver6 := [ | receiver4 |
				receiver4 := #_coverageTracker18661238_
					cover: (99 to: 109)
					declaredAt: (27 to: 37)
					by: aCallToBill.
				#_coverageTracker18661238_
					coverAll:
						{111 to: 119}
					evaluating: [ receiver4 timeOfDay ]
					thatSends: #timeOfDay
					to: receiver4 ] value.
				#_coverageTracker18661238_
					coverAll:
						{121 to: 122}
					evaluating: [
						receiver6 <=
							[ | receiver5 |
							receiver5 := #_coverageTracker18661238_
								coverAll:
									{125 to: 128}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker18661238_
								coverAll:
									{130 to: 144}
								evaluating: [ receiver5 workingHoursEnd ]
								thatSends: #workingHoursEnd
								to: receiver5 ] value ]
					thatSends: #<=
					to: receiver6 ] value ]]
		thatSends: #and:
		to: receiver7 ] value.! !
!Behavior method!
initialize
	#_coverageTracker18661247_ markAsExecuted.
	#_coverageTracker18661247_
		cover: (13 to: 25)
		declaredAt: (13 to: 25)
		by:
			(outgoingCalls := [ | receiver1 |
			receiver1 := #_coverageTracker18661247_
				coverAll:
					{31 to: 47}
				by: OrderedCollection.
			#_coverageTracker18661247_
				coverAll:
					{49 to: 51}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18661251_ markAsExecuted.
	^ #_coverageTracker18661251_
		coverAll:
			{26 to: 30}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
initializeFor: aLineToBill duringMonth: aMonthOfBilling
	#_coverageTracker18661253_ markAsExecuted.
	#_coverageTracker18661253_
		cover: (59 to: 62)
		declaredAt: (59 to: 62)
		by:
			(line := #_coverageTracker18661253_
				cover: (67 to: 77)
				declaredAt: (16 to: 26)
				by: aLineToBill).
	#_coverageTracker18661253_
		cover: (81 to: 94)
		declaredAt: (81 to: 94)
		by:
			(monthOfBilling := #_coverageTracker18661253_
				cover: (99 to: 113)
				declaredAt: (41 to: 55)
				by: aMonthOfBilling).
	#_coverageTracker18661253_
		cover: (117 to: 131)
		declaredAt: (117 to: 131)
		by:
			(basicMonthlyFee := [ | receiver1 |
			receiver1 := #_coverageTracker18661253_
				cover: (136 to: 139)
				declaredAt: (59 to: 62)
				by: line.
			#_coverageTracker18661253_
				coverAll:
					{141 to: 155}
				evaluating: [ receiver1 basicMonthlyFee ]
				thatSends: #basicMonthlyFee
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 := #_coverageTracker18661253_
		coverAll:
			{261 to: 264}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18661253_
		coverAll:
			{266 to: 283}
		evaluating: [ receiver2 calculateTotalCost ]
		thatSends: #calculateTotalCost
		to: receiver2 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker18661257_ markAsExecuted.
	^ #_coverageTracker18661257_
		cover: (19 to: 33)
		declaredAt: (19 to: 33)
		by: basicMonthlyFee.! !
!Behavior method!
fee
	#_coverageTracker18661259_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661259_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18661259_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18661259_
		coverAll:
			{21 to: 31}
		evaluating: [ receiver2 nationalFee ]
		thatSends: #nationalFee
		to: receiver2 ] value.! !
!Behavior method!
isCallOnAWeekDay: aCallToBill
	#_coverageTracker18661261_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661261_
		cover: (34 to: 44)
		declaredAt: (19 to: 29)
		by: aCallToBill.
	#_coverageTracker18661261_
		coverAll:
			{46 to: 49}
		evaluating: [ receiver1 date ]
		thatSends: #date
		to: receiver1 ] value.
	#_coverageTracker18661261_
		coverAll:
			{51 to: 59}
		evaluating: [ receiver2 isWeekDay ]
		thatSends: #isWeekDay
		to: receiver2 ] value.! !
!Behavior method!
fee
	#_coverageTracker18661265_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661265_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18661265_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18661265_
		coverAll:
			{21 to: 42}
		evaluating: [ receiver2 weekDayNonWorkHoursFee ]
		thatSends: #weekDayNonWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
line
	#_coverageTracker18661267_ markAsExecuted.
	^ #_coverageTracker18661267_
		cover: (8 to: 11)
		declaredAt: (8 to: 11)
		by: line.! !
!Behavior method!
internationalFee
	#_coverageTracker18661269_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661269_
		coverAll:
			{20 to: 21}
		byLiteralOrPseudoVariable: 25.
	#_coverageTracker18661269_
		coverAll:
			{23 to: 23}
		evaluating: [
			receiver1 *
				(#_coverageTracker18661269_
					coverAll:
						{25 to: 30}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18661269_
		coverAll:
			{32 to: 32}
		evaluating: [
			receiver2 /
				(#_coverageTracker18661269_
					coverAll:
						{34 to: 39}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
weekDayNonWorkHoursFee
	#_coverageTracker18661272_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661272_
		coverAll:
			{26 to: 28}
		byLiteralOrPseudoVariable: 0.1.
	#_coverageTracker18661272_
		coverAll:
			{30 to: 30}
		evaluating: [
			receiver1 *
				(#_coverageTracker18661272_
					coverAll:
						{32 to: 37}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18661272_
		coverAll:
			{39 to: 39}
		evaluating: [
			receiver2 /
				(#_coverageTracker18661272_
					coverAll:
						{41 to: 46}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
workingHoursStart
	#_coverageTracker18661276_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18661276_
		coverAll:
			{23 to: 23}
		byLiteralOrPseudoVariable: 8.
	#_coverageTracker18661276_
		coverAll:
			{24 to: 24}
		evaluating: [
			receiver1 :
				(#_coverageTracker18661276_
					coverAll:
						{25 to: 26}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #:
		to: receiver1 ] value.! !
!Behavior method!
date
	#_coverageTracker18661278_ markAsExecuted.
	^ #_coverageTracker18661278_
		cover: (8 to: 11)
		declaredAt: (8 to: 11)
		by: date.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18661280_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 := [ | receiver1 |
	receiver1 := #_coverageTracker18661280_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18661280_
		coverAll:
			{38 to: 44}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker18661280_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver6 and: [
				[ | receiver5 |
				receiver5 := [ | receiver2 |
				receiver2 := #_coverageTracker18661280_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18661280_
					coverAll:
						{58 to: 74}
					evaluating: [
						receiver2 isCallOnAWeekDay:
							(#_coverageTracker18661280_
								cover: (76 to: 86)
								declaredAt: (12 to: 22)
								by: aCallToBill) ]
					thatSends: #isCallOnAWeekDay:
					to: receiver2 ] value.
				#_coverageTracker18661280_
					coverAll:
						{89 to: 92}
					evaluating: [
						receiver5 and: [
							[ | receiver4 |
							receiver4 := [ | receiver3 |
							receiver3 := #_coverageTracker18661280_
								coverAll:
									{96 to: 99}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker18661280_
								coverAll:
									{101 to: 125}
								evaluating: [
									receiver3 isCallDuringWorkingHours:
										(#_coverageTracker18661280_
											cover: (127 to: 137)
											declaredAt: (12 to: 22)
											by: aCallToBill) ]
								thatSends: #isCallDuringWorkingHours:
								to: receiver3 ] value.
							#_coverageTracker18661280_
								coverAll:
									{140 to: 142}
								evaluating: [ receiver4 not ]
								thatSends: #not
								to: receiver4 ] value ]]
					thatSends: #and:
					to: receiver5 ] value ]]
		thatSends: #and:
		to: receiver6 ] value.! !
!Behavior method!
weekendFee
	#_coverageTracker18661286_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661286_
		coverAll:
			{14 to: 17}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18661286_
		coverAll:
			{19 to: 23}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18661286_
		coverAll:
			{25 to: 34}
		evaluating: [ receiver2 weekendFee ]
		thatSends: #weekendFee
		to: receiver2 ] value.! !
!Behavior method!
duration
	#_coverageTracker18661288_ markAsExecuted.
	^ #_coverageTracker18661288_
		cover: (12 to: 19)
		declaredAt: (12 to: 19)
		by: duration.! !
!Behavior method!
addToBill
	#_coverageTracker18661290_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18661290_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by: bill.
	#_coverageTracker18661290_
		coverAll:
			{19 to: 37}
		evaluating: [
			receiver2 addAsInternational:
				[ | receiver1 |
				receiver1 := #_coverageTracker18661290_
					coverAll:
						{39 to: 42}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18661290_
					coverAll:
						{44 to: 47}
					evaluating: [ receiver1 cost ]
					thatSends: #cost
					to: receiver1 ] value ]
		thatSends: #addAsInternational:
		to: receiver2 ] value.! !
!Behavior method!
addAsNational: aNationalCallCostToAdd
	#_coverageTracker18661294_ markAsExecuted.
	#_coverageTracker18661294_
		cover: (58 to: 70)
		declaredAt: (41 to: 53)
		by:
			(nationalUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18661294_
				cover: (41 to: 53)
				declaredAt: (41 to: 53)
				by: nationalUsage.
			#_coverageTracker18661294_
				coverAll:
					{72 to: 72}
				evaluating: [
					receiver1 +
						(#_coverageTracker18661294_
							cover: (74 to: 95)
							declaredAt: (16 to: 37)
							by: aNationalCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
fromRegion: aCallingRegion in: aCallingCountry number: aLineNumber
	#_coverageTracker18661299_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661299_
		coverAll:
			{73 to: 76}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18661299_
		coverAll:
			{78 to: 80}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker18661299_
		coverAll:
			{82 to: 102. 119 to: 121. 139 to: 145}
		evaluating: [
			receiver2
				initializeFromRegion:
					(#_coverageTracker18661299_
						cover: (104 to: 117)
						declaredAt: (13 to: 26)
						by: aCallingRegion)
				in:
					(#_coverageTracker18661299_
						cover: (123 to: 137)
						declaredAt: (32 to: 46)
						by: aCallingCountry)
				number:
					(#_coverageTracker18661299_
						cover: (147 to: 157)
						declaredAt: (56 to: 66)
						by: aLineNumber) ]
		thatSends: #initializeFromRegion:in:number:
		to: receiver2 ] value.! !
!Behavior method!
outgoingCalls
	"Podria argumentarse que rompe encapsulamiento, pero lo hago en pos de no agregarle logica de calculo de costos a la linea ya no que no tiene que ver con la esencia de este objeto."
	#_coverageTracker18661303_ markAsExecuted.
	^ #_coverageTracker18661303_
		cover: (200 to: 212)
		declaredAt: (200 to: 212)
		by: outgoingCalls.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18661305_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 := [ | receiver1 |
	receiver1 := #_coverageTracker18661305_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18661305_
		coverAll:
			{38 to: 44}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker18661305_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver4 and: [
				[ | receiver3 |
				receiver3 := [ | receiver2 |
				receiver2 := #_coverageTracker18661305_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18661305_
					coverAll:
						{58 to: 74}
					evaluating: [
						receiver2 isCallOnAWeekDay:
							(#_coverageTracker18661305_
								cover: (76 to: 86)
								declaredAt: (12 to: 22)
								by: aCallToBill) ]
					thatSends: #isCallOnAWeekDay:
					to: receiver2 ] value.
				#_coverageTracker18661305_
					coverAll:
						{89 to: 91}
					evaluating: [ receiver3 not ]
					thatSends: #not
					to: receiver3 ] value ]]
		thatSends: #and:
		to: receiver4 ] value.! !
!Behavior method!
isNational
	#_coverageTracker18661311_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 := [ | receiver1 |
	receiver1 := #_coverageTracker18661311_
		cover: (17 to: 22)
		declaredAt: (17 to: 22)
		by: callee.
	#_coverageTracker18661311_
		coverAll:
			{24 to: 43}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker18661311_
					cover: (45 to: 50)
					declaredAt: (45 to: 50)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker18661311_
		coverAll:
			{53 to: 56}
		evaluating: [
			receiver4 and: [
				[ | receiver3 |
				receiver3 := [ | receiver2 |
				receiver2 := #_coverageTracker18661311_
					cover: (60 to: 65)
					declaredAt: (17 to: 22)
					by: callee.
				#_coverageTracker18661311_
					coverAll:
						{67 to: 85}
					evaluating: [
						receiver2 isFromSameRegionAs:
							(#_coverageTracker18661311_
								cover: (87 to: 92)
								declaredAt: (45 to: 50)
								by: caller) ]
					thatSends: #isFromSameRegionAs:
					to: receiver2 ] value.
				#_coverageTracker18661311_
					coverAll:
						{95 to: 97}
					evaluating: [ receiver3 not ]
					thatSends: #not
					to: receiver3 ] value ]]
		thatSends: #and:
		to: receiver4 ] value.! !
!Behavior method!
weekDayWorkHoursFee
	#_coverageTracker18661315_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661315_
		coverAll:
			{23 to: 25}
		byLiteralOrPseudoVariable: 0.2.
	#_coverageTracker18661315_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver1 *
				(#_coverageTracker18661315_
					coverAll:
						{29 to: 34}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18661315_
		coverAll:
			{36 to: 36}
		evaluating: [
			receiver2 /
				(#_coverageTracker18661315_
					coverAll:
						{38 to: 43}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
timeOfDay
	#_coverageTracker18661319_ markAsExecuted.
	^ #_coverageTracker18661319_
		cover: (13 to: 21)
		declaredAt: (13 to: 21)
		by: timeOfDay.! !
!Behavior method!
internationalFee
	#_coverageTracker18661319_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661319_
		coverAll:
			{20 to: 23}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18661319_
		coverAll:
			{25 to: 29}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18661319_
		coverAll:
			{31 to: 46}
		evaluating: [ receiver2 internationalFee ]
		thatSends: #internationalFee
		to: receiver2 ] value.! !
!Behavior method!
isFromSameCountryAs: aTelephoneLine
	#_coverageTracker18661321_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18661321_
		cover: (40 to: 46)
		declaredAt: (40 to: 46)
		by: country.
	#_coverageTracker18661321_
		coverAll:
			{48 to: 48}
		evaluating: [
			receiver2 =
				[ | receiver1 |
				receiver1 := #_coverageTracker18661321_
					cover: (50 to: 63)
					declaredAt: (22 to: 35)
					by: aTelephoneLine.
				#_coverageTracker18661321_
					coverAll:
						{65 to: 71}
					evaluating: [ receiver1 country ]
					thatSends: #country
					to: receiver1 ] value ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
totalDue
	#_coverageTracker18661326_ markAsExecuted.
	^ #_coverageTracker18661326_
		cover: (12 to: 16)
		declaredAt: (12 to: 16)
		by: total.! !
!Behavior method!
fee
	#_coverageTracker18661328_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661328_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18661328_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18661328_
		coverAll:
			{21 to: 36}
		evaluating: [ receiver2 internationalFee ]
		thatSends: #internationalFee
		to: receiver2 ] value.! !
!Behavior method!
number
	#_coverageTracker18661330_ markAsExecuted.
	^ #_coverageTracker18661330_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: number.! !
!Behavior method!
isFromSameRegionAs: aTelephoneLine
	#_coverageTracker18661332_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18661332_
		cover: (39 to: 44)
		declaredAt: (39 to: 44)
		by: region.
	#_coverageTracker18661332_
		coverAll:
			{46 to: 46}
		evaluating: [
			receiver2 =
				[ | receiver1 |
				receiver1 := #_coverageTracker18661332_
					cover: (48 to: 61)
					declaredAt: (21 to: 34)
					by: aTelephoneLine.
				#_coverageTracker18661332_
					coverAll:
						{63 to: 68}
					evaluating: [ receiver1 region ]
					thatSends: #region
					to: receiver1 ] value ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
initializeFor: aCallToBill in: aRequestingBill
	#_coverageTracker18661336_ markAsExecuted.
	#_coverageTracker18661336_
		cover: (50 to: 53)
		declaredAt: (50 to: 53)
		by:
			(call := #_coverageTracker18661336_
				cover: (58 to: 68)
				declaredAt: (16 to: 26)
				by: aCallToBill).
	#_coverageTracker18661336_
		cover: (72 to: 75)
		declaredAt: (72 to: 75)
		by:
			(bill := #_coverageTracker18661336_
				cover: (80 to: 94)
				declaredAt: (32 to: 46)
				by: aRequestingBill).! !
!Behavior method!
weekDayNonWorkHoursFee
	#_coverageTracker18661338_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661338_
		coverAll:
			{26 to: 29}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18661338_
		coverAll:
			{31 to: 35}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18661338_
		coverAll:
			{37 to: 58}
		evaluating: [ receiver2 weekDayNonWorkHoursFee ]
		thatSends: #weekDayNonWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
for: aLineToBill duringMonth: aMonthOfBilling
	#_coverageTracker18661340_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661340_
		coverAll:
			{50 to: 53}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18661340_
		coverAll:
			{55 to: 57}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker18661340_
		coverAll:
			{59 to: 72. 86 to: 97}
		evaluating: [
			receiver2
				initializeFor:
					(#_coverageTracker18661340_
						cover: (74 to: 84)
						declaredAt: (6 to: 16)
						by: aLineToBill)
				duringMonth:
					(#_coverageTracker18661340_
						cover: (99 to: 113)
						declaredAt: (31 to: 45)
						by: aMonthOfBilling) ]
		thatSends: #initializeFor:duringMonth:
		to: receiver2 ] value.! !
!Behavior method!
isInternational
	#_coverageTracker18661344_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661344_
		cover: (22 to: 27)
		declaredAt: (22 to: 27)
		by: callee.
	#_coverageTracker18661344_
		coverAll:
			{29 to: 48}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker18661344_
					cover: (50 to: 55)
					declaredAt: (50 to: 55)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker18661344_
		coverAll:
			{58 to: 60}
		evaluating: [ receiver2 not ]
		thatSends: #not
		to: receiver2 ] value.! !
!Behavior method!
cost
	#_coverageTracker18661346_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18661346_
		cover: (10 to: 13)
		declaredAt: (10 to: 13)
		by: call.
	#_coverageTracker18661346_
		coverAll:
			{15 to: 22}
		evaluating: [ receiver1 duration ]
		thatSends: #duration
		to: receiver1 ] value.
	#_coverageTracker18661346_
		coverAll:
			{24 to: 24}
		evaluating: [
			receiver3 *
				[ | receiver2 |
				receiver2 := #_coverageTracker18661346_
					coverAll:
						{26 to: 29}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18661346_
					coverAll:
						{31 to: 33}
					evaluating: [ receiver2 fee ]
					thatSends: #fee
					to: receiver2 ] value ]
		thatSends: #*
		to: receiver3 ] value.! !
!Behavior method!
fee
	#_coverageTracker18661350_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18661350_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18661350_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18661350_
		coverAll:
			{21 to: 30}
		evaluating: [ receiver2 weekendFee ]
		thatSends: #weekendFee
		to: receiver2 ] value.! !
!Behavior method!
isLocal
	#_coverageTracker18661354_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18661354_
		cover: (14 to: 19)
		declaredAt: (14 to: 19)
		by: callee.
	#_coverageTracker18661354_
		coverAll:
			{21 to: 40}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker18661354_
					cover: (42 to: 47)
					declaredAt: (42 to: 47)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker18661354_
		coverAll:
			{50 to: 53}
		evaluating: [
			receiver3 and: [
				[ | receiver2 |
				receiver2 := #_coverageTracker18661354_
					cover: (57 to: 62)
					declaredAt: (14 to: 19)
					by: callee.
				#_coverageTracker18661354_
					coverAll:
						{64 to: 82}
					evaluating: [
						receiver2 isFromSameRegionAs:
							(#_coverageTracker18661354_
								cover: (84 to: 89)
								declaredAt: (42 to: 47)
								by: caller) ]
					thatSends: #isFromSameRegionAs:
					to: receiver2 ] value ]]
		thatSends: #and:
		to: receiver3 ] value.! !

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:10:13'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:13'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:13'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:13'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:13'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:13'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:10:14'!
PASSED!

!methodRemoval: CallBiller #initializeFor: stamp: 'AS 3/30/2025 23:10:42'!
initializeFor: aCallToBill 
	call := aCallToBill.!

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:10:43'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:43'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:43'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:43'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:43'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:43'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:10:43'!
PASSED!
!Behavior method!
nationalFee
	#_coverageTracker18693994_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18693994_
		coverAll:
			{15 to: 18}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18693994_
		coverAll:
			{20 to: 24}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18693994_
		coverAll:
			{26 to: 36}
		evaluating: [ receiver2 nationalFee ]
		thatSends: #nationalFee
		to: receiver2 ] value.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18694002_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18694002_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18694002_
		coverAll:
			{38 to: 52}
		evaluating: [ receiver1 isInternational ]
		thatSends: #isInternational
		to: receiver1 ] value.! !
!Behavior method!
initializeFromRegion: aCallingRegion in: aCallingCountry number: aLineNumber
	#_coverageTracker18694009_ markAsExecuted.
	#_coverageTracker18694009_
		cover: (82 to: 87)
		declaredAt: (82 to: 87)
		by:
			(region := #_coverageTracker18694009_
				cover: (92 to: 105)
				declaredAt: (23 to: 36)
				by: aCallingRegion).
	#_coverageTracker18694009_
		cover: (109 to: 115)
		declaredAt: (109 to: 115)
		by:
			(country := #_coverageTracker18694009_
				cover: (120 to: 134)
				declaredAt: (42 to: 56)
				by: aCallingCountry).
	#_coverageTracker18694009_
		cover: (138 to: 143)
		declaredAt: (138 to: 143)
		by:
			(number := #_coverageTracker18694009_
				cover: (148 to: 158)
				declaredAt: (66 to: 76)
				by: aLineNumber).! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18694015_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 := [ | receiver1 |
	receiver1 := #_coverageTracker18694015_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18694015_
		coverAll:
			{38 to: 44}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker18694015_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver5 and: [
				[ | receiver4 |
				receiver4 := [ | receiver2 |
				receiver2 := #_coverageTracker18694015_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18694015_
					coverAll:
						{58 to: 74}
					evaluating: [
						receiver2 isCallOnAWeekDay:
							(#_coverageTracker18694015_
								cover: (76 to: 86)
								declaredAt: (12 to: 22)
								by: aCallToBill) ]
					thatSends: #isCallOnAWeekDay:
					to: receiver2 ] value.
				#_coverageTracker18694015_
					coverAll:
						{89 to: 92}
					evaluating: [
						receiver4 and: [
							[ | receiver3 |
							receiver3 := #_coverageTracker18694015_
								coverAll:
									{95 to: 98}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker18694015_
								coverAll:
									{100 to: 124}
								evaluating: [
									receiver3 isCallDuringWorkingHours:
										(#_coverageTracker18694015_
											cover: (126 to: 136)
											declaredAt: (12 to: 22)
											by: aCallToBill) ]
								thatSends: #isCallDuringWorkingHours:
								to: receiver3 ] value ]]
					thatSends: #and:
					to: receiver4 ] value ]]
		thatSends: #and:
		to: receiver5 ] value.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18694025_ markAsExecuted.
	^ #_coverageTracker18694025_
		coverAll:
			{26 to: 30}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
region
	#_coverageTracker18694027_ markAsExecuted.
	^ #_coverageTracker18694027_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: region.! !
!Behavior method!
localUsage
	#_coverageTracker18694031_ markAsExecuted.
	^ #_coverageTracker18694031_
		cover: (14 to: 23)
		declaredAt: (14 to: 23)
		by: localUsage.! !
!Behavior method!
nationalUsage
	#_coverageTracker18694033_ markAsExecuted.
	^ #_coverageTracker18694033_
		cover: (17 to: 29)
		declaredAt: (17 to: 29)
		by: nationalUsage.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18694035_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18694035_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18694035_
		coverAll:
			{38 to: 47}
		evaluating: [ receiver1 isNational ]
		thatSends: #isNational
		to: receiver1 ] value.! !
!Behavior method!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDate at: aTimeOfDay for: aCallDuration
	#_coverageTracker18694040_ markAsExecuted.
	#_coverageTracker18694040_
		cover: (98 to: 103)
		declaredAt: (98 to: 103)
		by:
			(caller := #_coverageTracker18694040_
				cover: (108 to: 119)
				declaredAt: (17 to: 28)
				by: aCallingLine).
	#_coverageTracker18694040_
		cover: (123 to: 128)
		declaredAt: (123 to: 128)
		by:
			(callee := #_coverageTracker18694040_
				cover: (133 to: 149)
				declaredAt: (34 to: 50)
				by: aLineThatIsCalled).
	#_coverageTracker18694040_
		cover: (153 to: 156)
		declaredAt: (153 to: 156)
		by:
			(date := #_coverageTracker18694040_
				cover: (161 to: 165)
				declaredAt: (56 to: 60)
				by: aDate).
	#_coverageTracker18694040_
		cover: (169 to: 177)
		declaredAt: (169 to: 177)
		by:
			(timeOfDay := #_coverageTracker18694040_
				cover: (182 to: 191)
				declaredAt: (66 to: 75)
				by: aTimeOfDay).
	#_coverageTracker18694040_
		cover: (195 to: 202)
		declaredAt: (195 to: 202)
		by:
			(duration := #_coverageTracker18694040_
				cover: (207 to: 219)
				declaredAt: (82 to: 94)
				by: aCallDuration).! !
!Behavior method!
caller
	#_coverageTracker18694046_ markAsExecuted.
	^ #_coverageTracker18694046_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: caller.! !
!Behavior method!
add: aCallCostToAdd
	#_coverageTracker18694048_ markAsExecuted.
	#_coverageTracker18694048_
		cover: (32 to: 36)
		declaredAt: (23 to: 27)
		by:
			(total := [ | receiver1 |
			receiver1 := #_coverageTracker18694048_
				cover: (23 to: 27)
				declaredAt: (23 to: 27)
				by: total.
			#_coverageTracker18694048_
				coverAll:
					{38 to: 38}
				evaluating: [
					receiver1 +
						(#_coverageTracker18694048_
							cover: (40 to: 53)
							declaredAt: (6 to: 19)
							by: aCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
addToBill
	#_coverageTracker18694052_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18694052_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by: bill.
	#_coverageTracker18694052_
		coverAll:
			{19 to: 29}
		evaluating: [
			receiver2 addAsLocal:
				[ | receiver1 |
				receiver1 := #_coverageTracker18694052_
					coverAll:
						{31 to: 34}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18694052_
					coverAll:
						{36 to: 39}
					evaluating: [ receiver1 cost ]
					thatSends: #cost
					to: receiver1 ] value ]
		thatSends: #addAsLocal:
		to: receiver2 ] value.! !
!Behavior method!
addAsInternational: anInternationalCallCostToAdd
	#_coverageTracker18694056_ markAsExecuted.
	#_coverageTracker18694056_
		cover: (74 to: 91)
		declaredAt: (52 to: 69)
		by:
			(internationalUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18694056_
				cover: (52 to: 69)
				declaredAt: (52 to: 69)
				by: internationalUsage.
			#_coverageTracker18694056_
				coverAll:
					{93 to: 93}
				evaluating: [
					receiver1 +
						(#_coverageTracker18694056_
							cover: (95 to: 122)
							declaredAt: (21 to: 48)
							by: anInternationalCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
addAsLocal: aLocalCallCostToAdd
	#_coverageTracker18694060_ markAsExecuted.
	#_coverageTracker18694060_
		cover: (49 to: 58)
		declaredAt: (35 to: 44)
		by:
			(localUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18694060_
				cover: (35 to: 44)
				declaredAt: (35 to: 44)
				by: localUsage.
			#_coverageTracker18694060_
				coverAll:
					{60 to: 60}
				evaluating: [
					receiver1 +
						(#_coverageTracker18694060_
							cover: (62 to: 80)
							declaredAt: (13 to: 31)
							by: aLocalCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
calculateTotalCost
	"Se podria argumentar que si agrego un tipo de llamada debo modificar este metodo, y que por lo tanto seria mejor sumar los costos
	de manera indistinta, pero creo que el hecho de que haya distintos tipos de llamada es esencial a la factura (por el enunciado), ya
	que entiendo que pide que se discriminen los costos, lo cual no se podria hacer si no se diferenciaran los tipos de estos.
	Por lo tanto tiene sentido tener que ademas modificar la factura si se agrega un nuevo tipo."
	#_coverageTracker18694066_ markAsExecuted.
	#_coverageTracker18694066_
		cover: (509 to: 518)
		declaredAt: (509 to: 518)
		by:
			(localUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18694066_
				coverAll:
					{523 to: 523}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker18694066_
				coverAll:
					{524 to: 524}
				evaluating: [
					receiver1 *
						(#_coverageTracker18694066_
							coverAll:
								{525 to: 530}
							by: dollar) ]
				thatSends: #*
				to: receiver1 ] value).
	#_coverageTracker18694066_
		cover: (534 to: 546)
		declaredAt: (534 to: 546)
		by:
			(nationalUsage := [ | receiver2 |
			receiver2 := #_coverageTracker18694066_
				coverAll:
					{551 to: 551}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker18694066_
				coverAll:
					{552 to: 552}
				evaluating: [
					receiver2 *
						(#_coverageTracker18694066_
							coverAll:
								{553 to: 558}
							by: dollar) ]
				thatSends: #*
				to: receiver2 ] value).
	#_coverageTracker18694066_
		cover: (562 to: 579)
		declaredAt: (562 to: 579)
		by:
			(internationalUsage := [ | receiver3 |
			receiver3 := #_coverageTracker18694066_
				coverAll:
					{584 to: 584}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker18694066_
				coverAll:
					{585 to: 585}
				evaluating: [
					receiver3 *
						(#_coverageTracker18694066_
							coverAll:
								{586 to: 591}
							by: dollar) ]
				thatSends: #*
				to: receiver3 ] value).
	[ | receiver7 |
	receiver7 := [ | receiver4 |
	receiver4 := #_coverageTracker18694066_
		cover: (595 to: 598)
		declaredAt: (595 to: 598)
		by: line.
	#_coverageTracker18694066_
		coverAll:
			{600 to: 612}
		evaluating: [ receiver4 outgoingCalls ]
		thatSends: #outgoingCalls
		to: receiver4 ] value.
	#_coverageTracker18694066_
		coverAll:
			{614 to: 616}
		evaluating: [
			receiver7 do: [ :aCall |
				[ | receiver6 |
				receiver6 := [ | receiver5 |
				receiver5 := #_coverageTracker18694066_
					coverAll:
						{630 to: 639}
					by: CallBiller.
				#_coverageTracker18694066_
					coverAll:
						{641 to: 644. 652 to: 654}
					evaluating: [
						receiver5
							for:
								(#_coverageTracker18694066_
									cover: (646 to: 650)
									declaredAt: (621 to: 625)
									by: aCall)
							in:
								(#_coverageTracker18694066_
									coverAll:
										{656 to: 659}
									byLiteralOrPseudoVariable: self) ]
					thatSends: #for:in:
					to: receiver5 ] value.
				#_coverageTracker18694066_
					coverAll:
						{662 to: 670}
					evaluating: [ receiver6 addToBill ]
					thatSends: #addToBill
					to: receiver6 ] value ]]
		thatSends: #do:
		to: receiver7 ] value.
	#_coverageTracker18694066_
		cover: (677 to: 681)
		declaredAt: (677 to: 681)
		by:
			(total := [ | receiver11 |
			receiver11 := [ | receiver10 |
			receiver10 := [ | receiver9 |
			receiver9 := [ | receiver8 |
			receiver8 := #_coverageTracker18694066_
				cover: (686 to: 689)
				declaredAt: (595 to: 598)
				by: line.
			#_coverageTracker18694066_
				coverAll:
					{691 to: 705}
				evaluating: [ receiver8 basicMonthlyFee ]
				thatSends: #basicMonthlyFee
				to: receiver8 ] value.
			#_coverageTracker18694066_
				coverAll:
					{707 to: 707}
				evaluating: [
					receiver9 +
						(#_coverageTracker18694066_
							cover: (709 to: 718)
							declaredAt: (509 to: 518)
							by: localUsage) ]
				thatSends: #+
				to: receiver9 ] value.
			#_coverageTracker18694066_
				coverAll:
					{720 to: 720}
				evaluating: [
					receiver10 +
						(#_coverageTracker18694066_
							cover: (722 to: 734)
							declaredAt: (534 to: 546)
							by: nationalUsage) ]
				thatSends: #+
				to: receiver10 ] value.
			#_coverageTracker18694066_
				coverAll:
					{736 to: 736}
				evaluating: [
					receiver11 +
						(#_coverageTracker18694066_
							cover: (738 to: 755)
							declaredAt: (562 to: 579)
							by: internationalUsage) ]
				thatSends: #+
				to: receiver11 ] value).! !
!Behavior method!
weekendFee
	#_coverageTracker18694089_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694089_
		coverAll:
			{14 to: 16}
		byLiteralOrPseudoVariable: 0.1.
	#_coverageTracker18694089_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver1 *
				(#_coverageTracker18694089_
					coverAll:
						{20 to: 25}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18694089_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver2 /
				(#_coverageTracker18694089_
					coverAll:
						{29 to: 34}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
show
	#_coverageTracker18694095_ markAsExecuted.
	^ [ | receiver15 |
	receiver15 := #_coverageTracker18694095_
		coverAll:
			{9 to: 25}
		by: OrderedCollection.
	#_coverageTracker18694095_
		coverAll:
			{27 to: 31. 137 to: 141. 203 to: 207. 262 to: 266. 366 to: 370}
		evaluating: [
			receiver15
				with:
					[ | receiver5 |
					receiver5 := [ | receiver3 |
					receiver3 := [ | receiver2 |
					receiver2 := #_coverageTracker18694095_
						coverAll:
							{33 to: 55}
						byLiteralOrPseudoVariable: 'Bill for line number '.
					#_coverageTracker18694095_
						coverAll:
							{56 to: 56}
						evaluating: [
							receiver2 ,
								[ | receiver1 |
								receiver1 := #_coverageTracker18694095_
									cover: (58 to: 61)
									declaredAt: (58 to: 61)
									by: line.
								#_coverageTracker18694095_
									coverAll:
										{63 to: 68}
									evaluating: [ receiver1 number ]
									thatSends: #number
									to: receiver1 ] value ]
						thatSends: #,
						to: receiver2 ] value.
					#_coverageTracker18694095_
						coverAll:
							{70 to: 70}
						evaluating: [
							receiver3 ,
								(#_coverageTracker18694095_
									coverAll:
										{72 to: 88}
									byLiteralOrPseudoVariable: ' during period ') ]
						thatSends: #,
						to: receiver3 ] value.
					#_coverageTracker18694095_
						coverAll:
							{89 to: 89}
						evaluating: [
							receiver5 ,
								[ | receiver4 |
								receiver4 := #_coverageTracker18694095_
									cover: (91 to: 104)
									declaredAt: (91 to: 104)
									by: monthOfBilling.
								#_coverageTracker18694095_
									coverAll:
										{106 to: 113}
									evaluating: [ receiver4 asString ]
									thatSends: #asString
									to: receiver4 ] value ]
						thatSends: #,
						to: receiver5 ] value
				with:
					[ | receiver7 |
					receiver7 := #_coverageTracker18694095_
						coverAll:
							{143 to: 159}
						byLiteralOrPseudoVariable: '		Monthly fee: '.
					#_coverageTracker18694095_
						coverAll:
							{160 to: 160}
						evaluating: [
							receiver7 ,
								[ | receiver6 |
								receiver6 := #_coverageTracker18694095_
									cover: (162 to: 176)
									declaredAt: (162 to: 176)
									by: basicMonthlyFee.
								#_coverageTracker18694095_
									coverAll:
										{178 to: 185}
									evaluating: [ receiver6 asString ]
									thatSends: #asString
									to: receiver6 ] value ]
						thatSends: #,
						to: receiver7 ] value
				with:
					[ | receiver9 |
					receiver9 := #_coverageTracker18694095_
						coverAll:
							{209 to: 223}
						byLiteralOrPseudoVariable: 'Local usage: '.
					#_coverageTracker18694095_
						coverAll:
							{224 to: 224}
						evaluating: [
							receiver9 ,
								[ | receiver8 |
								receiver8 := #_coverageTracker18694095_
									cover: (226 to: 235)
									declaredAt: (226 to: 235)
									by: localUsage.
								#_coverageTracker18694095_
									coverAll:
										{237 to: 244}
									evaluating: [ receiver8 asString ]
									thatSends: #asString
									to: receiver8 ] value ]
						thatSends: #,
						to: receiver9 ] value
				with:
					[ | receiver12 |
					receiver12 := #_coverageTracker18694095_
						coverAll:
							{268 to: 303}
						byLiteralOrPseudoVariable: 'National and international usage: '.
					#_coverageTracker18694095_
						coverAll:
							{304 to: 304}
						evaluating: [
							receiver12 ,
								[ | receiver11 |
								receiver11 := [ | receiver10 |
								receiver10 := #_coverageTracker18694095_
									coverAll:
										{306 to: 309}
									byLiteralOrPseudoVariable: self.
								#_coverageTracker18694095_
									coverAll:
										{311 to: 339}
									evaluating: [ receiver10 nationalAndInternationalUsage ]
									thatSends: #nationalAndInternationalUsage
									to: receiver10 ] value.
								#_coverageTracker18694095_
									coverAll:
										{341 to: 348}
									evaluating: [ receiver11 asString ]
									thatSends: #asString
									to: receiver11 ] value ]
						thatSends: #,
						to: receiver12 ] value
				with:
					[ | receiver14 |
					receiver14 := #_coverageTracker18694095_
						coverAll:
							{372 to: 384}
						byLiteralOrPseudoVariable: 'Total due: '.
					#_coverageTracker18694095_
						coverAll:
							{386 to: 386}
						evaluating: [
							receiver14 ,
								[ | receiver13 |
								receiver13 := #_coverageTracker18694095_
									cover: (388 to: 392)
									declaredAt: (388 to: 392)
									by: total.
								#_coverageTracker18694095_
									coverAll:
										{394 to: 401}
									evaluating: [ receiver13 asString ]
									thatSends: #asString
									to: receiver13 ] value ]
						thatSends: #,
						to: receiver14 ] value ]
		thatSends: #with:with:with:with:with:
		to: receiver15 ] value.! !
!Behavior method!
calls: aLineThatWasCalled on: aDate at: aTimeOfDay for: aCallDuration
	#_coverageTracker18694116_ markAsExecuted.
	[ | receiver2 |
	receiver2 := #_coverageTracker18694116_
		cover: (72 to: 84)
		declaredAt: (72 to: 84)
		by: outgoingCalls.
	#_coverageTracker18694116_
		coverAll:
			{86 to: 89}
		evaluating: [
			receiver2 add:
				[ | receiver1 |
				receiver1 := #_coverageTracker18694116_
					coverAll:
						{92 to: 95}
					by: Call.
				#_coverageTracker18694116_
					coverAll:
						{97 to: 101. 108 to: 110. 131 to: 133. 141 to: 143. 156 to: 159}
					evaluating: [
						receiver1
							from:
								(#_coverageTracker18694116_
									coverAll:
										{103 to: 106}
									byLiteralOrPseudoVariable: self)
							to:
								(#_coverageTracker18694116_
									cover: (112 to: 129)
									declaredAt: (8 to: 25)
									by: aLineThatWasCalled)
							on:
								(#_coverageTracker18694116_
									cover: (135 to: 139)
									declaredAt: (31 to: 35)
									by: aDate)
							at:
								(#_coverageTracker18694116_
									cover: (145 to: 154)
									declaredAt: (41 to: 50)
									by: aTimeOfDay)
							for:
								(#_coverageTracker18694116_
									cover: (161 to: 173)
									declaredAt: (57 to: 69)
									by: aCallDuration) ]
					thatSends: #from:to:on:at:for:
					to: receiver1 ] value ]
		thatSends: #add:
		to: receiver2 ] value.! !
!Behavior method!
country
	#_coverageTracker18694124_ markAsExecuted.
	^ #_coverageTracker18694124_
		cover: (11 to: 17)
		declaredAt: (11 to: 17)
		by: country.! !
!Behavior method!
from: aCallingLine to: aLineThatIsCalled on: aDate at: aTimeOfDay for: aCallDuration
	#_coverageTracker18694126_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694126_
		coverAll:
			{88 to: 91}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18694126_
		coverAll:
			{93 to: 95}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker18694126_
		coverAll:
			{97 to: 111. 126 to: 128. 148 to: 150. 158 to: 160. 173 to: 176}
		evaluating: [
			receiver2
				initializeFrom:
					(#_coverageTracker18694126_
						cover: (113 to: 124)
						declaredAt: (7 to: 18)
						by: aCallingLine)
				to:
					(#_coverageTracker18694126_
						cover: (130 to: 146)
						declaredAt: (24 to: 40)
						by: aLineThatIsCalled)
				on:
					(#_coverageTracker18694126_
						cover: (152 to: 156)
						declaredAt: (46 to: 50)
						by: aDate)
				at:
					(#_coverageTracker18694126_
						cover: (162 to: 171)
						declaredAt: (56 to: 65)
						by: aTimeOfDay)
				for:
					(#_coverageTracker18694126_
						cover: (178 to: 190)
						declaredAt: (72 to: 84)
						by: aCallDuration) ]
		thatSends: #initializeFrom:to:on:at:for:
		to: receiver2 ] value.! !
!Behavior method!
nationalAndInternationalUsage
	#_coverageTracker18694134_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18694134_
		cover: (33 to: 45)
		declaredAt: (33 to: 45)
		by: nationalUsage.
	#_coverageTracker18694134_
		coverAll:
			{47 to: 47}
		evaluating: [
			receiver1 +
				(#_coverageTracker18694134_
					cover: (49 to: 66)
					declaredAt: (49 to: 66)
					by: internationalUsage) ]
		thatSends: #+
		to: receiver1 ] value.! !
!Behavior method!
fee
	#_coverageTracker18694137_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694137_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18694137_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18694137_
		coverAll:
			{21 to: 39}
		evaluating: [ receiver2 weekDayWorkHoursFee ]
		thatSends: #weekDayWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
nationalFee
	#_coverageTracker18694141_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694141_
		coverAll:
			{15 to: 16}
		byLiteralOrPseudoVariable: 14.
	#_coverageTracker18694141_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver1 *
				(#_coverageTracker18694141_
					coverAll:
						{20 to: 25}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18694141_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver2 /
				(#_coverageTracker18694141_
					coverAll:
						{29 to: 34}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker18694147_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18694147_
		coverAll:
			{19 to: 20}
		byLiteralOrPseudoVariable: 10.
	#_coverageTracker18694147_
		coverAll:
			{22 to: 22}
		evaluating: [
			receiver1 *
				(#_coverageTracker18694147_
					coverAll:
						{24 to: 29}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.! !
!Behavior method!
for: aCallToBill in: aRequestingBill
	#_coverageTracker18694149_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 := [ | receiver4 |
	receiver4 := [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18694149_
		coverAll:
			{42 to: 45}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18694149_
		coverAll:
			{47 to: 59}
		evaluating: [ receiver1 allSubclasses ]
		thatSends: #allSubclasses
		to: receiver1 ] value.
	#_coverageTracker18694149_
		coverAll:
			{61 to: 67}
		evaluating: [
			receiver3 detect: [ :aSubclass |
				[ | receiver2 |
				receiver2 := #_coverageTracker18694149_
					cover: (83 to: 91)
					declaredAt: (71 to: 79)
					by: aSubclass.
				#_coverageTracker18694149_
					coverAll:
						{93 to: 102}
					evaluating: [
						receiver2 canHandle:
							(#_coverageTracker18694149_
								cover: (104 to: 114)
								declaredAt: (6 to: 16)
								by: aCallToBill) ]
					thatSends: #canHandle:
					to: receiver2 ] value ]]
		thatSends: #detect:
		to: receiver3 ] value.
	#_coverageTracker18694149_
		coverAll:
			{118 to: 120}
		evaluating: [ receiver4 new ]
		thatSends: #new
		to: receiver4 ] value.
	#_coverageTracker18694149_
		coverAll:
			{122 to: 135. 149 to: 151}
		evaluating: [
			receiver5
				initializeFor:
					(#_coverageTracker18694149_
						cover: (137 to: 147)
						declaredAt: (6 to: 16)
						by: aCallToBill)
				in:
					(#_coverageTracker18694149_
						cover: (153 to: 167)
						declaredAt: (22 to: 36)
						by: aRequestingBill) ]
		thatSends: #initializeFor:in:
		to: receiver5 ] value.! !
!Behavior method!
workingHoursEnd
	#_coverageTracker18694157_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18694157_
		coverAll:
			{21 to: 22}
		byLiteralOrPseudoVariable: 20.
	#_coverageTracker18694157_
		coverAll:
			{23 to: 23}
		evaluating: [
			receiver1 :
				(#_coverageTracker18694157_
					coverAll:
						{24 to: 25}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #:
		to: receiver1 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker18694161_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694161_
		coverAll:
			{19 to: 22}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18694161_
		coverAll:
			{24 to: 28}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18694161_
		coverAll:
			{30 to: 44}
		evaluating: [ receiver2 basicMonthlyFee ]
		thatSends: #basicMonthlyFee
		to: receiver2 ] value.! !
!Behavior method!
month
	#_coverageTracker18694163_ markAsExecuted.
	^ #_coverageTracker18694163_
		cover: (9 to: 22)
		declaredAt: (9 to: 22)
		by: monthOfBilling.! !
!Behavior method!
weekDayWorkHoursFee
	#_coverageTracker18694165_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694165_
		coverAll:
			{23 to: 26}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18694165_
		coverAll:
			{28 to: 32}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18694165_
		coverAll:
			{34 to: 52}
		evaluating: [ receiver2 weekDayWorkHoursFee ]
		thatSends: #weekDayWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
addToBill
	#_coverageTracker18694167_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18694167_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by: bill.
	#_coverageTracker18694167_
		coverAll:
			{19 to: 32}
		evaluating: [
			receiver2 addAsNational:
				[ | receiver1 |
				receiver1 := #_coverageTracker18694167_
					coverAll:
						{34 to: 37}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18694167_
					coverAll:
						{39 to: 42}
					evaluating: [ receiver1 cost ]
					thatSends: #cost
					to: receiver1 ] value ]
		thatSends: #addAsNational:
		to: receiver2 ] value.! !
!Behavior method!
internationalUsage
	#_coverageTracker18694172_ markAsExecuted.
	^ #_coverageTracker18694172_
		cover: (22 to: 39)
		declaredAt: (22 to: 39)
		by: internationalUsage.! !
!Behavior method!
isCallDuringWorkingHours: aCallToBill
	#_coverageTracker18694174_ markAsExecuted.
	^ [ | receiver7 |
	receiver7 := [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18694174_
		coverAll:
			{44 to: 47}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18694174_
		coverAll:
			{49 to: 65}
		evaluating: [ receiver1 workingHoursStart ]
		thatSends: #workingHoursStart
		to: receiver1 ] value.
	#_coverageTracker18694174_
		coverAll:
			{67 to: 68}
		evaluating: [
			receiver3 <=
				[ | receiver2 |
				receiver2 := #_coverageTracker18694174_
					cover: (70 to: 80)
					declaredAt: (27 to: 37)
					by: aCallToBill.
				#_coverageTracker18694174_
					coverAll:
						{82 to: 90}
					evaluating: [ receiver2 timeOfDay ]
					thatSends: #timeOfDay
					to: receiver2 ] value ]
		thatSends: #<=
		to: receiver3 ] value.
	#_coverageTracker18694174_
		coverAll:
			{93 to: 96}
		evaluating: [
			receiver7 and: [
				[ | receiver6 |
				receiver6 := [ | receiver4 |
				receiver4 := #_coverageTracker18694174_
					cover: (99 to: 109)
					declaredAt: (27 to: 37)
					by: aCallToBill.
				#_coverageTracker18694174_
					coverAll:
						{111 to: 119}
					evaluating: [ receiver4 timeOfDay ]
					thatSends: #timeOfDay
					to: receiver4 ] value.
				#_coverageTracker18694174_
					coverAll:
						{121 to: 122}
					evaluating: [
						receiver6 <=
							[ | receiver5 |
							receiver5 := #_coverageTracker18694174_
								coverAll:
									{125 to: 128}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker18694174_
								coverAll:
									{130 to: 144}
								evaluating: [ receiver5 workingHoursEnd ]
								thatSends: #workingHoursEnd
								to: receiver5 ] value ]
					thatSends: #<=
					to: receiver6 ] value ]]
		thatSends: #and:
		to: receiver7 ] value.! !
!Behavior method!
initialize
	#_coverageTracker18694182_ markAsExecuted.
	#_coverageTracker18694182_
		cover: (13 to: 25)
		declaredAt: (13 to: 25)
		by:
			(outgoingCalls := [ | receiver1 |
			receiver1 := #_coverageTracker18694182_
				coverAll:
					{31 to: 47}
				by: OrderedCollection.
			#_coverageTracker18694182_
				coverAll:
					{49 to: 51}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18694186_ markAsExecuted.
	^ #_coverageTracker18694186_
		coverAll:
			{26 to: 30}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
initializeFor: aLineToBill duringMonth: aMonthOfBilling
	#_coverageTracker18694188_ markAsExecuted.
	#_coverageTracker18694188_
		cover: (59 to: 62)
		declaredAt: (59 to: 62)
		by:
			(line := #_coverageTracker18694188_
				cover: (67 to: 77)
				declaredAt: (16 to: 26)
				by: aLineToBill).
	#_coverageTracker18694188_
		cover: (81 to: 94)
		declaredAt: (81 to: 94)
		by:
			(monthOfBilling := #_coverageTracker18694188_
				cover: (99 to: 113)
				declaredAt: (41 to: 55)
				by: aMonthOfBilling).
	#_coverageTracker18694188_
		cover: (117 to: 131)
		declaredAt: (117 to: 131)
		by:
			(basicMonthlyFee := [ | receiver1 |
			receiver1 := #_coverageTracker18694188_
				cover: (136 to: 139)
				declaredAt: (59 to: 62)
				by: line.
			#_coverageTracker18694188_
				coverAll:
					{141 to: 155}
				evaluating: [ receiver1 basicMonthlyFee ]
				thatSends: #basicMonthlyFee
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 := #_coverageTracker18694188_
		coverAll:
			{261 to: 264}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18694188_
		coverAll:
			{266 to: 283}
		evaluating: [ receiver2 calculateTotalCost ]
		thatSends: #calculateTotalCost
		to: receiver2 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker18694194_ markAsExecuted.
	^ #_coverageTracker18694194_
		cover: (19 to: 33)
		declaredAt: (19 to: 33)
		by: basicMonthlyFee.! !
!Behavior method!
fee
	#_coverageTracker18694196_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694196_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18694196_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18694196_
		coverAll:
			{21 to: 31}
		evaluating: [ receiver2 nationalFee ]
		thatSends: #nationalFee
		to: receiver2 ] value.! !
!Behavior method!
isCallOnAWeekDay: aCallToBill
	#_coverageTracker18694200_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694200_
		cover: (34 to: 44)
		declaredAt: (19 to: 29)
		by: aCallToBill.
	#_coverageTracker18694200_
		coverAll:
			{46 to: 49}
		evaluating: [ receiver1 date ]
		thatSends: #date
		to: receiver1 ] value.
	#_coverageTracker18694200_
		coverAll:
			{51 to: 59}
		evaluating: [ receiver2 isWeekDay ]
		thatSends: #isWeekDay
		to: receiver2 ] value.! !
!Behavior method!
fee
	#_coverageTracker18694205_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694205_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18694205_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18694205_
		coverAll:
			{21 to: 42}
		evaluating: [ receiver2 weekDayNonWorkHoursFee ]
		thatSends: #weekDayNonWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
line
	#_coverageTracker18694209_ markAsExecuted.
	^ #_coverageTracker18694209_
		cover: (8 to: 11)
		declaredAt: (8 to: 11)
		by: line.! !
!Behavior method!
internationalFee
	#_coverageTracker18694211_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694211_
		coverAll:
			{20 to: 21}
		byLiteralOrPseudoVariable: 25.
	#_coverageTracker18694211_
		coverAll:
			{23 to: 23}
		evaluating: [
			receiver1 *
				(#_coverageTracker18694211_
					coverAll:
						{25 to: 30}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18694211_
		coverAll:
			{32 to: 32}
		evaluating: [
			receiver2 /
				(#_coverageTracker18694211_
					coverAll:
						{34 to: 39}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
weekDayNonWorkHoursFee
	#_coverageTracker18694215_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694215_
		coverAll:
			{26 to: 28}
		byLiteralOrPseudoVariable: 0.1.
	#_coverageTracker18694215_
		coverAll:
			{30 to: 30}
		evaluating: [
			receiver1 *
				(#_coverageTracker18694215_
					coverAll:
						{32 to: 37}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18694215_
		coverAll:
			{39 to: 39}
		evaluating: [
			receiver2 /
				(#_coverageTracker18694215_
					coverAll:
						{41 to: 46}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
workingHoursStart
	#_coverageTracker18694219_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18694219_
		coverAll:
			{23 to: 23}
		byLiteralOrPseudoVariable: 8.
	#_coverageTracker18694219_
		coverAll:
			{24 to: 24}
		evaluating: [
			receiver1 :
				(#_coverageTracker18694219_
					coverAll:
						{25 to: 26}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #:
		to: receiver1 ] value.! !
!Behavior method!
date
	#_coverageTracker18694223_ markAsExecuted.
	^ #_coverageTracker18694223_
		cover: (8 to: 11)
		declaredAt: (8 to: 11)
		by: date.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18694225_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 := [ | receiver1 |
	receiver1 := #_coverageTracker18694225_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18694225_
		coverAll:
			{38 to: 44}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker18694225_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver6 and: [
				[ | receiver5 |
				receiver5 := [ | receiver2 |
				receiver2 := #_coverageTracker18694225_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18694225_
					coverAll:
						{58 to: 74}
					evaluating: [
						receiver2 isCallOnAWeekDay:
							(#_coverageTracker18694225_
								cover: (76 to: 86)
								declaredAt: (12 to: 22)
								by: aCallToBill) ]
					thatSends: #isCallOnAWeekDay:
					to: receiver2 ] value.
				#_coverageTracker18694225_
					coverAll:
						{89 to: 92}
					evaluating: [
						receiver5 and: [
							[ | receiver4 |
							receiver4 := [ | receiver3 |
							receiver3 := #_coverageTracker18694225_
								coverAll:
									{96 to: 99}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker18694225_
								coverAll:
									{101 to: 125}
								evaluating: [
									receiver3 isCallDuringWorkingHours:
										(#_coverageTracker18694225_
											cover: (127 to: 137)
											declaredAt: (12 to: 22)
											by: aCallToBill) ]
								thatSends: #isCallDuringWorkingHours:
								to: receiver3 ] value.
							#_coverageTracker18694225_
								coverAll:
									{140 to: 142}
								evaluating: [ receiver4 not ]
								thatSends: #not
								to: receiver4 ] value ]]
					thatSends: #and:
					to: receiver5 ] value ]]
		thatSends: #and:
		to: receiver6 ] value.! !
!Behavior method!
weekendFee
	#_coverageTracker18694233_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694233_
		coverAll:
			{14 to: 17}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18694233_
		coverAll:
			{19 to: 23}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18694233_
		coverAll:
			{25 to: 34}
		evaluating: [ receiver2 weekendFee ]
		thatSends: #weekendFee
		to: receiver2 ] value.! !
!Behavior method!
duration
	#_coverageTracker18694238_ markAsExecuted.
	^ #_coverageTracker18694238_
		cover: (12 to: 19)
		declaredAt: (12 to: 19)
		by: duration.! !
!Behavior method!
addToBill
	#_coverageTracker18694240_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18694240_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by: bill.
	#_coverageTracker18694240_
		coverAll:
			{19 to: 37}
		evaluating: [
			receiver2 addAsInternational:
				[ | receiver1 |
				receiver1 := #_coverageTracker18694240_
					coverAll:
						{39 to: 42}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18694240_
					coverAll:
						{44 to: 47}
					evaluating: [ receiver1 cost ]
					thatSends: #cost
					to: receiver1 ] value ]
		thatSends: #addAsInternational:
		to: receiver2 ] value.! !
!Behavior method!
addAsNational: aNationalCallCostToAdd
	#_coverageTracker18694244_ markAsExecuted.
	#_coverageTracker18694244_
		cover: (58 to: 70)
		declaredAt: (41 to: 53)
		by:
			(nationalUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18694244_
				cover: (41 to: 53)
				declaredAt: (41 to: 53)
				by: nationalUsage.
			#_coverageTracker18694244_
				coverAll:
					{72 to: 72}
				evaluating: [
					receiver1 +
						(#_coverageTracker18694244_
							cover: (74 to: 95)
							declaredAt: (16 to: 37)
							by: aNationalCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
fromRegion: aCallingRegion in: aCallingCountry number: aLineNumber
	#_coverageTracker18694248_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694248_
		coverAll:
			{73 to: 76}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18694248_
		coverAll:
			{78 to: 80}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker18694248_
		coverAll:
			{82 to: 102. 119 to: 121. 139 to: 145}
		evaluating: [
			receiver2
				initializeFromRegion:
					(#_coverageTracker18694248_
						cover: (104 to: 117)
						declaredAt: (13 to: 26)
						by: aCallingRegion)
				in:
					(#_coverageTracker18694248_
						cover: (123 to: 137)
						declaredAt: (32 to: 46)
						by: aCallingCountry)
				number:
					(#_coverageTracker18694248_
						cover: (147 to: 157)
						declaredAt: (56 to: 66)
						by: aLineNumber) ]
		thatSends: #initializeFromRegion:in:number:
		to: receiver2 ] value.! !
!Behavior method!
outgoingCalls
	"Podria argumentarse que rompe encapsulamiento, pero lo hago en pos de no agregarle logica de calculo de costos a la linea ya no que no tiene que ver con la esencia de este objeto."
	#_coverageTracker18694252_ markAsExecuted.
	^ #_coverageTracker18694252_
		cover: (200 to: 212)
		declaredAt: (200 to: 212)
		by: outgoingCalls.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18694254_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 := [ | receiver1 |
	receiver1 := #_coverageTracker18694254_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18694254_
		coverAll:
			{38 to: 44}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker18694254_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver4 and: [
				[ | receiver3 |
				receiver3 := [ | receiver2 |
				receiver2 := #_coverageTracker18694254_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18694254_
					coverAll:
						{58 to: 74}
					evaluating: [
						receiver2 isCallOnAWeekDay:
							(#_coverageTracker18694254_
								cover: (76 to: 86)
								declaredAt: (12 to: 22)
								by: aCallToBill) ]
					thatSends: #isCallOnAWeekDay:
					to: receiver2 ] value.
				#_coverageTracker18694254_
					coverAll:
						{89 to: 91}
					evaluating: [ receiver3 not ]
					thatSends: #not
					to: receiver3 ] value ]]
		thatSends: #and:
		to: receiver4 ] value.! !
!Behavior method!
isNational
	#_coverageTracker18694260_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 := [ | receiver1 |
	receiver1 := #_coverageTracker18694260_
		cover: (17 to: 22)
		declaredAt: (17 to: 22)
		by: callee.
	#_coverageTracker18694260_
		coverAll:
			{24 to: 43}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker18694260_
					cover: (45 to: 50)
					declaredAt: (45 to: 50)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker18694260_
		coverAll:
			{53 to: 56}
		evaluating: [
			receiver4 and: [
				[ | receiver3 |
				receiver3 := [ | receiver2 |
				receiver2 := #_coverageTracker18694260_
					cover: (60 to: 65)
					declaredAt: (17 to: 22)
					by: callee.
				#_coverageTracker18694260_
					coverAll:
						{67 to: 85}
					evaluating: [
						receiver2 isFromSameRegionAs:
							(#_coverageTracker18694260_
								cover: (87 to: 92)
								declaredAt: (45 to: 50)
								by: caller) ]
					thatSends: #isFromSameRegionAs:
					to: receiver2 ] value.
				#_coverageTracker18694260_
					coverAll:
						{95 to: 97}
					evaluating: [ receiver3 not ]
					thatSends: #not
					to: receiver3 ] value ]]
		thatSends: #and:
		to: receiver4 ] value.! !
!Behavior method!
weekDayWorkHoursFee
	#_coverageTracker18694266_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694266_
		coverAll:
			{23 to: 25}
		byLiteralOrPseudoVariable: 0.2.
	#_coverageTracker18694266_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver1 *
				(#_coverageTracker18694266_
					coverAll:
						{29 to: 34}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18694266_
		coverAll:
			{36 to: 36}
		evaluating: [
			receiver2 /
				(#_coverageTracker18694266_
					coverAll:
						{38 to: 43}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
timeOfDay
	#_coverageTracker18694271_ markAsExecuted.
	^ #_coverageTracker18694271_
		cover: (13 to: 21)
		declaredAt: (13 to: 21)
		by: timeOfDay.! !
!Behavior method!
internationalFee
	#_coverageTracker18694273_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694273_
		coverAll:
			{20 to: 23}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18694273_
		coverAll:
			{25 to: 29}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18694273_
		coverAll:
			{31 to: 46}
		evaluating: [ receiver2 internationalFee ]
		thatSends: #internationalFee
		to: receiver2 ] value.! !
!Behavior method!
isFromSameCountryAs: aTelephoneLine
	#_coverageTracker18694275_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18694275_
		cover: (40 to: 46)
		declaredAt: (40 to: 46)
		by: country.
	#_coverageTracker18694275_
		coverAll:
			{48 to: 48}
		evaluating: [
			receiver2 =
				[ | receiver1 |
				receiver1 := #_coverageTracker18694275_
					cover: (50 to: 63)
					declaredAt: (22 to: 35)
					by: aTelephoneLine.
				#_coverageTracker18694275_
					coverAll:
						{65 to: 71}
					evaluating: [ receiver1 country ]
					thatSends: #country
					to: receiver1 ] value ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
totalDue
	#_coverageTracker18694281_ markAsExecuted.
	^ #_coverageTracker18694281_
		cover: (12 to: 16)
		declaredAt: (12 to: 16)
		by: total.! !
!Behavior method!
fee
	#_coverageTracker18694283_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694283_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18694283_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18694283_
		coverAll:
			{21 to: 36}
		evaluating: [ receiver2 internationalFee ]
		thatSends: #internationalFee
		to: receiver2 ] value.! !
!Behavior method!
number
	#_coverageTracker18694287_ markAsExecuted.
	^ #_coverageTracker18694287_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: number.! !
!Behavior method!
isFromSameRegionAs: aTelephoneLine
	#_coverageTracker18694289_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18694289_
		cover: (39 to: 44)
		declaredAt: (39 to: 44)
		by: region.
	#_coverageTracker18694289_
		coverAll:
			{46 to: 46}
		evaluating: [
			receiver2 =
				[ | receiver1 |
				receiver1 := #_coverageTracker18694289_
					cover: (48 to: 61)
					declaredAt: (21 to: 34)
					by: aTelephoneLine.
				#_coverageTracker18694289_
					coverAll:
						{63 to: 68}
					evaluating: [ receiver1 region ]
					thatSends: #region
					to: receiver1 ] value ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
initializeFor: aCallToBill in: aRequestingBill
	#_coverageTracker18694293_ markAsExecuted.
	#_coverageTracker18694293_
		cover: (50 to: 53)
		declaredAt: (50 to: 53)
		by:
			(call := #_coverageTracker18694293_
				cover: (58 to: 68)
				declaredAt: (16 to: 26)
				by: aCallToBill).
	#_coverageTracker18694293_
		cover: (72 to: 75)
		declaredAt: (72 to: 75)
		by:
			(bill := #_coverageTracker18694293_
				cover: (80 to: 94)
				declaredAt: (32 to: 46)
				by: aRequestingBill).! !
!Behavior method!
weekDayNonWorkHoursFee
	#_coverageTracker18694299_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694299_
		coverAll:
			{26 to: 29}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18694299_
		coverAll:
			{31 to: 35}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18694299_
		coverAll:
			{37 to: 58}
		evaluating: [ receiver2 weekDayNonWorkHoursFee ]
		thatSends: #weekDayNonWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
for: aLineToBill duringMonth: aMonthOfBilling
	#_coverageTracker18694304_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694304_
		coverAll:
			{50 to: 53}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18694304_
		coverAll:
			{55 to: 57}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker18694304_
		coverAll:
			{59 to: 72. 86 to: 97}
		evaluating: [
			receiver2
				initializeFor:
					(#_coverageTracker18694304_
						cover: (74 to: 84)
						declaredAt: (6 to: 16)
						by: aLineToBill)
				duringMonth:
					(#_coverageTracker18694304_
						cover: (99 to: 113)
						declaredAt: (31 to: 45)
						by: aMonthOfBilling) ]
		thatSends: #initializeFor:duringMonth:
		to: receiver2 ] value.! !
!Behavior method!
isInternational
	#_coverageTracker18694308_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694308_
		cover: (22 to: 27)
		declaredAt: (22 to: 27)
		by: callee.
	#_coverageTracker18694308_
		coverAll:
			{29 to: 48}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker18694308_
					cover: (50 to: 55)
					declaredAt: (50 to: 55)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker18694308_
		coverAll:
			{58 to: 60}
		evaluating: [ receiver2 not ]
		thatSends: #not
		to: receiver2 ] value.! !
!Behavior method!
cost
	#_coverageTracker18694312_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18694312_
		cover: (10 to: 13)
		declaredAt: (10 to: 13)
		by: call.
	#_coverageTracker18694312_
		coverAll:
			{15 to: 22}
		evaluating: [ receiver1 duration ]
		thatSends: #duration
		to: receiver1 ] value.
	#_coverageTracker18694312_
		coverAll:
			{24 to: 24}
		evaluating: [
			receiver3 *
				[ | receiver2 |
				receiver2 := #_coverageTracker18694312_
					coverAll:
						{26 to: 29}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18694312_
					coverAll:
						{31 to: 33}
					evaluating: [ receiver2 fee ]
					thatSends: #fee
					to: receiver2 ] value ]
		thatSends: #*
		to: receiver3 ] value.! !
!Behavior method!
fee
	#_coverageTracker18694316_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18694316_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18694316_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18694316_
		coverAll:
			{21 to: 30}
		evaluating: [ receiver2 weekendFee ]
		thatSends: #weekendFee
		to: receiver2 ] value.! !
!Behavior method!
isLocal
	#_coverageTracker18694320_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18694320_
		cover: (14 to: 19)
		declaredAt: (14 to: 19)
		by: callee.
	#_coverageTracker18694320_
		coverAll:
			{21 to: 40}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker18694320_
					cover: (42 to: 47)
					declaredAt: (42 to: 47)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker18694320_
		coverAll:
			{50 to: 53}
		evaluating: [
			receiver3 and: [
				[ | receiver2 |
				receiver2 := #_coverageTracker18694320_
					cover: (57 to: 62)
					declaredAt: (14 to: 19)
					by: callee.
				#_coverageTracker18694320_
					coverAll:
						{64 to: 82}
					evaluating: [
						receiver2 isFromSameRegionAs:
							(#_coverageTracker18694320_
								cover: (84 to: 89)
								declaredAt: (42 to: 47)
								by: caller) ]
					thatSends: #isFromSameRegionAs:
					to: receiver2 ] value ]]
		thatSends: #and:
		to: receiver3 ] value.! !

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:10:46'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:46'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:46'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:46'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:46'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:10:46'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:10:46'!
PASSED!

!methodRemoval: TelephoneLineBill #add: stamp: 'AS 3/30/2025 23:11:10'!
add: aCallCostToAdd 
	total := total + aCallCostToAdd !

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:11:14'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:11:14'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:11:14'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:11:14'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:11:14'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:11:14'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:11:14'!
PASSED!
!Behavior method!
nationalFee
	#_coverageTracker18724572_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724572_
		coverAll:
			{15 to: 18}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18724572_
		coverAll:
			{20 to: 24}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18724572_
		coverAll:
			{26 to: 36}
		evaluating: [ receiver2 nationalFee ]
		thatSends: #nationalFee
		to: receiver2 ] value.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18724580_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18724580_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18724580_
		coverAll:
			{38 to: 52}
		evaluating: [ receiver1 isInternational ]
		thatSends: #isInternational
		to: receiver1 ] value.! !
!Behavior method!
initializeFromRegion: aCallingRegion in: aCallingCountry number: aLineNumber
	#_coverageTracker18724586_ markAsExecuted.
	#_coverageTracker18724586_
		cover: (82 to: 87)
		declaredAt: (82 to: 87)
		by:
			(region := #_coverageTracker18724586_
				cover: (92 to: 105)
				declaredAt: (23 to: 36)
				by: aCallingRegion).
	#_coverageTracker18724586_
		cover: (109 to: 115)
		declaredAt: (109 to: 115)
		by:
			(country := #_coverageTracker18724586_
				cover: (120 to: 134)
				declaredAt: (42 to: 56)
				by: aCallingCountry).
	#_coverageTracker18724586_
		cover: (138 to: 143)
		declaredAt: (138 to: 143)
		by:
			(number := #_coverageTracker18724586_
				cover: (148 to: 158)
				declaredAt: (66 to: 76)
				by: aLineNumber).! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18724593_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 := [ | receiver1 |
	receiver1 := #_coverageTracker18724593_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18724593_
		coverAll:
			{38 to: 44}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker18724593_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver5 and: [
				[ | receiver4 |
				receiver4 := [ | receiver2 |
				receiver2 := #_coverageTracker18724593_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18724593_
					coverAll:
						{58 to: 74}
					evaluating: [
						receiver2 isCallOnAWeekDay:
							(#_coverageTracker18724593_
								cover: (76 to: 86)
								declaredAt: (12 to: 22)
								by: aCallToBill) ]
					thatSends: #isCallOnAWeekDay:
					to: receiver2 ] value.
				#_coverageTracker18724593_
					coverAll:
						{89 to: 92}
					evaluating: [
						receiver4 and: [
							[ | receiver3 |
							receiver3 := #_coverageTracker18724593_
								coverAll:
									{95 to: 98}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker18724593_
								coverAll:
									{100 to: 124}
								evaluating: [
									receiver3 isCallDuringWorkingHours:
										(#_coverageTracker18724593_
											cover: (126 to: 136)
											declaredAt: (12 to: 22)
											by: aCallToBill) ]
								thatSends: #isCallDuringWorkingHours:
								to: receiver3 ] value ]]
					thatSends: #and:
					to: receiver4 ] value ]]
		thatSends: #and:
		to: receiver5 ] value.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18724605_ markAsExecuted.
	^ #_coverageTracker18724605_
		coverAll:
			{26 to: 30}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
region
	#_coverageTracker18724607_ markAsExecuted.
	^ #_coverageTracker18724607_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: region.! !
!Behavior method!
localUsage
	#_coverageTracker18724612_ markAsExecuted.
	^ #_coverageTracker18724612_
		cover: (14 to: 23)
		declaredAt: (14 to: 23)
		by: localUsage.! !
!Behavior method!
nationalUsage
	#_coverageTracker18724614_ markAsExecuted.
	^ #_coverageTracker18724614_
		cover: (17 to: 29)
		declaredAt: (17 to: 29)
		by: nationalUsage.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18724616_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18724616_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18724616_
		coverAll:
			{38 to: 47}
		evaluating: [ receiver1 isNational ]
		thatSends: #isNational
		to: receiver1 ] value.! !
!Behavior method!
initializeFrom: aCallingLine to: aLineThatIsCalled on: aDate at: aTimeOfDay for: aCallDuration
	#_coverageTracker18724618_ markAsExecuted.
	#_coverageTracker18724618_
		cover: (98 to: 103)
		declaredAt: (98 to: 103)
		by:
			(caller := #_coverageTracker18724618_
				cover: (108 to: 119)
				declaredAt: (17 to: 28)
				by: aCallingLine).
	#_coverageTracker18724618_
		cover: (123 to: 128)
		declaredAt: (123 to: 128)
		by:
			(callee := #_coverageTracker18724618_
				cover: (133 to: 149)
				declaredAt: (34 to: 50)
				by: aLineThatIsCalled).
	#_coverageTracker18724618_
		cover: (153 to: 156)
		declaredAt: (153 to: 156)
		by:
			(date := #_coverageTracker18724618_
				cover: (161 to: 165)
				declaredAt: (56 to: 60)
				by: aDate).
	#_coverageTracker18724618_
		cover: (169 to: 177)
		declaredAt: (169 to: 177)
		by:
			(timeOfDay := #_coverageTracker18724618_
				cover: (182 to: 191)
				declaredAt: (66 to: 75)
				by: aTimeOfDay).
	#_coverageTracker18724618_
		cover: (195 to: 202)
		declaredAt: (195 to: 202)
		by:
			(duration := #_coverageTracker18724618_
				cover: (207 to: 219)
				declaredAt: (82 to: 94)
				by: aCallDuration).! !
!Behavior method!
caller
	#_coverageTracker18724626_ markAsExecuted.
	^ #_coverageTracker18724626_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: caller.! !
!Behavior method!
addToBill
	#_coverageTracker18724628_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18724628_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by: bill.
	#_coverageTracker18724628_
		coverAll:
			{19 to: 29}
		evaluating: [
			receiver2 addAsLocal:
				[ | receiver1 |
				receiver1 := #_coverageTracker18724628_
					coverAll:
						{31 to: 34}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18724628_
					coverAll:
						{36 to: 39}
					evaluating: [ receiver1 cost ]
					thatSends: #cost
					to: receiver1 ] value ]
		thatSends: #addAsLocal:
		to: receiver2 ] value.! !
!Behavior method!
addAsInternational: anInternationalCallCostToAdd
	#_coverageTracker18724632_ markAsExecuted.
	#_coverageTracker18724632_
		cover: (74 to: 91)
		declaredAt: (52 to: 69)
		by:
			(internationalUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18724632_
				cover: (52 to: 69)
				declaredAt: (52 to: 69)
				by: internationalUsage.
			#_coverageTracker18724632_
				coverAll:
					{93 to: 93}
				evaluating: [
					receiver1 +
						(#_coverageTracker18724632_
							cover: (95 to: 122)
							declaredAt: (21 to: 48)
							by: anInternationalCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
addAsLocal: aLocalCallCostToAdd
	#_coverageTracker18724636_ markAsExecuted.
	#_coverageTracker18724636_
		cover: (49 to: 58)
		declaredAt: (35 to: 44)
		by:
			(localUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18724636_
				cover: (35 to: 44)
				declaredAt: (35 to: 44)
				by: localUsage.
			#_coverageTracker18724636_
				coverAll:
					{60 to: 60}
				evaluating: [
					receiver1 +
						(#_coverageTracker18724636_
							cover: (62 to: 80)
							declaredAt: (13 to: 31)
							by: aLocalCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
calculateTotalCost
	"Se podria argumentar que si agrego un tipo de llamada debo modificar este metodo, y que por lo tanto seria mejor sumar los costos
	de manera indistinta, pero creo que el hecho de que haya distintos tipos de llamada es esencial a la factura (por el enunciado), ya
	que entiendo que pide que se discriminen los costos, lo cual no se podria hacer si no se diferenciaran los tipos de estos.
	Por lo tanto tiene sentido tener que ademas modificar la factura si se agrega un nuevo tipo."
	#_coverageTracker18724643_ markAsExecuted.
	#_coverageTracker18724643_
		cover: (509 to: 518)
		declaredAt: (509 to: 518)
		by:
			(localUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18724643_
				coverAll:
					{523 to: 523}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker18724643_
				coverAll:
					{524 to: 524}
				evaluating: [
					receiver1 *
						(#_coverageTracker18724643_
							coverAll:
								{525 to: 530}
							by: dollar) ]
				thatSends: #*
				to: receiver1 ] value).
	#_coverageTracker18724643_
		cover: (534 to: 546)
		declaredAt: (534 to: 546)
		by:
			(nationalUsage := [ | receiver2 |
			receiver2 := #_coverageTracker18724643_
				coverAll:
					{551 to: 551}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker18724643_
				coverAll:
					{552 to: 552}
				evaluating: [
					receiver2 *
						(#_coverageTracker18724643_
							coverAll:
								{553 to: 558}
							by: dollar) ]
				thatSends: #*
				to: receiver2 ] value).
	#_coverageTracker18724643_
		cover: (562 to: 579)
		declaredAt: (562 to: 579)
		by:
			(internationalUsage := [ | receiver3 |
			receiver3 := #_coverageTracker18724643_
				coverAll:
					{584 to: 584}
				byLiteralOrPseudoVariable: 0.
			#_coverageTracker18724643_
				coverAll:
					{585 to: 585}
				evaluating: [
					receiver3 *
						(#_coverageTracker18724643_
							coverAll:
								{586 to: 591}
							by: dollar) ]
				thatSends: #*
				to: receiver3 ] value).
	[ | receiver7 |
	receiver7 := [ | receiver4 |
	receiver4 := #_coverageTracker18724643_
		cover: (595 to: 598)
		declaredAt: (595 to: 598)
		by: line.
	#_coverageTracker18724643_
		coverAll:
			{600 to: 612}
		evaluating: [ receiver4 outgoingCalls ]
		thatSends: #outgoingCalls
		to: receiver4 ] value.
	#_coverageTracker18724643_
		coverAll:
			{614 to: 616}
		evaluating: [
			receiver7 do: [ :aCall |
				[ | receiver6 |
				receiver6 := [ | receiver5 |
				receiver5 := #_coverageTracker18724643_
					coverAll:
						{630 to: 639}
					by: CallBiller.
				#_coverageTracker18724643_
					coverAll:
						{641 to: 644. 652 to: 654}
					evaluating: [
						receiver5
							for:
								(#_coverageTracker18724643_
									cover: (646 to: 650)
									declaredAt: (621 to: 625)
									by: aCall)
							in:
								(#_coverageTracker18724643_
									coverAll:
										{656 to: 659}
									byLiteralOrPseudoVariable: self) ]
					thatSends: #for:in:
					to: receiver5 ] value.
				#_coverageTracker18724643_
					coverAll:
						{662 to: 670}
					evaluating: [ receiver6 addToBill ]
					thatSends: #addToBill
					to: receiver6 ] value ]]
		thatSends: #do:
		to: receiver7 ] value.
	#_coverageTracker18724643_
		cover: (677 to: 681)
		declaredAt: (677 to: 681)
		by:
			(total := [ | receiver11 |
			receiver11 := [ | receiver10 |
			receiver10 := [ | receiver9 |
			receiver9 := [ | receiver8 |
			receiver8 := #_coverageTracker18724643_
				cover: (686 to: 689)
				declaredAt: (595 to: 598)
				by: line.
			#_coverageTracker18724643_
				coverAll:
					{691 to: 705}
				evaluating: [ receiver8 basicMonthlyFee ]
				thatSends: #basicMonthlyFee
				to: receiver8 ] value.
			#_coverageTracker18724643_
				coverAll:
					{707 to: 707}
				evaluating: [
					receiver9 +
						(#_coverageTracker18724643_
							cover: (709 to: 718)
							declaredAt: (509 to: 518)
							by: localUsage) ]
				thatSends: #+
				to: receiver9 ] value.
			#_coverageTracker18724643_
				coverAll:
					{720 to: 720}
				evaluating: [
					receiver10 +
						(#_coverageTracker18724643_
							cover: (722 to: 734)
							declaredAt: (534 to: 546)
							by: nationalUsage) ]
				thatSends: #+
				to: receiver10 ] value.
			#_coverageTracker18724643_
				coverAll:
					{736 to: 736}
				evaluating: [
					receiver11 +
						(#_coverageTracker18724643_
							cover: (738 to: 755)
							declaredAt: (562 to: 579)
							by: internationalUsage) ]
				thatSends: #+
				to: receiver11 ] value).! !
!Behavior method!
weekendFee
	#_coverageTracker18724665_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724665_
		coverAll:
			{14 to: 16}
		byLiteralOrPseudoVariable: 0.1.
	#_coverageTracker18724665_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver1 *
				(#_coverageTracker18724665_
					coverAll:
						{20 to: 25}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18724665_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver2 /
				(#_coverageTracker18724665_
					coverAll:
						{29 to: 34}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
show
	#_coverageTracker18724671_ markAsExecuted.
	^ [ | receiver15 |
	receiver15 := #_coverageTracker18724671_
		coverAll:
			{9 to: 25}
		by: OrderedCollection.
	#_coverageTracker18724671_
		coverAll:
			{27 to: 31. 137 to: 141. 203 to: 207. 262 to: 266. 366 to: 370}
		evaluating: [
			receiver15
				with:
					[ | receiver5 |
					receiver5 := [ | receiver3 |
					receiver3 := [ | receiver2 |
					receiver2 := #_coverageTracker18724671_
						coverAll:
							{33 to: 55}
						byLiteralOrPseudoVariable: 'Bill for line number '.
					#_coverageTracker18724671_
						coverAll:
							{56 to: 56}
						evaluating: [
							receiver2 ,
								[ | receiver1 |
								receiver1 := #_coverageTracker18724671_
									cover: (58 to: 61)
									declaredAt: (58 to: 61)
									by: line.
								#_coverageTracker18724671_
									coverAll:
										{63 to: 68}
									evaluating: [ receiver1 number ]
									thatSends: #number
									to: receiver1 ] value ]
						thatSends: #,
						to: receiver2 ] value.
					#_coverageTracker18724671_
						coverAll:
							{70 to: 70}
						evaluating: [
							receiver3 ,
								(#_coverageTracker18724671_
									coverAll:
										{72 to: 88}
									byLiteralOrPseudoVariable: ' during period ') ]
						thatSends: #,
						to: receiver3 ] value.
					#_coverageTracker18724671_
						coverAll:
							{89 to: 89}
						evaluating: [
							receiver5 ,
								[ | receiver4 |
								receiver4 := #_coverageTracker18724671_
									cover: (91 to: 104)
									declaredAt: (91 to: 104)
									by: monthOfBilling.
								#_coverageTracker18724671_
									coverAll:
										{106 to: 113}
									evaluating: [ receiver4 asString ]
									thatSends: #asString
									to: receiver4 ] value ]
						thatSends: #,
						to: receiver5 ] value
				with:
					[ | receiver7 |
					receiver7 := #_coverageTracker18724671_
						coverAll:
							{143 to: 159}
						byLiteralOrPseudoVariable: '		Monthly fee: '.
					#_coverageTracker18724671_
						coverAll:
							{160 to: 160}
						evaluating: [
							receiver7 ,
								[ | receiver6 |
								receiver6 := #_coverageTracker18724671_
									cover: (162 to: 176)
									declaredAt: (162 to: 176)
									by: basicMonthlyFee.
								#_coverageTracker18724671_
									coverAll:
										{178 to: 185}
									evaluating: [ receiver6 asString ]
									thatSends: #asString
									to: receiver6 ] value ]
						thatSends: #,
						to: receiver7 ] value
				with:
					[ | receiver9 |
					receiver9 := #_coverageTracker18724671_
						coverAll:
							{209 to: 223}
						byLiteralOrPseudoVariable: 'Local usage: '.
					#_coverageTracker18724671_
						coverAll:
							{224 to: 224}
						evaluating: [
							receiver9 ,
								[ | receiver8 |
								receiver8 := #_coverageTracker18724671_
									cover: (226 to: 235)
									declaredAt: (226 to: 235)
									by: localUsage.
								#_coverageTracker18724671_
									coverAll:
										{237 to: 244}
									evaluating: [ receiver8 asString ]
									thatSends: #asString
									to: receiver8 ] value ]
						thatSends: #,
						to: receiver9 ] value
				with:
					[ | receiver12 |
					receiver12 := #_coverageTracker18724671_
						coverAll:
							{268 to: 303}
						byLiteralOrPseudoVariable: 'National and international usage: '.
					#_coverageTracker18724671_
						coverAll:
							{304 to: 304}
						evaluating: [
							receiver12 ,
								[ | receiver11 |
								receiver11 := [ | receiver10 |
								receiver10 := #_coverageTracker18724671_
									coverAll:
										{306 to: 309}
									byLiteralOrPseudoVariable: self.
								#_coverageTracker18724671_
									coverAll:
										{311 to: 339}
									evaluating: [ receiver10 nationalAndInternationalUsage ]
									thatSends: #nationalAndInternationalUsage
									to: receiver10 ] value.
								#_coverageTracker18724671_
									coverAll:
										{341 to: 348}
									evaluating: [ receiver11 asString ]
									thatSends: #asString
									to: receiver11 ] value ]
						thatSends: #,
						to: receiver12 ] value
				with:
					[ | receiver14 |
					receiver14 := #_coverageTracker18724671_
						coverAll:
							{372 to: 384}
						byLiteralOrPseudoVariable: 'Total due: '.
					#_coverageTracker18724671_
						coverAll:
							{386 to: 386}
						evaluating: [
							receiver14 ,
								[ | receiver13 |
								receiver13 := #_coverageTracker18724671_
									cover: (388 to: 392)
									declaredAt: (388 to: 392)
									by: total.
								#_coverageTracker18724671_
									coverAll:
										{394 to: 401}
									evaluating: [ receiver13 asString ]
									thatSends: #asString
									to: receiver13 ] value ]
						thatSends: #,
						to: receiver14 ] value ]
		thatSends: #with:with:with:with:with:
		to: receiver15 ] value.! !
!Behavior method!
calls: aLineThatWasCalled on: aDate at: aTimeOfDay for: aCallDuration
	#_coverageTracker18724694_ markAsExecuted.
	[ | receiver2 |
	receiver2 := #_coverageTracker18724694_
		cover: (72 to: 84)
		declaredAt: (72 to: 84)
		by: outgoingCalls.
	#_coverageTracker18724694_
		coverAll:
			{86 to: 89}
		evaluating: [
			receiver2 add:
				[ | receiver1 |
				receiver1 := #_coverageTracker18724694_
					coverAll:
						{92 to: 95}
					by: Call.
				#_coverageTracker18724694_
					coverAll:
						{97 to: 101. 108 to: 110. 131 to: 133. 141 to: 143. 156 to: 159}
					evaluating: [
						receiver1
							from:
								(#_coverageTracker18724694_
									coverAll:
										{103 to: 106}
									byLiteralOrPseudoVariable: self)
							to:
								(#_coverageTracker18724694_
									cover: (112 to: 129)
									declaredAt: (8 to: 25)
									by: aLineThatWasCalled)
							on:
								(#_coverageTracker18724694_
									cover: (135 to: 139)
									declaredAt: (31 to: 35)
									by: aDate)
							at:
								(#_coverageTracker18724694_
									cover: (145 to: 154)
									declaredAt: (41 to: 50)
									by: aTimeOfDay)
							for:
								(#_coverageTracker18724694_
									cover: (161 to: 173)
									declaredAt: (57 to: 69)
									by: aCallDuration) ]
					thatSends: #from:to:on:at:for:
					to: receiver1 ] value ]
		thatSends: #add:
		to: receiver2 ] value.! !
!Behavior method!
country
	#_coverageTracker18724700_ markAsExecuted.
	^ #_coverageTracker18724700_
		cover: (11 to: 17)
		declaredAt: (11 to: 17)
		by: country.! !
!Behavior method!
from: aCallingLine to: aLineThatIsCalled on: aDate at: aTimeOfDay for: aCallDuration
	#_coverageTracker18724702_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724702_
		coverAll:
			{88 to: 91}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18724702_
		coverAll:
			{93 to: 95}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker18724702_
		coverAll:
			{97 to: 111. 126 to: 128. 148 to: 150. 158 to: 160. 173 to: 176}
		evaluating: [
			receiver2
				initializeFrom:
					(#_coverageTracker18724702_
						cover: (113 to: 124)
						declaredAt: (7 to: 18)
						by: aCallingLine)
				to:
					(#_coverageTracker18724702_
						cover: (130 to: 146)
						declaredAt: (24 to: 40)
						by: aLineThatIsCalled)
				on:
					(#_coverageTracker18724702_
						cover: (152 to: 156)
						declaredAt: (46 to: 50)
						by: aDate)
				at:
					(#_coverageTracker18724702_
						cover: (162 to: 171)
						declaredAt: (56 to: 65)
						by: aTimeOfDay)
				for:
					(#_coverageTracker18724702_
						cover: (178 to: 190)
						declaredAt: (72 to: 84)
						by: aCallDuration) ]
		thatSends: #initializeFrom:to:on:at:for:
		to: receiver2 ] value.! !
!Behavior method!
nationalAndInternationalUsage
	#_coverageTracker18724711_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18724711_
		cover: (33 to: 45)
		declaredAt: (33 to: 45)
		by: nationalUsage.
	#_coverageTracker18724711_
		coverAll:
			{47 to: 47}
		evaluating: [
			receiver1 +
				(#_coverageTracker18724711_
					cover: (49 to: 66)
					declaredAt: (49 to: 66)
					by: internationalUsage) ]
		thatSends: #+
		to: receiver1 ] value.! !
!Behavior method!
fee
	#_coverageTracker18724713_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724713_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18724713_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18724713_
		coverAll:
			{21 to: 39}
		evaluating: [ receiver2 weekDayWorkHoursFee ]
		thatSends: #weekDayWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
nationalFee
	#_coverageTracker18724717_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724717_
		coverAll:
			{15 to: 16}
		byLiteralOrPseudoVariable: 14.
	#_coverageTracker18724717_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver1 *
				(#_coverageTracker18724717_
					coverAll:
						{20 to: 25}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18724717_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver2 /
				(#_coverageTracker18724717_
					coverAll:
						{29 to: 34}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker18724721_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18724721_
		coverAll:
			{19 to: 20}
		byLiteralOrPseudoVariable: 10.
	#_coverageTracker18724721_
		coverAll:
			{22 to: 22}
		evaluating: [
			receiver1 *
				(#_coverageTracker18724721_
					coverAll:
						{24 to: 29}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.! !
!Behavior method!
for: aCallToBill in: aRequestingBill
	#_coverageTracker18724725_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 := [ | receiver4 |
	receiver4 := [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18724725_
		coverAll:
			{42 to: 45}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18724725_
		coverAll:
			{47 to: 59}
		evaluating: [ receiver1 allSubclasses ]
		thatSends: #allSubclasses
		to: receiver1 ] value.
	#_coverageTracker18724725_
		coverAll:
			{61 to: 67}
		evaluating: [
			receiver3 detect: [ :aSubclass |
				[ | receiver2 |
				receiver2 := #_coverageTracker18724725_
					cover: (83 to: 91)
					declaredAt: (71 to: 79)
					by: aSubclass.
				#_coverageTracker18724725_
					coverAll:
						{93 to: 102}
					evaluating: [
						receiver2 canHandle:
							(#_coverageTracker18724725_
								cover: (104 to: 114)
								declaredAt: (6 to: 16)
								by: aCallToBill) ]
					thatSends: #canHandle:
					to: receiver2 ] value ]]
		thatSends: #detect:
		to: receiver3 ] value.
	#_coverageTracker18724725_
		coverAll:
			{118 to: 120}
		evaluating: [ receiver4 new ]
		thatSends: #new
		to: receiver4 ] value.
	#_coverageTracker18724725_
		coverAll:
			{122 to: 135. 149 to: 151}
		evaluating: [
			receiver5
				initializeFor:
					(#_coverageTracker18724725_
						cover: (137 to: 147)
						declaredAt: (6 to: 16)
						by: aCallToBill)
				in:
					(#_coverageTracker18724725_
						cover: (153 to: 167)
						declaredAt: (22 to: 36)
						by: aRequestingBill) ]
		thatSends: #initializeFor:in:
		to: receiver5 ] value.! !
!Behavior method!
workingHoursEnd
	#_coverageTracker18724733_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18724733_
		coverAll:
			{21 to: 22}
		byLiteralOrPseudoVariable: 20.
	#_coverageTracker18724733_
		coverAll:
			{23 to: 23}
		evaluating: [
			receiver1 :
				(#_coverageTracker18724733_
					coverAll:
						{24 to: 25}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #:
		to: receiver1 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker18724737_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724737_
		coverAll:
			{19 to: 22}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18724737_
		coverAll:
			{24 to: 28}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18724737_
		coverAll:
			{30 to: 44}
		evaluating: [ receiver2 basicMonthlyFee ]
		thatSends: #basicMonthlyFee
		to: receiver2 ] value.! !
!Behavior method!
month
	#_coverageTracker18724739_ markAsExecuted.
	^ #_coverageTracker18724739_
		cover: (9 to: 22)
		declaredAt: (9 to: 22)
		by: monthOfBilling.! !
!Behavior method!
weekDayWorkHoursFee
	#_coverageTracker18724742_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724742_
		coverAll:
			{23 to: 26}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18724742_
		coverAll:
			{28 to: 32}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18724742_
		coverAll:
			{34 to: 52}
		evaluating: [ receiver2 weekDayWorkHoursFee ]
		thatSends: #weekDayWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
addToBill
	#_coverageTracker18724746_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18724746_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by: bill.
	#_coverageTracker18724746_
		coverAll:
			{19 to: 32}
		evaluating: [
			receiver2 addAsNational:
				[ | receiver1 |
				receiver1 := #_coverageTracker18724746_
					coverAll:
						{34 to: 37}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18724746_
					coverAll:
						{39 to: 42}
					evaluating: [ receiver1 cost ]
					thatSends: #cost
					to: receiver1 ] value ]
		thatSends: #addAsNational:
		to: receiver2 ] value.! !
!Behavior method!
internationalUsage
	#_coverageTracker18724750_ markAsExecuted.
	^ #_coverageTracker18724750_
		cover: (22 to: 39)
		declaredAt: (22 to: 39)
		by: internationalUsage.! !
!Behavior method!
isCallDuringWorkingHours: aCallToBill
	#_coverageTracker18724752_ markAsExecuted.
	^ [ | receiver7 |
	receiver7 := [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18724752_
		coverAll:
			{44 to: 47}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18724752_
		coverAll:
			{49 to: 65}
		evaluating: [ receiver1 workingHoursStart ]
		thatSends: #workingHoursStart
		to: receiver1 ] value.
	#_coverageTracker18724752_
		coverAll:
			{67 to: 68}
		evaluating: [
			receiver3 <=
				[ | receiver2 |
				receiver2 := #_coverageTracker18724752_
					cover: (70 to: 80)
					declaredAt: (27 to: 37)
					by: aCallToBill.
				#_coverageTracker18724752_
					coverAll:
						{82 to: 90}
					evaluating: [ receiver2 timeOfDay ]
					thatSends: #timeOfDay
					to: receiver2 ] value ]
		thatSends: #<=
		to: receiver3 ] value.
	#_coverageTracker18724752_
		coverAll:
			{93 to: 96}
		evaluating: [
			receiver7 and: [
				[ | receiver6 |
				receiver6 := [ | receiver4 |
				receiver4 := #_coverageTracker18724752_
					cover: (99 to: 109)
					declaredAt: (27 to: 37)
					by: aCallToBill.
				#_coverageTracker18724752_
					coverAll:
						{111 to: 119}
					evaluating: [ receiver4 timeOfDay ]
					thatSends: #timeOfDay
					to: receiver4 ] value.
				#_coverageTracker18724752_
					coverAll:
						{121 to: 122}
					evaluating: [
						receiver6 <=
							[ | receiver5 |
							receiver5 := #_coverageTracker18724752_
								coverAll:
									{125 to: 128}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker18724752_
								coverAll:
									{130 to: 144}
								evaluating: [ receiver5 workingHoursEnd ]
								thatSends: #workingHoursEnd
								to: receiver5 ] value ]
					thatSends: #<=
					to: receiver6 ] value ]]
		thatSends: #and:
		to: receiver7 ] value.! !
!Behavior method!
initialize
	#_coverageTracker18724762_ markAsExecuted.
	#_coverageTracker18724762_
		cover: (13 to: 25)
		declaredAt: (13 to: 25)
		by:
			(outgoingCalls := [ | receiver1 |
			receiver1 := #_coverageTracker18724762_
				coverAll:
					{31 to: 47}
				by: OrderedCollection.
			#_coverageTracker18724762_
				coverAll:
					{49 to: 51}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18724764_ markAsExecuted.
	^ #_coverageTracker18724764_
		coverAll:
			{26 to: 30}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
initializeFor: aLineToBill duringMonth: aMonthOfBilling
	#_coverageTracker18724768_ markAsExecuted.
	#_coverageTracker18724768_
		cover: (59 to: 62)
		declaredAt: (59 to: 62)
		by:
			(line := #_coverageTracker18724768_
				cover: (67 to: 77)
				declaredAt: (16 to: 26)
				by: aLineToBill).
	#_coverageTracker18724768_
		cover: (81 to: 94)
		declaredAt: (81 to: 94)
		by:
			(monthOfBilling := #_coverageTracker18724768_
				cover: (99 to: 113)
				declaredAt: (41 to: 55)
				by: aMonthOfBilling).
	#_coverageTracker18724768_
		cover: (117 to: 131)
		declaredAt: (117 to: 131)
		by:
			(basicMonthlyFee := [ | receiver1 |
			receiver1 := #_coverageTracker18724768_
				cover: (136 to: 139)
				declaredAt: (59 to: 62)
				by: line.
			#_coverageTracker18724768_
				coverAll:
					{141 to: 155}
				evaluating: [ receiver1 basicMonthlyFee ]
				thatSends: #basicMonthlyFee
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 := #_coverageTracker18724768_
		coverAll:
			{261 to: 264}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18724768_
		coverAll:
			{266 to: 283}
		evaluating: [ receiver2 calculateTotalCost ]
		thatSends: #calculateTotalCost
		to: receiver2 ] value.! !
!Behavior method!
basicMonthlyFee
	#_coverageTracker18724775_ markAsExecuted.
	^ #_coverageTracker18724775_
		cover: (19 to: 33)
		declaredAt: (19 to: 33)
		by: basicMonthlyFee.! !
!Behavior method!
fee
	#_coverageTracker18724777_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724777_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18724777_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18724777_
		coverAll:
			{21 to: 31}
		evaluating: [ receiver2 nationalFee ]
		thatSends: #nationalFee
		to: receiver2 ] value.! !
!Behavior method!
isCallOnAWeekDay: aCallToBill
	#_coverageTracker18724781_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724781_
		cover: (34 to: 44)
		declaredAt: (19 to: 29)
		by: aCallToBill.
	#_coverageTracker18724781_
		coverAll:
			{46 to: 49}
		evaluating: [ receiver1 date ]
		thatSends: #date
		to: receiver1 ] value.
	#_coverageTracker18724781_
		coverAll:
			{51 to: 59}
		evaluating: [ receiver2 isWeekDay ]
		thatSends: #isWeekDay
		to: receiver2 ] value.! !
!Behavior method!
fee
	#_coverageTracker18724785_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724785_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18724785_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18724785_
		coverAll:
			{21 to: 42}
		evaluating: [ receiver2 weekDayNonWorkHoursFee ]
		thatSends: #weekDayNonWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
line
	#_coverageTracker18724789_ markAsExecuted.
	^ #_coverageTracker18724789_
		cover: (8 to: 11)
		declaredAt: (8 to: 11)
		by: line.! !
!Behavior method!
internationalFee
	#_coverageTracker18724791_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724791_
		coverAll:
			{20 to: 21}
		byLiteralOrPseudoVariable: 25.
	#_coverageTracker18724791_
		coverAll:
			{23 to: 23}
		evaluating: [
			receiver1 *
				(#_coverageTracker18724791_
					coverAll:
						{25 to: 30}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18724791_
		coverAll:
			{32 to: 32}
		evaluating: [
			receiver2 /
				(#_coverageTracker18724791_
					coverAll:
						{34 to: 39}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
weekDayNonWorkHoursFee
	#_coverageTracker18724795_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724795_
		coverAll:
			{26 to: 28}
		byLiteralOrPseudoVariable: 0.1.
	#_coverageTracker18724795_
		coverAll:
			{30 to: 30}
		evaluating: [
			receiver1 *
				(#_coverageTracker18724795_
					coverAll:
						{32 to: 37}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18724795_
		coverAll:
			{39 to: 39}
		evaluating: [
			receiver2 /
				(#_coverageTracker18724795_
					coverAll:
						{41 to: 46}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
workingHoursStart
	#_coverageTracker18724799_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 := #_coverageTracker18724799_
		coverAll:
			{23 to: 23}
		byLiteralOrPseudoVariable: 8.
	#_coverageTracker18724799_
		coverAll:
			{24 to: 24}
		evaluating: [
			receiver1 :
				(#_coverageTracker18724799_
					coverAll:
						{25 to: 26}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #:
		to: receiver1 ] value.! !
!Behavior method!
date
	#_coverageTracker18724801_ markAsExecuted.
	^ #_coverageTracker18724801_
		cover: (8 to: 11)
		declaredAt: (8 to: 11)
		by: date.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18724805_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 := [ | receiver1 |
	receiver1 := #_coverageTracker18724805_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18724805_
		coverAll:
			{38 to: 44}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker18724805_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver6 and: [
				[ | receiver5 |
				receiver5 := [ | receiver2 |
				receiver2 := #_coverageTracker18724805_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18724805_
					coverAll:
						{58 to: 74}
					evaluating: [
						receiver2 isCallOnAWeekDay:
							(#_coverageTracker18724805_
								cover: (76 to: 86)
								declaredAt: (12 to: 22)
								by: aCallToBill) ]
					thatSends: #isCallOnAWeekDay:
					to: receiver2 ] value.
				#_coverageTracker18724805_
					coverAll:
						{89 to: 92}
					evaluating: [
						receiver5 and: [
							[ | receiver4 |
							receiver4 := [ | receiver3 |
							receiver3 := #_coverageTracker18724805_
								coverAll:
									{96 to: 99}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker18724805_
								coverAll:
									{101 to: 125}
								evaluating: [
									receiver3 isCallDuringWorkingHours:
										(#_coverageTracker18724805_
											cover: (127 to: 137)
											declaredAt: (12 to: 22)
											by: aCallToBill) ]
								thatSends: #isCallDuringWorkingHours:
								to: receiver3 ] value.
							#_coverageTracker18724805_
								coverAll:
									{140 to: 142}
								evaluating: [ receiver4 not ]
								thatSends: #not
								to: receiver4 ] value ]]
					thatSends: #and:
					to: receiver5 ] value ]]
		thatSends: #and:
		to: receiver6 ] value.! !
!Behavior method!
weekendFee
	#_coverageTracker18724814_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724814_
		coverAll:
			{14 to: 17}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18724814_
		coverAll:
			{19 to: 23}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18724814_
		coverAll:
			{25 to: 34}
		evaluating: [ receiver2 weekendFee ]
		thatSends: #weekendFee
		to: receiver2 ] value.! !
!Behavior method!
duration
	#_coverageTracker18724818_ markAsExecuted.
	^ #_coverageTracker18724818_
		cover: (12 to: 19)
		declaredAt: (12 to: 19)
		by: duration.! !
!Behavior method!
addToBill
	#_coverageTracker18724820_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18724820_
		cover: (14 to: 17)
		declaredAt: (14 to: 17)
		by: bill.
	#_coverageTracker18724820_
		coverAll:
			{19 to: 37}
		evaluating: [
			receiver2 addAsInternational:
				[ | receiver1 |
				receiver1 := #_coverageTracker18724820_
					coverAll:
						{39 to: 42}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18724820_
					coverAll:
						{44 to: 47}
					evaluating: [ receiver1 cost ]
					thatSends: #cost
					to: receiver1 ] value ]
		thatSends: #addAsInternational:
		to: receiver2 ] value.! !
!Behavior method!
addAsNational: aNationalCallCostToAdd
	#_coverageTracker18724824_ markAsExecuted.
	#_coverageTracker18724824_
		cover: (58 to: 70)
		declaredAt: (41 to: 53)
		by:
			(nationalUsage := [ | receiver1 |
			receiver1 := #_coverageTracker18724824_
				cover: (41 to: 53)
				declaredAt: (41 to: 53)
				by: nationalUsage.
			#_coverageTracker18724824_
				coverAll:
					{72 to: 72}
				evaluating: [
					receiver1 +
						(#_coverageTracker18724824_
							cover: (74 to: 95)
							declaredAt: (16 to: 37)
							by: aNationalCallCostToAdd) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
fromRegion: aCallingRegion in: aCallingCountry number: aLineNumber
	#_coverageTracker18724828_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724828_
		coverAll:
			{73 to: 76}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18724828_
		coverAll:
			{78 to: 80}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker18724828_
		coverAll:
			{82 to: 102. 119 to: 121. 139 to: 145}
		evaluating: [
			receiver2
				initializeFromRegion:
					(#_coverageTracker18724828_
						cover: (104 to: 117)
						declaredAt: (13 to: 26)
						by: aCallingRegion)
				in:
					(#_coverageTracker18724828_
						cover: (123 to: 137)
						declaredAt: (32 to: 46)
						by: aCallingCountry)
				number:
					(#_coverageTracker18724828_
						cover: (147 to: 157)
						declaredAt: (56 to: 66)
						by: aLineNumber) ]
		thatSends: #initializeFromRegion:in:number:
		to: receiver2 ] value.! !
!Behavior method!
outgoingCalls
	"Podria argumentarse que rompe encapsulamiento, pero lo hago en pos de no agregarle logica de calculo de costos a la linea ya no que no tiene que ver con la esencia de este objeto."
	#_coverageTracker18724836_ markAsExecuted.
	^ #_coverageTracker18724836_
		cover: (200 to: 212)
		declaredAt: (200 to: 212)
		by: outgoingCalls.! !
!Behavior method!
canHandle: aCallToBill
	#_coverageTracker18724838_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 := [ | receiver1 |
	receiver1 := #_coverageTracker18724838_
		cover: (26 to: 36)
		declaredAt: (12 to: 22)
		by: aCallToBill.
	#_coverageTracker18724838_
		coverAll:
			{38 to: 44}
		evaluating: [ receiver1 isLocal ]
		thatSends: #isLocal
		to: receiver1 ] value.
	#_coverageTracker18724838_
		coverAll:
			{46 to: 49}
		evaluating: [
			receiver4 and: [
				[ | receiver3 |
				receiver3 := [ | receiver2 |
				receiver2 := #_coverageTracker18724838_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18724838_
					coverAll:
						{58 to: 74}
					evaluating: [
						receiver2 isCallOnAWeekDay:
							(#_coverageTracker18724838_
								cover: (76 to: 86)
								declaredAt: (12 to: 22)
								by: aCallToBill) ]
					thatSends: #isCallOnAWeekDay:
					to: receiver2 ] value.
				#_coverageTracker18724838_
					coverAll:
						{89 to: 91}
					evaluating: [ receiver3 not ]
					thatSends: #not
					to: receiver3 ] value ]]
		thatSends: #and:
		to: receiver4 ] value.! !
!Behavior method!
isNational
	#_coverageTracker18724847_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 := [ | receiver1 |
	receiver1 := #_coverageTracker18724847_
		cover: (17 to: 22)
		declaredAt: (17 to: 22)
		by: callee.
	#_coverageTracker18724847_
		coverAll:
			{24 to: 43}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker18724847_
					cover: (45 to: 50)
					declaredAt: (45 to: 50)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker18724847_
		coverAll:
			{53 to: 56}
		evaluating: [
			receiver4 and: [
				[ | receiver3 |
				receiver3 := [ | receiver2 |
				receiver2 := #_coverageTracker18724847_
					cover: (60 to: 65)
					declaredAt: (17 to: 22)
					by: callee.
				#_coverageTracker18724847_
					coverAll:
						{67 to: 85}
					evaluating: [
						receiver2 isFromSameRegionAs:
							(#_coverageTracker18724847_
								cover: (87 to: 92)
								declaredAt: (45 to: 50)
								by: caller) ]
					thatSends: #isFromSameRegionAs:
					to: receiver2 ] value.
				#_coverageTracker18724847_
					coverAll:
						{95 to: 97}
					evaluating: [ receiver3 not ]
					thatSends: #not
					to: receiver3 ] value ]]
		thatSends: #and:
		to: receiver4 ] value.! !
!Behavior method!
weekDayWorkHoursFee
	#_coverageTracker18724853_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724853_
		coverAll:
			{23 to: 25}
		byLiteralOrPseudoVariable: 0.2.
	#_coverageTracker18724853_
		coverAll:
			{27 to: 27}
		evaluating: [
			receiver1 *
				(#_coverageTracker18724853_
					coverAll:
						{29 to: 34}
					by: dollar) ]
		thatSends: #*
		to: receiver1 ] value.
	#_coverageTracker18724853_
		coverAll:
			{36 to: 36}
		evaluating: [
			receiver2 /
				(#_coverageTracker18724853_
					coverAll:
						{38 to: 43}
					by: minute) ]
		thatSends: #/
		to: receiver2 ] value.! !
!Behavior method!
timeOfDay
	#_coverageTracker18724857_ markAsExecuted.
	^ #_coverageTracker18724857_
		cover: (13 to: 21)
		declaredAt: (13 to: 21)
		by: timeOfDay.! !
!Behavior method!
internationalFee
	#_coverageTracker18724859_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724859_
		coverAll:
			{20 to: 23}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18724859_
		coverAll:
			{25 to: 29}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18724859_
		coverAll:
			{31 to: 46}
		evaluating: [ receiver2 internationalFee ]
		thatSends: #internationalFee
		to: receiver2 ] value.! !
!Behavior method!
isFromSameCountryAs: aTelephoneLine
	#_coverageTracker18724861_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18724861_
		cover: (40 to: 46)
		declaredAt: (40 to: 46)
		by: country.
	#_coverageTracker18724861_
		coverAll:
			{48 to: 48}
		evaluating: [
			receiver2 =
				[ | receiver1 |
				receiver1 := #_coverageTracker18724861_
					cover: (50 to: 63)
					declaredAt: (22 to: 35)
					by: aTelephoneLine.
				#_coverageTracker18724861_
					coverAll:
						{65 to: 71}
					evaluating: [ receiver1 country ]
					thatSends: #country
					to: receiver1 ] value ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
totalDue
	#_coverageTracker18724868_ markAsExecuted.
	^ #_coverageTracker18724868_
		cover: (12 to: 16)
		declaredAt: (12 to: 16)
		by: total.! !
!Behavior method!
fee
	#_coverageTracker18724870_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724870_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18724870_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18724870_
		coverAll:
			{21 to: 36}
		evaluating: [ receiver2 internationalFee ]
		thatSends: #internationalFee
		to: receiver2 ] value.! !
!Behavior method!
number
	#_coverageTracker18724872_ markAsExecuted.
	^ #_coverageTracker18724872_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: number.! !
!Behavior method!
isFromSameRegionAs: aTelephoneLine
	#_coverageTracker18724876_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := #_coverageTracker18724876_
		cover: (39 to: 44)
		declaredAt: (39 to: 44)
		by: region.
	#_coverageTracker18724876_
		coverAll:
			{46 to: 46}
		evaluating: [
			receiver2 =
				[ | receiver1 |
				receiver1 := #_coverageTracker18724876_
					cover: (48 to: 61)
					declaredAt: (21 to: 34)
					by: aTelephoneLine.
				#_coverageTracker18724876_
					coverAll:
						{63 to: 68}
					evaluating: [ receiver1 region ]
					thatSends: #region
					to: receiver1 ] value ]
		thatSends: #=
		to: receiver2 ] value.! !
!Behavior method!
initializeFor: aCallToBill in: aRequestingBill
	#_coverageTracker18724880_ markAsExecuted.
	#_coverageTracker18724880_
		cover: (50 to: 53)
		declaredAt: (50 to: 53)
		by:
			(call := #_coverageTracker18724880_
				cover: (58 to: 68)
				declaredAt: (16 to: 26)
				by: aCallToBill).
	#_coverageTracker18724880_
		cover: (72 to: 75)
		declaredAt: (72 to: 75)
		by:
			(bill := #_coverageTracker18724880_
				cover: (80 to: 94)
				declaredAt: (32 to: 46)
				by: aRequestingBill).! !
!Behavior method!
weekDayNonWorkHoursFee
	#_coverageTracker18724884_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724884_
		coverAll:
			{26 to: 29}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18724884_
		coverAll:
			{31 to: 35}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker18724884_
		coverAll:
			{37 to: 58}
		evaluating: [ receiver2 weekDayNonWorkHoursFee ]
		thatSends: #weekDayNonWorkHoursFee
		to: receiver2 ] value.! !
!Behavior method!
for: aLineToBill duringMonth: aMonthOfBilling
	#_coverageTracker18724888_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724888_
		coverAll:
			{50 to: 53}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker18724888_
		coverAll:
			{55 to: 57}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker18724888_
		coverAll:
			{59 to: 72. 86 to: 97}
		evaluating: [
			receiver2
				initializeFor:
					(#_coverageTracker18724888_
						cover: (74 to: 84)
						declaredAt: (6 to: 16)
						by: aLineToBill)
				duringMonth:
					(#_coverageTracker18724888_
						cover: (99 to: 113)
						declaredAt: (31 to: 45)
						by: aMonthOfBilling) ]
		thatSends: #initializeFor:duringMonth:
		to: receiver2 ] value.! !
!Behavior method!
isInternational
	#_coverageTracker18724893_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724893_
		cover: (22 to: 27)
		declaredAt: (22 to: 27)
		by: callee.
	#_coverageTracker18724893_
		coverAll:
			{29 to: 48}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker18724893_
					cover: (50 to: 55)
					declaredAt: (50 to: 55)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker18724893_
		coverAll:
			{58 to: 60}
		evaluating: [ receiver2 not ]
		thatSends: #not
		to: receiver2 ] value.! !
!Behavior method!
cost
	#_coverageTracker18724897_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18724897_
		cover: (10 to: 13)
		declaredAt: (10 to: 13)
		by: call.
	#_coverageTracker18724897_
		coverAll:
			{15 to: 22}
		evaluating: [ receiver1 duration ]
		thatSends: #duration
		to: receiver1 ] value.
	#_coverageTracker18724897_
		coverAll:
			{24 to: 24}
		evaluating: [
			receiver3 *
				[ | receiver2 |
				receiver2 := #_coverageTracker18724897_
					coverAll:
						{26 to: 29}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker18724897_
					coverAll:
						{31 to: 33}
					evaluating: [ receiver2 fee ]
					thatSends: #fee
					to: receiver2 ] value ]
		thatSends: #*
		to: receiver3 ] value.! !
!Behavior method!
fee
	#_coverageTracker18724901_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 := [ | receiver1 |
	receiver1 := #_coverageTracker18724901_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: call.
	#_coverageTracker18724901_
		coverAll:
			{14 to: 19}
		evaluating: [ receiver1 caller ]
		thatSends: #caller
		to: receiver1 ] value.
	#_coverageTracker18724901_
		coverAll:
			{21 to: 30}
		evaluating: [ receiver2 weekendFee ]
		thatSends: #weekendFee
		to: receiver2 ] value.! !
!Behavior method!
isLocal
	#_coverageTracker18724905_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 := [ | receiver1 |
	receiver1 := #_coverageTracker18724905_
		cover: (14 to: 19)
		declaredAt: (14 to: 19)
		by: callee.
	#_coverageTracker18724905_
		coverAll:
			{21 to: 40}
		evaluating: [
			receiver1 isFromSameCountryAs:
				(#_coverageTracker18724905_
					cover: (42 to: 47)
					declaredAt: (42 to: 47)
					by: caller) ]
		thatSends: #isFromSameCountryAs:
		to: receiver1 ] value.
	#_coverageTracker18724905_
		coverAll:
			{50 to: 53}
		evaluating: [
			receiver3 and: [
				[ | receiver2 |
				receiver2 := #_coverageTracker18724905_
					cover: (57 to: 62)
					declaredAt: (14 to: 19)
					by: callee.
				#_coverageTracker18724905_
					coverAll:
						{64 to: 82}
					evaluating: [
						receiver2 isFromSameRegionAs:
							(#_coverageTracker18724905_
								cover: (84 to: 89)
								declaredAt: (42 to: 47)
								by: caller) ]
					thatSends: #isFromSameRegionAs:
					to: receiver2 ] value ]]
		thatSends: #and:
		to: receiver3 ] value.! !

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:11:17'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:11:17'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:11:17'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:11:17'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:11:17'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:11:17'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:11:17'!
PASSED!

!methodRemoval: TelephoneLineBillTest #localLine1 stamp: 'AS 3/30/2025 23:12:37'!
localLine1

	^ TelephoneLine fromRegion: 'Buenos Aires' in: 'Argentina' number: '+541143215678'!

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:12:38'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:12:38'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:12:38'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:12:38'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:12:38'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:12:38'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:12:38'!
PASSED!
!TelephoneLineBillTest methodsFor: 'support' stamp: 'AS 3/30/2025 23:14:04'!
closestDayTo: aDate betweenIndex: startingWeekdayIndex and: endingWeekdayIndex
	| date |
	date := aDate.
	[date weekdayIndex between: startingWeekdayIndex and: endingWeekdayIndex] whileFalse: [date := date next].
	^date! !
!TelephoneLineBillTest methodsFor: 'support' stamp: 'AS 3/30/2025 23:14:17' prior: 50544405!
closestWeekDayTo: aDate
	
	self closestDayTo: aDate betweenIndex: 1 and: 5! !

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:14:18'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:18'!
ERROR!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:18'!
ERROR!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:18'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:18'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:18'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:14:18'!
ERROR!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:19'!
ERROR!
!TelephoneLineBillTest methodsFor: 'support' stamp: 'AS 3/30/2025 23:14:33' prior: 50556515!
closestWeekDayTo: aDate
	
	^self closestDayTo: aDate betweenIndex: 1 and: 5! !

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:14:34'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:34'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:34'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:34'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:34'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:34'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:14:34'!
PASSED!
!TelephoneLineBillTest methodsFor: 'support' stamp: 'AS 3/30/2025 23:14:46' prior: 50544541!
closestWeekendDayTo: aDate 
	
	^self closestDayTo: aDate betweenIndex: 6 and: 7! !

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:14:46'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:46'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:46'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:46'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:46'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:14:46'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:14:46'!
PASSED!
!TelephoneLineBillTest methodsFor: 'support' stamp: 'AS 3/30/2025 23:15:56'!
closestFollowingDayTo: aDate betweenIndex: startingWeekdayIndex and: endingWeekdayIndex
	| date |
	date := aDate.
	[date weekdayIndex between: startingWeekdayIndex and: endingWeekdayIndex] whileFalse: [date := date next].
	^date! !
!TelephoneLineBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 23:15:56' prior: 50556521!
closestWeekDayTo: aDate
	
	^self closestFollowingDayTo: aDate betweenIndex: 1 and: 5! !
!TelephoneLineBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 23:15:56' prior: 50556527!
closestWeekendDayTo: aDate 
	
	^self closestFollowingDayTo: aDate betweenIndex: 6 and: 7! !

!methodRemoval: TelephoneLineBillTest #closestDayTo:betweenIndex:and: stamp: 'AS 3/30/2025 23:15:56'!
closestDayTo: aDate betweenIndex: startingWeekdayIndex and: endingWeekdayIndex
	| date |
	date := aDate.
	[date weekdayIndex between: startingWeekdayIndex and: endingWeekdayIndex] whileFalse: [date := date next].
	^date!
!TelephoneLineBillTest methodsFor: 'support' stamp: 'AS 3/30/2025 23:16:05'!
closestFollowingWeekDayTo: aDate
	
	^self closestFollowingDayTo: aDate betweenIndex: 1 and: 5! !
!TelephoneLineBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 23:16:05' prior: 50544690!
weekDay

	^ self closestFollowingWeekDayTo: (self firstDayOfTodaysMonth) ! !

!methodRemoval: TelephoneLineBillTest #closestWeekDayTo: stamp: 'AS 3/30/2025 23:16:05'!
closestWeekDayTo: aDate
	
	^self closestFollowingDayTo: aDate betweenIndex: 1 and: 5!
!TelephoneLineBillTest methodsFor: 'support' stamp: 'AS 3/30/2025 23:16:14'!
closestFollowingWeekendDayTo: aDate 
	
	^self closestFollowingDayTo: aDate betweenIndex: 6 and: 7! !
!TelephoneLineBillTest methodsFor: 'as yet unclassified' stamp: 'AS 3/30/2025 23:16:14' prior: 50544684!
weekendDay

	^self closestFollowingWeekendDayTo: (self firstDayOfTodaysMonth) ! !

!methodRemoval: TelephoneLineBillTest #closestWeekendDayTo: stamp: 'AS 3/30/2025 23:16:14'!
closestWeekendDayTo: aDate 
	
	^self closestFollowingDayTo: aDate betweenIndex: 6 and: 7!

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:16:16'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:16:16'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:16:16'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:16:16'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:16:16'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:16:16'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:16:16'!
PASSED!

bill show!
!TelephoneLineBillTest methodsFor: 'support' stamp: 'AS 3/30/2025 23:21:20' prior: 50549596!
bill

	^ TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month! !

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:21:21'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:21:21'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:21:21'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:21:21'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:21:21'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:21:21'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:21:21'!
PASSED!

bill show!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:23:11'!
PASSED!

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:23:15'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:23:15'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:23:15'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:23:15'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:23:15'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:23:15'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:23:15'!
PASSED!
!TelephoneLineBillTest methodsFor: 'tests' stamp: 'AS 3/30/2025 23:24:55'!
test08CanNotBillAMonthBeforeLineWasEstablished
	self should: [TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month previous] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TelephoneLineBill canNotBillBeforeLineWasEstablishedErrorDescription! !

!testRun: #TelephoneLineBillTest #test08CanNotBillAMonthBeforeLineWasEstablished stamp: 'AS 3/30/2025 23:24:59'!
ERROR!
!TelephoneLineBill class methodsFor: 'error description' stamp: 'AS 3/30/2025 23:25:23'!
canNotBillBeforeLineWasEstablishedErrorDescription
	self shouldBeImplemented.! !
!TelephoneLineBill class methodsFor: 'error description' stamp: 'AS 3/30/2025 23:25:49' prior: 50556621!
canNotBillBeforeLineWasEstablishedErrorDescription
	^'Can not bill a line before the time it was established.'! !

!testRun: #TelephoneLineBillTest #test08CanNotBillAMonthBeforeLineWasEstablished stamp: 'AS 3/30/2025 23:25:50'!
FAILURE!

self firstDayOfTodaysMonth month previous!
!TelephoneLineBill class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 23:28:47' prior: 50545205!
for: aLineToBill duringMonth: aMonthOfBilling
	(aMonthOfBilling < (aLineToBill establishedDate month)) ifTrue: (self error: self canNotBillBeforeLineWasEstablishedErrorDescription).
	^self new initializeFor: aLineToBill duringMonth: aMonthOfBilling ! !

!testRun: #TelephoneLineBillTest #test08CanNotBillAMonthBeforeLineWasEstablished stamp: 'AS 3/30/2025 23:28:49'!
ERROR!
!TelephoneLine methodsFor: 'date' stamp: 'AS 3/30/2025 23:29:02'!
establishedDate
	self shouldBeImplemented.! !

!classDefinition: #TelephoneLine category: #PruebaTecnicaMercap stamp: 'AS 3/30/2025 23:29:10'!
Object subclass: #TelephoneLine
	instanceVariableNames: 'region country outgoingCalls number establishedDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PruebaTecnicaMercap'!
!TelephoneLine methodsFor: 'date' stamp: 'AS 3/30/2025 23:29:09' prior: 50556646!
establishedDate
	^establishedDate! !
!TelephoneLine methodsFor: 'instance creation' stamp: 'AS 3/30/2025 23:29:27' prior: 50546460!
initializeFromRegion: aCallingRegion in: aCallingCountry number: aLineNumber   
	region := aCallingRegion.
	country := aCallingCountry.
	number := aLineNumber.
	establishedDate := Date today.! !

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:29:32'!
ERROR!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:29:32'!
ERROR!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:29:32'!
ERROR!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:29:32'!
ERROR!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:29:32'!
ERROR!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:29:32'!
ERROR!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:29:32'!
ERROR!

!testRun: #TelephoneLineBillTest #test08CanNotBillAMonthBeforeLineWasEstablished stamp: 'AS 3/30/2025 23:29:32'!
ERROR!

!testRun: #TelephoneLineBillTest #test08CanNotBillAMonthBeforeLineWasEstablished stamp: 'AS 3/30/2025 23:29:40'!
ERROR!

aLineToBill establishedDate month!

aMonthOfBilling!

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:30:15'!
ERROR!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:15'!
ERROR!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:15'!
ERROR!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:15'!
ERROR!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:15'!
ERROR!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:15'!
ERROR!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:30:15'!
ERROR!

!testRun: #TelephoneLineBillTest #test08CanNotBillAMonthBeforeLineWasEstablished stamp: 'AS 3/30/2025 23:30:15'!
ERROR!

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:30:18'!
ERROR!
!TelephoneLineBill class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 23:30:36' prior: 50556636!
for: aLineToBill duringMonth: aMonthOfBilling
	(aMonthOfBilling < (aLineToBill establishedDate month)) ifTrue: [self error: self canNotBillBeforeLineWasEstablishedErrorDescription].
	^self new initializeFor: aLineToBill duringMonth: aMonthOfBilling ! !

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:30:39'!
ERROR!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:39'!
ERROR!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:39'!
ERROR!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:39'!
ERROR!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:39'!
ERROR!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:39'!
ERROR!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:30:39'!
ERROR!

!testRun: #TelephoneLineBillTest #test08CanNotBillAMonthBeforeLineWasEstablished stamp: 'AS 3/30/2025 23:30:39'!
ERROR!

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:30:43'!
ERROR!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:43'!
ERROR!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:43'!
ERROR!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:43'!
ERROR!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:43'!
ERROR!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:30:43'!
ERROR!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:30:43'!
ERROR!

!testRun: #TelephoneLineBillTest #test08CanNotBillAMonthBeforeLineWasEstablished stamp: 'AS 3/30/2025 23:30:43'!
ERROR!

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:30:45'!
ERROR!

(aMonthOfBilling < (aLineToBill establishedDate month))!

aMonthOfBilling < (aLineToBill establishedDate month)!

Date today month!

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:31:35'!
ERROR!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:31:35'!
ERROR!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:31:35'!
ERROR!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:31:35'!
ERROR!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:31:35'!
ERROR!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:31:35'!
ERROR!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:31:35'!
ERROR!

!testRun: #TelephoneLineBillTest #test08CanNotBillAMonthBeforeLineWasEstablished stamp: 'AS 3/30/2025 23:31:35'!
ERROR!

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:31:37'!
ERROR!

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:31:41'!
ERROR!

aLineToBill establishedDate month!

(Date today month previous) < Date today month!
!TelephoneLineBill class methodsFor: 'instance creation' stamp: 'AS 3/30/2025 23:35:19' prior: 50556676!
for: aLineToBill duringMonth: aMonthOfBilling
	(aMonthOfBilling monthIndex < (aLineToBill establishedDate month monthIndex)) ifTrue: [self error: self canNotBillBeforeLineWasEstablishedErrorDescription].
	^self new initializeFor: aLineToBill duringMonth: aMonthOfBilling ! !

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:35:19'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:35:19'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:35:19'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:35:19'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:35:19'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:35:19'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:35:19'!
PASSED!

!testRun: #TelephoneLineBillTest #test08CanNotBillAMonthBeforeLineWasEstablished stamp: 'AS 3/30/2025 23:35:19'!
PASSED!
!TelephoneLineBillTest methodsFor: 'tests' stamp: 'AS 3/30/2025 23:36:30'!
test08CanNotBillAMonthBeforeMonthLineWasEstablished
	self should: [TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month previous] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TelephoneLineBill canNotBillBeforeLineWasEstablishedErrorDescription! !

!methodRemoval: TelephoneLineBillTest #test08CanNotBillAMonthBeforeLineWasEstablished stamp: 'AS 3/30/2025 23:36:30'!
test08CanNotBillAMonthBeforeLineWasEstablished
	self should: [TelephoneLineBill for: localLine1 duringMonth: self firstDayOfTodaysMonth month previous] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TelephoneLineBill canNotBillBeforeLineWasEstablishedErrorDescription!

!testRun: #TelephoneLineBillTest #test08CanNotBillAMonthBeforeMonthLineWasEstablished stamp: 'AS 3/30/2025 23:36:31'!
PASSED!

!testRun: #TelephoneLineBillTest #test01UnusedLineIsBilledBasicFee stamp: 'AS 3/30/2025 23:36:31'!
PASSED!

!testRun: #TelephoneLineBillTest #test02WeekDayWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:36:31'!
PASSED!

!testRun: #TelephoneLineBillTest #test03WeekDayNonWorkHoursLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:36:31'!
PASSED!

!testRun: #TelephoneLineBillTest #test04WeekendLocalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:36:31'!
PASSED!

!testRun: #TelephoneLineBillTest #test05NationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:36:31'!
PASSED!

!testRun: #TelephoneLineBillTest #test06InternationalCallIsBilledCorrectly stamp: 'AS 3/30/2025 23:36:31'!
PASSED!

!testRun: #TelephoneLineBillTest #test07BillIsCorrectlyGenerated stamp: 'AS 3/30/2025 23:36:31'!
PASSED!

!testRun: #TelephoneLineBillTest #test08CanNotBillAMonthBeforeMonthLineWasEstablished stamp: 'AS 3/30/2025 23:36:31'!
PASSED!

----QUIT----(30 March 2025 23:40:02) CuisUniversity-6350.image priorSource: 6987877!